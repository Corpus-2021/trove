diff -ur 3.0.3-p1/gnu/trove/decorator/TByteByteMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TByteByteMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TByteByteMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TByteByteMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Byte(0) if none was found.
+     *         or null if none was found.
      */
     public Byte put( Byte key, Byte value ) {
-        byte k;
-        byte v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        byte k = unwrapKey( key );
+        byte v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            byte retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        byte retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Byte get( Object key ) {
-        byte k;
-        if ( key != null ) {
-            if ( key instanceof Byte ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        byte k = unwrapKey( key );
         byte v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Byte remove( Object key ) {
-        byte k;
-        if ( key != null ) {
-            if ( key instanceof Byte ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        byte v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        byte k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            byte v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Byte,Byte> next() {
                         it.advance();
                         byte ik = it.key();
-                        final Byte key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Byte key = wrapKey( ik );
                         byte iv = it.value();
-                        final Byte v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Byte v = wrapValue( iv );
                         return new Map.Entry<Byte,Byte>() {
                             private Byte val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Byte && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TByteCharMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TByteCharMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TByteCharMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TByteCharMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Character(0) if none was found.
+     *         or null if none was found.
      */
     public Character put( Byte key, Character value ) {
-        byte k;
-        char v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        byte k = unwrapKey( key );
+        char v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            char retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        char retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Character get( Object key ) {
-        byte k;
-        if ( key != null ) {
-            if ( key instanceof Byte ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        byte k = unwrapKey( key );
         char v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Character remove( Object key ) {
-        byte k;
-        if ( key != null ) {
-            if ( key instanceof Byte ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        char v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        byte k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            char v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Byte,Character> next() {
                         it.advance();
                         byte ik = it.key();
-                        final Byte key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Byte key = wrapKey( ik );
                         char iv = it.value();
-                        final Character v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Character v = wrapValue( iv );
                         return new Map.Entry<Byte,Character>() {
                             private Character val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Byte && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TByteDoubleMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TByteDoubleMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TByteDoubleMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TByteDoubleMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Double(0) if none was found.
+     *         or null if none was found.
      */
     public Double put( Byte key, Double value ) {
-        byte k;
-        double v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        byte k = unwrapKey( key );
+        double v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            double retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        double retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Double get( Object key ) {
-        byte k;
-        if ( key != null ) {
-            if ( key instanceof Byte ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        byte k = unwrapKey( key );
         double v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Double remove( Object key ) {
-        byte k;
-        if ( key != null ) {
-            if ( key instanceof Byte ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        double v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        byte k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            double v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Byte,Double> next() {
                         it.advance();
                         byte ik = it.key();
-                        final Byte key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Byte key = wrapKey( ik );
                         double iv = it.value();
-                        final Double v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Double v = wrapValue( iv );
                         return new Map.Entry<Byte,Double>() {
                             private Double val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Byte && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TByteFloatMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TByteFloatMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TByteFloatMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TByteFloatMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Float(0) if none was found.
+     *         or null if none was found.
      */
     public Float put( Byte key, Float value ) {
-        byte k;
-        float v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        byte k = unwrapKey( key );
+        float v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            float retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        float retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Float get( Object key ) {
-        byte k;
-        if ( key != null ) {
-            if ( key instanceof Byte ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        byte k = unwrapKey( key );
         float v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Float remove( Object key ) {
-        byte k;
-        if ( key != null ) {
-            if ( key instanceof Byte ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        float v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        byte k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            float v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Byte,Float> next() {
                         it.advance();
                         byte ik = it.key();
-                        final Byte key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Byte key = wrapKey( ik );
                         float iv = it.value();
-                        final Float v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Float v = wrapValue( iv );
                         return new Map.Entry<Byte,Float>() {
                             private Float val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Byte && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TByteIntMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TByteIntMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TByteIntMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TByteIntMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Integer(0) if none was found.
+     *         or null if none was found.
      */
     public Integer put( Byte key, Integer value ) {
-        byte k;
-        int v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        byte k = unwrapKey( key );
+        int v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            int retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        int retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Integer get( Object key ) {
-        byte k;
-        if ( key != null ) {
-            if ( key instanceof Byte ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        byte k = unwrapKey( key );
         int v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Integer remove( Object key ) {
-        byte k;
-        if ( key != null ) {
-            if ( key instanceof Byte ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        int v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        byte k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            int v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Byte,Integer> next() {
                         it.advance();
                         byte ik = it.key();
-                        final Byte key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Byte key = wrapKey( ik );
                         int iv = it.value();
-                        final Integer v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Integer v = wrapValue( iv );
                         return new Map.Entry<Byte,Integer>() {
                             private Integer val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Byte && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TByteListDecorator.java 3.0.3-p2/gnu/trove/decorator/TByteListDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TByteListDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TByteListDecorator.java	2013-11-04 15:12:50.000000000 -0800
@@ -90,16 +90,14 @@
 	@Override
 	public Byte get( int index ) {
 		byte value = list.get( index );
-		if ( value == list.getNoEntryValue() ) return null;
-		else return Byte.valueOf( value );
+		return Byte.valueOf( value );
 	}
 
 
 	@Override
 	public Byte set( int index, Byte value ) {
 		byte previous_value = list.set( index, value );
-		if ( previous_value == list.getNoEntryValue() ) return null;
-		else return Byte.valueOf( previous_value );
+		return Byte.valueOf( previous_value );
 	}
 
 
@@ -112,8 +110,7 @@
 	@Override
 	public Byte remove( int index ) {
 		byte previous_value = list.removeAt( index );
-		if ( previous_value == list.getNoEntryValue() ) return null;
-		else return Byte.valueOf( previous_value );
+		return Byte.valueOf( previous_value );
 	}
 
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TByteLongMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TByteLongMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TByteLongMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TByteLongMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Long(0) if none was found.
+     *         or null if none was found.
      */
     public Long put( Byte key, Long value ) {
-        byte k;
-        long v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        byte k = unwrapKey( key );
+        long v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            long retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        long retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Long get( Object key ) {
-        byte k;
-        if ( key != null ) {
-            if ( key instanceof Byte ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        byte k = unwrapKey( key );
         long v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Long remove( Object key ) {
-        byte k;
-        if ( key != null ) {
-            if ( key instanceof Byte ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        long v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        byte k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            long v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Byte,Long> next() {
                         it.advance();
                         byte ik = it.key();
-                        final Byte key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Byte key = wrapKey( ik );
                         long iv = it.value();
-                        final Long v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Long v = wrapValue( iv );
                         return new Map.Entry<Byte,Long>() {
                             private Long val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Byte && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TByteObjectMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TByteObjectMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TByteObjectMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TByteObjectMapDecorator.java	2013-11-04 15:12:50.000000000 -0800
@@ -92,12 +92,7 @@
      *         or <tt>null</tt> if none was found.
      */
     public V put( Byte key, V value ) {
-        byte k;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
-        }
+        byte k = unwrapKey( key );
         return _map.put( k, value );
     }
 
@@ -109,16 +104,7 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public V get( Object key ) {
-        byte k;
-        if ( key != null ) {
-            if ( key instanceof Byte ) {
-                k = unwrapKey( ( Byte ) key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        byte k = unwrapKey( ( Byte ) key );
         return _map.get( k );
     }
 
@@ -138,16 +124,7 @@
      * @return the removed value, or Integer(0) if it was not found in the map
      */
     public V remove( Object key ) {
-        byte k;
-        if ( key != null ) {
-            if ( key instanceof Byte ) {
-                k = unwrapKey( ( Byte ) key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        byte k = unwrapKey( ( Byte ) key );
         return _map.remove( k );
     }
 
@@ -185,7 +162,7 @@
                     public Map.Entry<Byte,V> next() {
                         it.advance();
                         byte k = it.key();
-                        final Byte key = (k == _map.getNoEntryKey()) ? null : wrapKey( k );
+                        final Byte key = wrapKey( k );
                         final V v = it.value();
                         return new Map.Entry<Byte,V>() {
                             private V val = v;
@@ -269,7 +246,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Byte && _map.containsKey( ( ( Byte ) key ).byteValue() );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TByteShortMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TByteShortMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TByteShortMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TByteShortMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Short(0) if none was found.
+     *         or null if none was found.
      */
     public Short put( Byte key, Short value ) {
-        byte k;
-        short v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        byte k = unwrapKey( key );
+        short v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            short retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        short retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Short get( Object key ) {
-        byte k;
-        if ( key != null ) {
-            if ( key instanceof Byte ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        byte k = unwrapKey( key );
         short v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Short remove( Object key ) {
-        byte k;
-        if ( key != null ) {
-            if ( key instanceof Byte ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        short v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        byte k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            short v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Byte,Short> next() {
                         it.advance();
                         byte ik = it.key();
-                        final Byte key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Byte key = wrapKey( ik );
                         short iv = it.value();
-                        final Short v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Short v = wrapValue( iv );
                         return new Map.Entry<Byte,Short>() {
                             private Short val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Byte && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TCharByteMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TCharByteMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TCharByteMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TCharByteMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Byte(0) if none was found.
+     *         or null if none was found.
      */
     public Byte put( Character key, Byte value ) {
-        char k;
-        byte v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        char k = unwrapKey( key );
+        byte v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            byte retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        byte retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Byte get( Object key ) {
-        char k;
-        if ( key != null ) {
-            if ( key instanceof Character ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        char k = unwrapKey( key );
         byte v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Byte remove( Object key ) {
-        char k;
-        if ( key != null ) {
-            if ( key instanceof Character ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        byte v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        char k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            byte v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Character,Byte> next() {
                         it.advance();
                         char ik = it.key();
-                        final Character key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Character key = wrapKey( ik );
                         byte iv = it.value();
-                        final Byte v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Byte v = wrapValue( iv );
                         return new Map.Entry<Character,Byte>() {
                             private Byte val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Character && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TCharCharMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TCharCharMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TCharCharMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TCharCharMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Character(0) if none was found.
+     *         or null if none was found.
      */
     public Character put( Character key, Character value ) {
-        char k;
-        char v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        char k = unwrapKey( key );
+        char v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            char retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        char retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Character get( Object key ) {
-        char k;
-        if ( key != null ) {
-            if ( key instanceof Character ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        char k = unwrapKey( key );
         char v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Character remove( Object key ) {
-        char k;
-        if ( key != null ) {
-            if ( key instanceof Character ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        char v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        char k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            char v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Character,Character> next() {
                         it.advance();
                         char ik = it.key();
-                        final Character key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Character key = wrapKey( ik );
                         char iv = it.value();
-                        final Character v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Character v = wrapValue( iv );
                         return new Map.Entry<Character,Character>() {
                             private Character val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Character && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TCharDoubleMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TCharDoubleMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TCharDoubleMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TCharDoubleMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Double(0) if none was found.
+     *         or null if none was found.
      */
     public Double put( Character key, Double value ) {
-        char k;
-        double v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        char k = unwrapKey( key );
+        double v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            double retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        double retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Double get( Object key ) {
-        char k;
-        if ( key != null ) {
-            if ( key instanceof Character ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        char k = unwrapKey( key );
         double v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Double remove( Object key ) {
-        char k;
-        if ( key != null ) {
-            if ( key instanceof Character ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        double v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        char k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            double v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Character,Double> next() {
                         it.advance();
                         char ik = it.key();
-                        final Character key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Character key = wrapKey( ik );
                         double iv = it.value();
-                        final Double v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Double v = wrapValue( iv );
                         return new Map.Entry<Character,Double>() {
                             private Double val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Character && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TCharFloatMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TCharFloatMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TCharFloatMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TCharFloatMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Float(0) if none was found.
+     *         or null if none was found.
      */
     public Float put( Character key, Float value ) {
-        char k;
-        float v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        char k = unwrapKey( key );
+        float v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            float retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        float retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Float get( Object key ) {
-        char k;
-        if ( key != null ) {
-            if ( key instanceof Character ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        char k = unwrapKey( key );
         float v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Float remove( Object key ) {
-        char k;
-        if ( key != null ) {
-            if ( key instanceof Character ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        float v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        char k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            float v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Character,Float> next() {
                         it.advance();
                         char ik = it.key();
-                        final Character key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Character key = wrapKey( ik );
                         float iv = it.value();
-                        final Float v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Float v = wrapValue( iv );
                         return new Map.Entry<Character,Float>() {
                             private Float val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Character && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TCharIntMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TCharIntMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TCharIntMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TCharIntMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Integer(0) if none was found.
+     *         or null if none was found.
      */
     public Integer put( Character key, Integer value ) {
-        char k;
-        int v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        char k = unwrapKey( key );
+        int v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            int retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        int retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Integer get( Object key ) {
-        char k;
-        if ( key != null ) {
-            if ( key instanceof Character ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        char k = unwrapKey( key );
         int v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Integer remove( Object key ) {
-        char k;
-        if ( key != null ) {
-            if ( key instanceof Character ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        int v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        char k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            int v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Character,Integer> next() {
                         it.advance();
                         char ik = it.key();
-                        final Character key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Character key = wrapKey( ik );
                         int iv = it.value();
-                        final Integer v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Integer v = wrapValue( iv );
                         return new Map.Entry<Character,Integer>() {
                             private Integer val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Character && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TCharListDecorator.java 3.0.3-p2/gnu/trove/decorator/TCharListDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TCharListDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TCharListDecorator.java	2013-11-04 15:12:50.000000000 -0800
@@ -90,16 +90,14 @@
 	@Override
 	public Character get( int index ) {
 		char value = list.get( index );
-		if ( value == list.getNoEntryValue() ) return null;
-		else return Character.valueOf( value );
+		return Character.valueOf( value );
 	}
 
 
 	@Override
 	public Character set( int index, Character value ) {
 		char previous_value = list.set( index, value );
-		if ( previous_value == list.getNoEntryValue() ) return null;
-		else return Character.valueOf( previous_value );
+		return Character.valueOf( previous_value );
 	}
 
 
@@ -112,8 +110,7 @@
 	@Override
 	public Character remove( int index ) {
 		char previous_value = list.removeAt( index );
-		if ( previous_value == list.getNoEntryValue() ) return null;
-		else return Character.valueOf( previous_value );
+		return Character.valueOf( previous_value );
 	}
 
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TCharLongMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TCharLongMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TCharLongMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TCharLongMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Long(0) if none was found.
+     *         or null if none was found.
      */
     public Long put( Character key, Long value ) {
-        char k;
-        long v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        char k = unwrapKey( key );
+        long v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            long retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        long retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Long get( Object key ) {
-        char k;
-        if ( key != null ) {
-            if ( key instanceof Character ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        char k = unwrapKey( key );
         long v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Long remove( Object key ) {
-        char k;
-        if ( key != null ) {
-            if ( key instanceof Character ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        long v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        char k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            long v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Character,Long> next() {
                         it.advance();
                         char ik = it.key();
-                        final Character key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Character key = wrapKey( ik );
                         long iv = it.value();
-                        final Long v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Long v = wrapValue( iv );
                         return new Map.Entry<Character,Long>() {
                             private Long val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Character && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TCharObjectMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TCharObjectMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TCharObjectMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TCharObjectMapDecorator.java	2013-11-04 15:12:50.000000000 -0800
@@ -92,12 +92,7 @@
      *         or <tt>null</tt> if none was found.
      */
     public V put( Character key, V value ) {
-        char k;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
-        }
+        char k = unwrapKey( key );
         return _map.put( k, value );
     }
 
@@ -109,16 +104,7 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public V get( Object key ) {
-        char k;
-        if ( key != null ) {
-            if ( key instanceof Character ) {
-                k = unwrapKey( ( Character ) key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        char k = unwrapKey( ( Character ) key );
         return _map.get( k );
     }
 
@@ -138,16 +124,7 @@
      * @return the removed value, or Integer(0) if it was not found in the map
      */
     public V remove( Object key ) {
-        char k;
-        if ( key != null ) {
-            if ( key instanceof Character ) {
-                k = unwrapKey( ( Character ) key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        char k = unwrapKey( ( Character ) key );
         return _map.remove( k );
     }
 
@@ -185,7 +162,7 @@
                     public Map.Entry<Character,V> next() {
                         it.advance();
                         char k = it.key();
-                        final Character key = (k == _map.getNoEntryKey()) ? null : wrapKey( k );
+                        final Character key = wrapKey( k );
                         final V v = it.value();
                         return new Map.Entry<Character,V>() {
                             private V val = v;
@@ -269,7 +246,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Character && _map.containsKey( ( ( Character ) key ).charValue() );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TCharShortMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TCharShortMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TCharShortMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TCharShortMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Short(0) if none was found.
+     *         or null if none was found.
      */
     public Short put( Character key, Short value ) {
-        char k;
-        short v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        char k = unwrapKey( key );
+        short v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            short retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        short retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Short get( Object key ) {
-        char k;
-        if ( key != null ) {
-            if ( key instanceof Character ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        char k = unwrapKey( key );
         short v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Short remove( Object key ) {
-        char k;
-        if ( key != null ) {
-            if ( key instanceof Character ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        short v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        char k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            short v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Character,Short> next() {
                         it.advance();
                         char ik = it.key();
-                        final Character key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Character key = wrapKey( ik );
                         short iv = it.value();
-                        final Short v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Short v = wrapValue( iv );
                         return new Map.Entry<Character,Short>() {
                             private Short val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Character && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TDoubleByteMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TDoubleByteMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TDoubleByteMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TDoubleByteMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Byte(0) if none was found.
+     *         or null if none was found.
      */
     public Byte put( Double key, Byte value ) {
-        double k;
-        byte v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        double k = unwrapKey( key );
+        byte v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            byte retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        byte retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Byte get( Object key ) {
-        double k;
-        if ( key != null ) {
-            if ( key instanceof Double ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        double k = unwrapKey( key );
         byte v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Byte remove( Object key ) {
-        double k;
-        if ( key != null ) {
-            if ( key instanceof Double ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        byte v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        double k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            byte v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Double,Byte> next() {
                         it.advance();
                         double ik = it.key();
-                        final Double key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Double key = wrapKey( ik );
                         byte iv = it.value();
-                        final Byte v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Byte v = wrapValue( iv );
                         return new Map.Entry<Double,Byte>() {
                             private Byte val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Double && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TDoubleCharMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TDoubleCharMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TDoubleCharMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TDoubleCharMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Character(0) if none was found.
+     *         or null if none was found.
      */
     public Character put( Double key, Character value ) {
-        double k;
-        char v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        double k = unwrapKey( key );
+        char v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            char retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        char retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Character get( Object key ) {
-        double k;
-        if ( key != null ) {
-            if ( key instanceof Double ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        double k = unwrapKey( key );
         char v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Character remove( Object key ) {
-        double k;
-        if ( key != null ) {
-            if ( key instanceof Double ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        char v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        double k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            char v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Double,Character> next() {
                         it.advance();
                         double ik = it.key();
-                        final Double key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Double key = wrapKey( ik );
                         char iv = it.value();
-                        final Character v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Character v = wrapValue( iv );
                         return new Map.Entry<Double,Character>() {
                             private Character val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Double && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TDoubleDoubleMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TDoubleDoubleMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TDoubleDoubleMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TDoubleDoubleMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Double(0) if none was found.
+     *         or null if none was found.
      */
     public Double put( Double key, Double value ) {
-        double k;
-        double v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        double k = unwrapKey( key );
+        double v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            double retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        double retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Double get( Object key ) {
-        double k;
-        if ( key != null ) {
-            if ( key instanceof Double ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        double k = unwrapKey( key );
         double v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Double remove( Object key ) {
-        double k;
-        if ( key != null ) {
-            if ( key instanceof Double ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        double v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        double k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            double v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Double,Double> next() {
                         it.advance();
                         double ik = it.key();
-                        final Double key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Double key = wrapKey( ik );
                         double iv = it.value();
-                        final Double v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Double v = wrapValue( iv );
                         return new Map.Entry<Double,Double>() {
                             private Double val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Double && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TDoubleFloatMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TDoubleFloatMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TDoubleFloatMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TDoubleFloatMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Float(0) if none was found.
+     *         or null if none was found.
      */
     public Float put( Double key, Float value ) {
-        double k;
-        float v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        double k = unwrapKey( key );
+        float v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            float retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        float retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Float get( Object key ) {
-        double k;
-        if ( key != null ) {
-            if ( key instanceof Double ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        double k = unwrapKey( key );
         float v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Float remove( Object key ) {
-        double k;
-        if ( key != null ) {
-            if ( key instanceof Double ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        float v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        double k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            float v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Double,Float> next() {
                         it.advance();
                         double ik = it.key();
-                        final Double key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Double key = wrapKey( ik );
                         float iv = it.value();
-                        final Float v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Float v = wrapValue( iv );
                         return new Map.Entry<Double,Float>() {
                             private Float val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Double && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TDoubleIntMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TDoubleIntMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TDoubleIntMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TDoubleIntMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Integer(0) if none was found.
+     *         or null if none was found.
      */
     public Integer put( Double key, Integer value ) {
-        double k;
-        int v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        double k = unwrapKey( key );
+        int v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            int retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        int retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Integer get( Object key ) {
-        double k;
-        if ( key != null ) {
-            if ( key instanceof Double ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        double k = unwrapKey( key );
         int v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Integer remove( Object key ) {
-        double k;
-        if ( key != null ) {
-            if ( key instanceof Double ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        int v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        double k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            int v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Double,Integer> next() {
                         it.advance();
                         double ik = it.key();
-                        final Double key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Double key = wrapKey( ik );
                         int iv = it.value();
-                        final Integer v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Integer v = wrapValue( iv );
                         return new Map.Entry<Double,Integer>() {
                             private Integer val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Double && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TDoubleListDecorator.java 3.0.3-p2/gnu/trove/decorator/TDoubleListDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TDoubleListDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TDoubleListDecorator.java	2013-11-04 15:12:50.000000000 -0800
@@ -90,16 +90,14 @@
 	@Override
 	public Double get( int index ) {
 		double value = list.get( index );
-		if ( value == list.getNoEntryValue() ) return null;
-		else return Double.valueOf( value );
+		return Double.valueOf( value );
 	}
 
 
 	@Override
 	public Double set( int index, Double value ) {
 		double previous_value = list.set( index, value );
-		if ( previous_value == list.getNoEntryValue() ) return null;
-		else return Double.valueOf( previous_value );
+		return Double.valueOf( previous_value );
 	}
 
 
@@ -112,8 +110,7 @@
 	@Override
 	public Double remove( int index ) {
 		double previous_value = list.removeAt( index );
-		if ( previous_value == list.getNoEntryValue() ) return null;
-		else return Double.valueOf( previous_value );
+		return Double.valueOf( previous_value );
 	}
 
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TDoubleLongMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TDoubleLongMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TDoubleLongMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TDoubleLongMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Long(0) if none was found.
+     *         or null if none was found.
      */
     public Long put( Double key, Long value ) {
-        double k;
-        long v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        double k = unwrapKey( key );
+        long v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            long retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        long retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Long get( Object key ) {
-        double k;
-        if ( key != null ) {
-            if ( key instanceof Double ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        double k = unwrapKey( key );
         long v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Long remove( Object key ) {
-        double k;
-        if ( key != null ) {
-            if ( key instanceof Double ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        long v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        double k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            long v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Double,Long> next() {
                         it.advance();
                         double ik = it.key();
-                        final Double key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Double key = wrapKey( ik );
                         long iv = it.value();
-                        final Long v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Long v = wrapValue( iv );
                         return new Map.Entry<Double,Long>() {
                             private Long val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Double && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TDoubleObjectMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TDoubleObjectMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TDoubleObjectMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TDoubleObjectMapDecorator.java	2013-11-04 15:12:50.000000000 -0800
@@ -92,12 +92,7 @@
      *         or <tt>null</tt> if none was found.
      */
     public V put( Double key, V value ) {
-        double k;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
-        }
+        double k = unwrapKey( key );
         return _map.put( k, value );
     }
 
@@ -109,16 +104,7 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public V get( Object key ) {
-        double k;
-        if ( key != null ) {
-            if ( key instanceof Double ) {
-                k = unwrapKey( ( Double ) key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        double k = unwrapKey( ( Double ) key );
         return _map.get( k );
     }
 
@@ -138,16 +124,7 @@
      * @return the removed value, or Integer(0) if it was not found in the map
      */
     public V remove( Object key ) {
-        double k;
-        if ( key != null ) {
-            if ( key instanceof Double ) {
-                k = unwrapKey( ( Double ) key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        double k = unwrapKey( ( Double ) key );
         return _map.remove( k );
     }
 
@@ -185,7 +162,7 @@
                     public Map.Entry<Double,V> next() {
                         it.advance();
                         double k = it.key();
-                        final Double key = (k == _map.getNoEntryKey()) ? null : wrapKey( k );
+                        final Double key = wrapKey( k );
                         final V v = it.value();
                         return new Map.Entry<Double,V>() {
                             private V val = v;
@@ -269,7 +246,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Double && _map.containsKey( ( ( Double ) key ).doubleValue() );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TDoubleShortMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TDoubleShortMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TDoubleShortMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TDoubleShortMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Short(0) if none was found.
+     *         or null if none was found.
      */
     public Short put( Double key, Short value ) {
-        double k;
-        short v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        double k = unwrapKey( key );
+        short v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            short retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        short retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Short get( Object key ) {
-        double k;
-        if ( key != null ) {
-            if ( key instanceof Double ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        double k = unwrapKey( key );
         short v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Short remove( Object key ) {
-        double k;
-        if ( key != null ) {
-            if ( key instanceof Double ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        short v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        double k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            short v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Double,Short> next() {
                         it.advance();
                         double ik = it.key();
-                        final Double key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Double key = wrapKey( ik );
                         short iv = it.value();
-                        final Short v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Short v = wrapValue( iv );
                         return new Map.Entry<Double,Short>() {
                             private Short val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Double && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TFloatByteMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TFloatByteMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TFloatByteMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TFloatByteMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Byte(0) if none was found.
+     *         or null if none was found.
      */
     public Byte put( Float key, Byte value ) {
-        float k;
-        byte v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        float k = unwrapKey( key );
+        byte v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            byte retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        byte retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Byte get( Object key ) {
-        float k;
-        if ( key != null ) {
-            if ( key instanceof Float ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        float k = unwrapKey( key );
         byte v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Byte remove( Object key ) {
-        float k;
-        if ( key != null ) {
-            if ( key instanceof Float ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        byte v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        float k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            byte v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Float,Byte> next() {
                         it.advance();
                         float ik = it.key();
-                        final Float key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Float key = wrapKey( ik );
                         byte iv = it.value();
-                        final Byte v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Byte v = wrapValue( iv );
                         return new Map.Entry<Float,Byte>() {
                             private Byte val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Float && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TFloatCharMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TFloatCharMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TFloatCharMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TFloatCharMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Character(0) if none was found.
+     *         or null if none was found.
      */
     public Character put( Float key, Character value ) {
-        float k;
-        char v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        float k = unwrapKey( key );
+        char v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            char retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        char retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Character get( Object key ) {
-        float k;
-        if ( key != null ) {
-            if ( key instanceof Float ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        float k = unwrapKey( key );
         char v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Character remove( Object key ) {
-        float k;
-        if ( key != null ) {
-            if ( key instanceof Float ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        char v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        float k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            char v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Float,Character> next() {
                         it.advance();
                         float ik = it.key();
-                        final Float key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Float key = wrapKey( ik );
                         char iv = it.value();
-                        final Character v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Character v = wrapValue( iv );
                         return new Map.Entry<Float,Character>() {
                             private Character val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Float && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TFloatDoubleMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TFloatDoubleMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TFloatDoubleMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TFloatDoubleMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Double(0) if none was found.
+     *         or null if none was found.
      */
     public Double put( Float key, Double value ) {
-        float k;
-        double v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        float k = unwrapKey( key );
+        double v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            double retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        double retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Double get( Object key ) {
-        float k;
-        if ( key != null ) {
-            if ( key instanceof Float ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        float k = unwrapKey( key );
         double v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Double remove( Object key ) {
-        float k;
-        if ( key != null ) {
-            if ( key instanceof Float ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        double v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        float k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            double v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Float,Double> next() {
                         it.advance();
                         float ik = it.key();
-                        final Float key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Float key = wrapKey( ik );
                         double iv = it.value();
-                        final Double v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Double v = wrapValue( iv );
                         return new Map.Entry<Float,Double>() {
                             private Double val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Float && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TFloatFloatMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TFloatFloatMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TFloatFloatMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TFloatFloatMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Float(0) if none was found.
+     *         or null if none was found.
      */
     public Float put( Float key, Float value ) {
-        float k;
-        float v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        float k = unwrapKey( key );
+        float v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            float retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        float retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Float get( Object key ) {
-        float k;
-        if ( key != null ) {
-            if ( key instanceof Float ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        float k = unwrapKey( key );
         float v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Float remove( Object key ) {
-        float k;
-        if ( key != null ) {
-            if ( key instanceof Float ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        float v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        float k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            float v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Float,Float> next() {
                         it.advance();
                         float ik = it.key();
-                        final Float key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Float key = wrapKey( ik );
                         float iv = it.value();
-                        final Float v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Float v = wrapValue( iv );
                         return new Map.Entry<Float,Float>() {
                             private Float val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Float && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TFloatIntMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TFloatIntMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TFloatIntMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TFloatIntMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Integer(0) if none was found.
+     *         or null if none was found.
      */
     public Integer put( Float key, Integer value ) {
-        float k;
-        int v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        float k = unwrapKey( key );
+        int v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            int retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        int retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Integer get( Object key ) {
-        float k;
-        if ( key != null ) {
-            if ( key instanceof Float ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        float k = unwrapKey( key );
         int v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Integer remove( Object key ) {
-        float k;
-        if ( key != null ) {
-            if ( key instanceof Float ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        int v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        float k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            int v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Float,Integer> next() {
                         it.advance();
                         float ik = it.key();
-                        final Float key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Float key = wrapKey( ik );
                         int iv = it.value();
-                        final Integer v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Integer v = wrapValue( iv );
                         return new Map.Entry<Float,Integer>() {
                             private Integer val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Float && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TFloatListDecorator.java 3.0.3-p2/gnu/trove/decorator/TFloatListDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TFloatListDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TFloatListDecorator.java	2013-11-04 15:12:50.000000000 -0800
@@ -90,16 +90,14 @@
 	@Override
 	public Float get( int index ) {
 		float value = list.get( index );
-		if ( value == list.getNoEntryValue() ) return null;
-		else return Float.valueOf( value );
+		return Float.valueOf( value );
 	}
 
 
 	@Override
 	public Float set( int index, Float value ) {
 		float previous_value = list.set( index, value );
-		if ( previous_value == list.getNoEntryValue() ) return null;
-		else return Float.valueOf( previous_value );
+		return Float.valueOf( previous_value );
 	}
 
 
@@ -112,8 +110,7 @@
 	@Override
 	public Float remove( int index ) {
 		float previous_value = list.removeAt( index );
-		if ( previous_value == list.getNoEntryValue() ) return null;
-		else return Float.valueOf( previous_value );
+		return Float.valueOf( previous_value );
 	}
 
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TFloatLongMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TFloatLongMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TFloatLongMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TFloatLongMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Long(0) if none was found.
+     *         or null if none was found.
      */
     public Long put( Float key, Long value ) {
-        float k;
-        long v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        float k = unwrapKey( key );
+        long v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            long retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        long retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Long get( Object key ) {
-        float k;
-        if ( key != null ) {
-            if ( key instanceof Float ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        float k = unwrapKey( key );
         long v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Long remove( Object key ) {
-        float k;
-        if ( key != null ) {
-            if ( key instanceof Float ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        long v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        float k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            long v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Float,Long> next() {
                         it.advance();
                         float ik = it.key();
-                        final Float key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Float key = wrapKey( ik );
                         long iv = it.value();
-                        final Long v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Long v = wrapValue( iv );
                         return new Map.Entry<Float,Long>() {
                             private Long val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Float && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TFloatObjectMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TFloatObjectMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TFloatObjectMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TFloatObjectMapDecorator.java	2013-11-04 15:12:50.000000000 -0800
@@ -92,12 +92,7 @@
      *         or <tt>null</tt> if none was found.
      */
     public V put( Float key, V value ) {
-        float k;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
-        }
+        float k = unwrapKey( key );
         return _map.put( k, value );
     }
 
@@ -109,16 +104,7 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public V get( Object key ) {
-        float k;
-        if ( key != null ) {
-            if ( key instanceof Float ) {
-                k = unwrapKey( ( Float ) key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        float k = unwrapKey( ( Float ) key );
         return _map.get( k );
     }
 
@@ -138,16 +124,7 @@
      * @return the removed value, or Integer(0) if it was not found in the map
      */
     public V remove( Object key ) {
-        float k;
-        if ( key != null ) {
-            if ( key instanceof Float ) {
-                k = unwrapKey( ( Float ) key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        float k = unwrapKey( ( Float ) key );
         return _map.remove( k );
     }
 
@@ -185,7 +162,7 @@
                     public Map.Entry<Float,V> next() {
                         it.advance();
                         float k = it.key();
-                        final Float key = (k == _map.getNoEntryKey()) ? null : wrapKey( k );
+                        final Float key = wrapKey( k );
                         final V v = it.value();
                         return new Map.Entry<Float,V>() {
                             private V val = v;
@@ -269,7 +246,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Float && _map.containsKey( ( ( Float ) key ).floatValue() );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TFloatShortMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TFloatShortMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TFloatShortMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TFloatShortMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Short(0) if none was found.
+     *         or null if none was found.
      */
     public Short put( Float key, Short value ) {
-        float k;
-        short v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        float k = unwrapKey( key );
+        short v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            short retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        short retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Short get( Object key ) {
-        float k;
-        if ( key != null ) {
-            if ( key instanceof Float ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        float k = unwrapKey( key );
         short v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Short remove( Object key ) {
-        float k;
-        if ( key != null ) {
-            if ( key instanceof Float ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        short v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        float k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            short v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Float,Short> next() {
                         it.advance();
                         float ik = it.key();
-                        final Float key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Float key = wrapKey( ik );
                         short iv = it.value();
-                        final Short v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Short v = wrapValue( iv );
                         return new Map.Entry<Float,Short>() {
                             private Short val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Float && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TIntByteMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TIntByteMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TIntByteMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TIntByteMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Byte(0) if none was found.
+     *         or null if none was found.
      */
     public Byte put( Integer key, Byte value ) {
-        int k;
-        byte v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        int k = unwrapKey( key );
+        byte v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            byte retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        byte retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Byte get( Object key ) {
-        int k;
-        if ( key != null ) {
-            if ( key instanceof Integer ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        int k = unwrapKey( key );
         byte v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Byte remove( Object key ) {
-        int k;
-        if ( key != null ) {
-            if ( key instanceof Integer ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        byte v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        int k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            byte v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Integer,Byte> next() {
                         it.advance();
                         int ik = it.key();
-                        final Integer key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Integer key = wrapKey( ik );
                         byte iv = it.value();
-                        final Byte v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Byte v = wrapValue( iv );
                         return new Map.Entry<Integer,Byte>() {
                             private Byte val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Integer && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TIntCharMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TIntCharMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TIntCharMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TIntCharMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Character(0) if none was found.
+     *         or null if none was found.
      */
     public Character put( Integer key, Character value ) {
-        int k;
-        char v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        int k = unwrapKey( key );
+        char v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            char retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        char retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Character get( Object key ) {
-        int k;
-        if ( key != null ) {
-            if ( key instanceof Integer ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        int k = unwrapKey( key );
         char v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Character remove( Object key ) {
-        int k;
-        if ( key != null ) {
-            if ( key instanceof Integer ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        char v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        int k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            char v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Integer,Character> next() {
                         it.advance();
                         int ik = it.key();
-                        final Integer key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Integer key = wrapKey( ik );
                         char iv = it.value();
-                        final Character v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Character v = wrapValue( iv );
                         return new Map.Entry<Integer,Character>() {
                             private Character val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Integer && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TIntDoubleMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TIntDoubleMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TIntDoubleMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TIntDoubleMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Double(0) if none was found.
+     *         or null if none was found.
      */
     public Double put( Integer key, Double value ) {
-        int k;
-        double v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        int k = unwrapKey( key );
+        double v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            double retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        double retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Double get( Object key ) {
-        int k;
-        if ( key != null ) {
-            if ( key instanceof Integer ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        int k = unwrapKey( key );
         double v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Double remove( Object key ) {
-        int k;
-        if ( key != null ) {
-            if ( key instanceof Integer ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        double v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        int k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            double v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Integer,Double> next() {
                         it.advance();
                         int ik = it.key();
-                        final Integer key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Integer key = wrapKey( ik );
                         double iv = it.value();
-                        final Double v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Double v = wrapValue( iv );
                         return new Map.Entry<Integer,Double>() {
                             private Double val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Integer && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TIntFloatMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TIntFloatMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TIntFloatMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TIntFloatMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Float(0) if none was found.
+     *         or null if none was found.
      */
     public Float put( Integer key, Float value ) {
-        int k;
-        float v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        int k = unwrapKey( key );
+        float v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            float retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        float retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Float get( Object key ) {
-        int k;
-        if ( key != null ) {
-            if ( key instanceof Integer ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        int k = unwrapKey( key );
         float v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Float remove( Object key ) {
-        int k;
-        if ( key != null ) {
-            if ( key instanceof Integer ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        float v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        int k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            float v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Integer,Float> next() {
                         it.advance();
                         int ik = it.key();
-                        final Integer key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Integer key = wrapKey( ik );
                         float iv = it.value();
-                        final Float v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Float v = wrapValue( iv );
                         return new Map.Entry<Integer,Float>() {
                             private Float val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Integer && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TIntIntMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TIntIntMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TIntIntMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TIntIntMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Integer(0) if none was found.
+     *         or null if none was found.
      */
     public Integer put( Integer key, Integer value ) {
-        int k;
-        int v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        int k = unwrapKey( key );
+        int v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            int retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        int retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Integer get( Object key ) {
-        int k;
-        if ( key != null ) {
-            if ( key instanceof Integer ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        int k = unwrapKey( key );
         int v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Integer remove( Object key ) {
-        int k;
-        if ( key != null ) {
-            if ( key instanceof Integer ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        int v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        int k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            int v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Integer,Integer> next() {
                         it.advance();
                         int ik = it.key();
-                        final Integer key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Integer key = wrapKey( ik );
                         int iv = it.value();
-                        final Integer v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Integer v = wrapValue( iv );
                         return new Map.Entry<Integer,Integer>() {
                             private Integer val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Integer && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TIntListDecorator.java 3.0.3-p2/gnu/trove/decorator/TIntListDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TIntListDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TIntListDecorator.java	2013-11-04 15:12:50.000000000 -0800
@@ -90,16 +90,14 @@
 	@Override
 	public Integer get( int index ) {
 		int value = list.get( index );
-		if ( value == list.getNoEntryValue() ) return null;
-		else return Integer.valueOf( value );
+		return Integer.valueOf( value );
 	}
 
 
 	@Override
 	public Integer set( int index, Integer value ) {
 		int previous_value = list.set( index, value );
-		if ( previous_value == list.getNoEntryValue() ) return null;
-		else return Integer.valueOf( previous_value );
+		return Integer.valueOf( previous_value );
 	}
 
 
@@ -112,8 +110,7 @@
 	@Override
 	public Integer remove( int index ) {
 		int previous_value = list.removeAt( index );
-		if ( previous_value == list.getNoEntryValue() ) return null;
-		else return Integer.valueOf( previous_value );
+		return Integer.valueOf( previous_value );
 	}
 
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TIntLongMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TIntLongMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TIntLongMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TIntLongMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Long(0) if none was found.
+     *         or null if none was found.
      */
     public Long put( Integer key, Long value ) {
-        int k;
-        long v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        int k = unwrapKey( key );
+        long v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            long retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        long retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Long get( Object key ) {
-        int k;
-        if ( key != null ) {
-            if ( key instanceof Integer ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        int k = unwrapKey( key );
         long v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Long remove( Object key ) {
-        int k;
-        if ( key != null ) {
-            if ( key instanceof Integer ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        long v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        int k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            long v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Integer,Long> next() {
                         it.advance();
                         int ik = it.key();
-                        final Integer key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Integer key = wrapKey( ik );
                         long iv = it.value();
-                        final Long v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Long v = wrapValue( iv );
                         return new Map.Entry<Integer,Long>() {
                             private Long val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Integer && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TIntObjectMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TIntObjectMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TIntObjectMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TIntObjectMapDecorator.java	2013-11-04 15:12:50.000000000 -0800
@@ -92,12 +92,7 @@
      *         or <tt>null</tt> if none was found.
      */
     public V put( Integer key, V value ) {
-        int k;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
-        }
+        int k = unwrapKey( key );
         return _map.put( k, value );
     }
 
@@ -109,16 +104,7 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public V get( Object key ) {
-        int k;
-        if ( key != null ) {
-            if ( key instanceof Integer ) {
-                k = unwrapKey( ( Integer ) key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        int k = unwrapKey( ( Integer ) key );
         return _map.get( k );
     }
 
@@ -138,16 +124,7 @@
      * @return the removed value, or Integer(0) if it was not found in the map
      */
     public V remove( Object key ) {
-        int k;
-        if ( key != null ) {
-            if ( key instanceof Integer ) {
-                k = unwrapKey( ( Integer ) key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        int k = unwrapKey( ( Integer ) key );
         return _map.remove( k );
     }
 
@@ -185,7 +162,7 @@
                     public Map.Entry<Integer,V> next() {
                         it.advance();
                         int k = it.key();
-                        final Integer key = (k == _map.getNoEntryKey()) ? null : wrapKey( k );
+                        final Integer key = wrapKey( k );
                         final V v = it.value();
                         return new Map.Entry<Integer,V>() {
                             private V val = v;
@@ -269,7 +246,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Integer && _map.containsKey( ( ( Integer ) key ).intValue() );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TIntShortMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TIntShortMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TIntShortMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TIntShortMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Short(0) if none was found.
+     *         or null if none was found.
      */
     public Short put( Integer key, Short value ) {
-        int k;
-        short v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        int k = unwrapKey( key );
+        short v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            short retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        short retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Short get( Object key ) {
-        int k;
-        if ( key != null ) {
-            if ( key instanceof Integer ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        int k = unwrapKey( key );
         short v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Short remove( Object key ) {
-        int k;
-        if ( key != null ) {
-            if ( key instanceof Integer ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        short v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        int k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            short v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Integer,Short> next() {
                         it.advance();
                         int ik = it.key();
-                        final Integer key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Integer key = wrapKey( ik );
                         short iv = it.value();
-                        final Short v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Short v = wrapValue( iv );
                         return new Map.Entry<Integer,Short>() {
                             private Short val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Integer && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TLongByteMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TLongByteMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TLongByteMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TLongByteMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Byte(0) if none was found.
+     *         or null if none was found.
      */
     public Byte put( Long key, Byte value ) {
-        long k;
-        byte v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        long k = unwrapKey( key );
+        byte v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            byte retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        byte retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Byte get( Object key ) {
-        long k;
-        if ( key != null ) {
-            if ( key instanceof Long ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        long k = unwrapKey( key );
         byte v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Byte remove( Object key ) {
-        long k;
-        if ( key != null ) {
-            if ( key instanceof Long ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        byte v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        long k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            byte v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Long,Byte> next() {
                         it.advance();
                         long ik = it.key();
-                        final Long key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Long key = wrapKey( ik );
                         byte iv = it.value();
-                        final Byte v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Byte v = wrapValue( iv );
                         return new Map.Entry<Long,Byte>() {
                             private Byte val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Long && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TLongCharMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TLongCharMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TLongCharMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TLongCharMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Character(0) if none was found.
+     *         or null if none was found.
      */
     public Character put( Long key, Character value ) {
-        long k;
-        char v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        long k = unwrapKey( key );
+        char v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            char retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        char retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Character get( Object key ) {
-        long k;
-        if ( key != null ) {
-            if ( key instanceof Long ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        long k = unwrapKey( key );
         char v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Character remove( Object key ) {
-        long k;
-        if ( key != null ) {
-            if ( key instanceof Long ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        char v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        long k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            char v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Long,Character> next() {
                         it.advance();
                         long ik = it.key();
-                        final Long key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Long key = wrapKey( ik );
                         char iv = it.value();
-                        final Character v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Character v = wrapValue( iv );
                         return new Map.Entry<Long,Character>() {
                             private Character val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Long && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TLongDoubleMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TLongDoubleMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TLongDoubleMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TLongDoubleMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Double(0) if none was found.
+     *         or null if none was found.
      */
     public Double put( Long key, Double value ) {
-        long k;
-        double v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        long k = unwrapKey( key );
+        double v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            double retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        double retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Double get( Object key ) {
-        long k;
-        if ( key != null ) {
-            if ( key instanceof Long ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        long k = unwrapKey( key );
         double v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Double remove( Object key ) {
-        long k;
-        if ( key != null ) {
-            if ( key instanceof Long ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        double v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        long k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            double v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Long,Double> next() {
                         it.advance();
                         long ik = it.key();
-                        final Long key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Long key = wrapKey( ik );
                         double iv = it.value();
-                        final Double v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Double v = wrapValue( iv );
                         return new Map.Entry<Long,Double>() {
                             private Double val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Long && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TLongFloatMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TLongFloatMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TLongFloatMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TLongFloatMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Float(0) if none was found.
+     *         or null if none was found.
      */
     public Float put( Long key, Float value ) {
-        long k;
-        float v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        long k = unwrapKey( key );
+        float v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            float retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        float retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Float get( Object key ) {
-        long k;
-        if ( key != null ) {
-            if ( key instanceof Long ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        long k = unwrapKey( key );
         float v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Float remove( Object key ) {
-        long k;
-        if ( key != null ) {
-            if ( key instanceof Long ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        float v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        long k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            float v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Long,Float> next() {
                         it.advance();
                         long ik = it.key();
-                        final Long key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Long key = wrapKey( ik );
                         float iv = it.value();
-                        final Float v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Float v = wrapValue( iv );
                         return new Map.Entry<Long,Float>() {
                             private Float val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Long && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TLongIntMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TLongIntMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TLongIntMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TLongIntMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Integer(0) if none was found.
+     *         or null if none was found.
      */
     public Integer put( Long key, Integer value ) {
-        long k;
-        int v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        long k = unwrapKey( key );
+        int v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            int retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        int retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Integer get( Object key ) {
-        long k;
-        if ( key != null ) {
-            if ( key instanceof Long ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        long k = unwrapKey( key );
         int v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Integer remove( Object key ) {
-        long k;
-        if ( key != null ) {
-            if ( key instanceof Long ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        int v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        long k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            int v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Long,Integer> next() {
                         it.advance();
                         long ik = it.key();
-                        final Long key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Long key = wrapKey( ik );
                         int iv = it.value();
-                        final Integer v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Integer v = wrapValue( iv );
                         return new Map.Entry<Long,Integer>() {
                             private Integer val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Long && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TLongListDecorator.java 3.0.3-p2/gnu/trove/decorator/TLongListDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TLongListDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TLongListDecorator.java	2013-11-04 15:12:50.000000000 -0800
@@ -90,16 +90,14 @@
 	@Override
 	public Long get( int index ) {
 		long value = list.get( index );
-		if ( value == list.getNoEntryValue() ) return null;
-		else return Long.valueOf( value );
+		return Long.valueOf( value );
 	}
 
 
 	@Override
 	public Long set( int index, Long value ) {
 		long previous_value = list.set( index, value );
-		if ( previous_value == list.getNoEntryValue() ) return null;
-		else return Long.valueOf( previous_value );
+		return Long.valueOf( previous_value );
 	}
 
 
@@ -112,8 +110,7 @@
 	@Override
 	public Long remove( int index ) {
 		long previous_value = list.removeAt( index );
-		if ( previous_value == list.getNoEntryValue() ) return null;
-		else return Long.valueOf( previous_value );
+		return Long.valueOf( previous_value );
 	}
 
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TLongLongMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TLongLongMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TLongLongMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TLongLongMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Long(0) if none was found.
+     *         or null if none was found.
      */
     public Long put( Long key, Long value ) {
-        long k;
-        long v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        long k = unwrapKey( key );
+        long v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            long retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        long retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Long get( Object key ) {
-        long k;
-        if ( key != null ) {
-            if ( key instanceof Long ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        long k = unwrapKey( key );
         long v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Long remove( Object key ) {
-        long k;
-        if ( key != null ) {
-            if ( key instanceof Long ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        long v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        long k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            long v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Long,Long> next() {
                         it.advance();
                         long ik = it.key();
-                        final Long key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Long key = wrapKey( ik );
                         long iv = it.value();
-                        final Long v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Long v = wrapValue( iv );
                         return new Map.Entry<Long,Long>() {
                             private Long val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Long && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TLongObjectMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TLongObjectMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TLongObjectMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TLongObjectMapDecorator.java	2013-11-04 15:12:50.000000000 -0800
@@ -92,12 +92,7 @@
      *         or <tt>null</tt> if none was found.
      */
     public V put( Long key, V value ) {
-        long k;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
-        }
+        long k = unwrapKey( key );
         return _map.put( k, value );
     }
 
@@ -109,16 +104,7 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public V get( Object key ) {
-        long k;
-        if ( key != null ) {
-            if ( key instanceof Long ) {
-                k = unwrapKey( ( Long ) key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        long k = unwrapKey( ( Long ) key );
         return _map.get( k );
     }
 
@@ -138,16 +124,7 @@
      * @return the removed value, or Integer(0) if it was not found in the map
      */
     public V remove( Object key ) {
-        long k;
-        if ( key != null ) {
-            if ( key instanceof Long ) {
-                k = unwrapKey( ( Long ) key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        long k = unwrapKey( ( Long ) key );
         return _map.remove( k );
     }
 
@@ -185,7 +162,7 @@
                     public Map.Entry<Long,V> next() {
                         it.advance();
                         long k = it.key();
-                        final Long key = (k == _map.getNoEntryKey()) ? null : wrapKey( k );
+                        final Long key = wrapKey( k );
                         final V v = it.value();
                         return new Map.Entry<Long,V>() {
                             private V val = v;
@@ -269,7 +246,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Long && _map.containsKey( ( ( Long ) key ).longValue() );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TLongShortMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TLongShortMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TLongShortMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TLongShortMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Short(0) if none was found.
+     *         or null if none was found.
      */
     public Short put( Long key, Short value ) {
-        long k;
-        short v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        long k = unwrapKey( key );
+        short v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            short retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        short retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Short get( Object key ) {
-        long k;
-        if ( key != null ) {
-            if ( key instanceof Long ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        long k = unwrapKey( key );
         short v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Short remove( Object key ) {
-        long k;
-        if ( key != null ) {
-            if ( key instanceof Long ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        short v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        long k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            short v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Long,Short> next() {
                         it.advance();
                         long ik = it.key();
-                        final Long key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Long key = wrapKey( ik );
                         short iv = it.value();
-                        final Short v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Short v = wrapValue( iv );
                         return new Map.Entry<Long,Short>() {
                             private Short val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Long && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TObjectByteMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TObjectByteMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TObjectByteMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TObjectByteMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -91,11 +91,15 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Byte</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Integer(0) if none was found.
+     *         or null if none was found.
      */
     public Byte put( K key, Byte value ) {
-        if ( value == null ) return wrapValue( _map.put( key, _map.getNoEntryValue() ) );
-        return wrapValue( _map.put( key, unwrapValue( value ) ) );
+        byte v = unwrapValue( value );
+        if ( _map.containsKey( key ) ) {
+            return wrapValue( _map.put( key, v ) );
+        }
+        _map.put( key, v );
+        return null;
     }
 
 
@@ -107,14 +111,10 @@
      */
     public Byte get( Object key ) {
         byte v = _map.get( key );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( key ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -130,18 +130,14 @@
      * Deletes a key/value pair from the map.
      *
      * @param key an <code>Object</code> value
-     * @return the removed value, or Integer(0) if it was not found in the map
+     * @return the removed value, or null if it was not found in the map
      */
     public Byte remove( Object key ) {
-        byte v = _map.remove( key );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        if ( _map.containsKey( key ) ) {
+            byte v = _map.remove( key );
             return wrapValue( v );
         }
+        return null;
     }
 
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TObjectCharMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TObjectCharMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TObjectCharMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TObjectCharMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -91,11 +91,15 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Character</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Integer(0) if none was found.
+     *         or null if none was found.
      */
     public Character put( K key, Character value ) {
-        if ( value == null ) return wrapValue( _map.put( key, _map.getNoEntryValue() ) );
-        return wrapValue( _map.put( key, unwrapValue( value ) ) );
+        char v = unwrapValue( value );
+        if ( _map.containsKey( key ) ) {
+            return wrapValue( _map.put( key, v ) );
+        }
+        _map.put( key, v );
+        return null;
     }
 
 
@@ -107,14 +111,10 @@
      */
     public Character get( Object key ) {
         char v = _map.get( key );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( key ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -130,18 +130,14 @@
      * Deletes a key/value pair from the map.
      *
      * @param key an <code>Object</code> value
-     * @return the removed value, or Integer(0) if it was not found in the map
+     * @return the removed value, or null if it was not found in the map
      */
     public Character remove( Object key ) {
-        char v = _map.remove( key );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        if ( _map.containsKey( key ) ) {
+            char v = _map.remove( key );
             return wrapValue( v );
         }
+        return null;
     }
 
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TObjectDoubleMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TObjectDoubleMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TObjectDoubleMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TObjectDoubleMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -91,11 +91,15 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Double</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Integer(0) if none was found.
+     *         or null if none was found.
      */
     public Double put( K key, Double value ) {
-        if ( value == null ) return wrapValue( _map.put( key, _map.getNoEntryValue() ) );
-        return wrapValue( _map.put( key, unwrapValue( value ) ) );
+        double v = unwrapValue( value );
+        if ( _map.containsKey( key ) ) {
+            return wrapValue( _map.put( key, v ) );
+        }
+        _map.put( key, v );
+        return null;
     }
 
 
@@ -107,14 +111,10 @@
      */
     public Double get( Object key ) {
         double v = _map.get( key );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( key ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -130,18 +130,14 @@
      * Deletes a key/value pair from the map.
      *
      * @param key an <code>Object</code> value
-     * @return the removed value, or Integer(0) if it was not found in the map
+     * @return the removed value, or null if it was not found in the map
      */
     public Double remove( Object key ) {
-        double v = _map.remove( key );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        if ( _map.containsKey( key ) ) {
+            double v = _map.remove( key );
             return wrapValue( v );
         }
+        return null;
     }
 
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TObjectFloatMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TObjectFloatMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TObjectFloatMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TObjectFloatMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -91,11 +91,15 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Float</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Integer(0) if none was found.
+     *         or null if none was found.
      */
     public Float put( K key, Float value ) {
-        if ( value == null ) return wrapValue( _map.put( key, _map.getNoEntryValue() ) );
-        return wrapValue( _map.put( key, unwrapValue( value ) ) );
+        float v = unwrapValue( value );
+        if ( _map.containsKey( key ) ) {
+            return wrapValue( _map.put( key, v ) );
+        }
+        _map.put( key, v );
+        return null;
     }
 
 
@@ -107,14 +111,10 @@
      */
     public Float get( Object key ) {
         float v = _map.get( key );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( key ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -130,18 +130,14 @@
      * Deletes a key/value pair from the map.
      *
      * @param key an <code>Object</code> value
-     * @return the removed value, or Integer(0) if it was not found in the map
+     * @return the removed value, or null if it was not found in the map
      */
     public Float remove( Object key ) {
-        float v = _map.remove( key );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        if ( _map.containsKey( key ) ) {
+            float v = _map.remove( key );
             return wrapValue( v );
         }
+        return null;
     }
 
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TObjectIntMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TObjectIntMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TObjectIntMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TObjectIntMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -91,11 +91,15 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Integer</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Integer(0) if none was found.
+     *         or null if none was found.
      */
     public Integer put( K key, Integer value ) {
-        if ( value == null ) return wrapValue( _map.put( key, _map.getNoEntryValue() ) );
-        return wrapValue( _map.put( key, unwrapValue( value ) ) );
+        int v = unwrapValue( value );
+        if ( _map.containsKey( key ) ) {
+            return wrapValue( _map.put( key, v ) );
+        }
+        _map.put( key, v );
+        return null;
     }
 
 
@@ -107,14 +111,10 @@
      */
     public Integer get( Object key ) {
         int v = _map.get( key );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( key ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -130,18 +130,14 @@
      * Deletes a key/value pair from the map.
      *
      * @param key an <code>Object</code> value
-     * @return the removed value, or Integer(0) if it was not found in the map
+     * @return the removed value, or null if it was not found in the map
      */
     public Integer remove( Object key ) {
-        int v = _map.remove( key );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        if ( _map.containsKey( key ) ) {
+            int v = _map.remove( key );
             return wrapValue( v );
         }
+        return null;
     }
 
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TObjectLongMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TObjectLongMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TObjectLongMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TObjectLongMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -91,11 +91,15 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Long</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Integer(0) if none was found.
+     *         or null if none was found.
      */
     public Long put( K key, Long value ) {
-        if ( value == null ) return wrapValue( _map.put( key, _map.getNoEntryValue() ) );
-        return wrapValue( _map.put( key, unwrapValue( value ) ) );
+        long v = unwrapValue( value );
+        if ( _map.containsKey( key ) ) {
+            return wrapValue( _map.put( key, v ) );
+        }
+        _map.put( key, v );
+        return null;
     }
 
 
@@ -107,14 +111,10 @@
      */
     public Long get( Object key ) {
         long v = _map.get( key );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( key ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -130,18 +130,14 @@
      * Deletes a key/value pair from the map.
      *
      * @param key an <code>Object</code> value
-     * @return the removed value, or Integer(0) if it was not found in the map
+     * @return the removed value, or null if it was not found in the map
      */
     public Long remove( Object key ) {
-        long v = _map.remove( key );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        if ( _map.containsKey( key ) ) {
+            long v = _map.remove( key );
             return wrapValue( v );
         }
+        return null;
     }
 
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TObjectShortMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TObjectShortMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TObjectShortMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TObjectShortMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -91,11 +91,15 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Short</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Integer(0) if none was found.
+     *         or null if none was found.
      */
     public Short put( K key, Short value ) {
-        if ( value == null ) return wrapValue( _map.put( key, _map.getNoEntryValue() ) );
-        return wrapValue( _map.put( key, unwrapValue( value ) ) );
+        short v = unwrapValue( value );
+        if ( _map.containsKey( key ) ) {
+            return wrapValue( _map.put( key, v ) );
+        }
+        _map.put( key, v );
+        return null;
     }
 
 
@@ -107,14 +111,10 @@
      */
     public Short get( Object key ) {
         short v = _map.get( key );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( key ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -130,18 +130,14 @@
      * Deletes a key/value pair from the map.
      *
      * @param key an <code>Object</code> value
-     * @return the removed value, or Integer(0) if it was not found in the map
+     * @return the removed value, or null if it was not found in the map
      */
     public Short remove( Object key ) {
-        short v = _map.remove( key );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        if ( _map.containsKey( key ) ) {
+            short v = _map.remove( key );
             return wrapValue( v );
         }
+        return null;
     }
 
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TShortByteMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TShortByteMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TShortByteMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TShortByteMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Byte(0) if none was found.
+     *         or null if none was found.
      */
     public Byte put( Short key, Byte value ) {
-        short k;
-        byte v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        short k = unwrapKey( key );
+        byte v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            byte retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        byte retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Byte get( Object key ) {
-        short k;
-        if ( key != null ) {
-            if ( key instanceof Short ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        short k = unwrapKey( key );
         byte v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Byte remove( Object key ) {
-        short k;
-        if ( key != null ) {
-            if ( key instanceof Short ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        byte v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        short k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            byte v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Short,Byte> next() {
                         it.advance();
                         short ik = it.key();
-                        final Short key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Short key = wrapKey( ik );
                         byte iv = it.value();
-                        final Byte v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Byte v = wrapValue( iv );
                         return new Map.Entry<Short,Byte>() {
                             private Byte val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Short && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TShortCharMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TShortCharMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TShortCharMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TShortCharMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Character(0) if none was found.
+     *         or null if none was found.
      */
     public Character put( Short key, Character value ) {
-        short k;
-        char v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        short k = unwrapKey( key );
+        char v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            char retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        char retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Character get( Object key ) {
-        short k;
-        if ( key != null ) {
-            if ( key instanceof Short ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        short k = unwrapKey( key );
         char v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Character remove( Object key ) {
-        short k;
-        if ( key != null ) {
-            if ( key instanceof Short ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        char v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        short k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            char v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Short,Character> next() {
                         it.advance();
                         short ik = it.key();
-                        final Short key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Short key = wrapKey( ik );
                         char iv = it.value();
-                        final Character v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Character v = wrapValue( iv );
                         return new Map.Entry<Short,Character>() {
                             private Character val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Short && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TShortDoubleMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TShortDoubleMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TShortDoubleMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TShortDoubleMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Double(0) if none was found.
+     *         or null if none was found.
      */
     public Double put( Short key, Double value ) {
-        short k;
-        double v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        short k = unwrapKey( key );
+        double v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            double retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        double retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Double get( Object key ) {
-        short k;
-        if ( key != null ) {
-            if ( key instanceof Short ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        short k = unwrapKey( key );
         double v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Double remove( Object key ) {
-        short k;
-        if ( key != null ) {
-            if ( key instanceof Short ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        double v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        short k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            double v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Short,Double> next() {
                         it.advance();
                         short ik = it.key();
-                        final Short key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Short key = wrapKey( ik );
                         double iv = it.value();
-                        final Double v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Double v = wrapValue( iv );
                         return new Map.Entry<Short,Double>() {
                             private Double val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Short && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TShortFloatMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TShortFloatMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TShortFloatMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TShortFloatMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Float(0) if none was found.
+     *         or null if none was found.
      */
     public Float put( Short key, Float value ) {
-        short k;
-        float v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        short k = unwrapKey( key );
+        float v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            float retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        float retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Float get( Object key ) {
-        short k;
-        if ( key != null ) {
-            if ( key instanceof Short ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        short k = unwrapKey( key );
         float v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Float remove( Object key ) {
-        short k;
-        if ( key != null ) {
-            if ( key instanceof Short ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        float v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        short k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            float v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Short,Float> next() {
                         it.advance();
                         short ik = it.key();
-                        final Short key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Short key = wrapKey( ik );
                         float iv = it.value();
-                        final Float v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Float v = wrapValue( iv );
                         return new Map.Entry<Short,Float>() {
                             private Float val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Short && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TShortIntMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TShortIntMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TShortIntMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TShortIntMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Integer(0) if none was found.
+     *         or null if none was found.
      */
     public Integer put( Short key, Integer value ) {
-        short k;
-        int v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        short k = unwrapKey( key );
+        int v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            int retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        int retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Integer get( Object key ) {
-        short k;
-        if ( key != null ) {
-            if ( key instanceof Short ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        short k = unwrapKey( key );
         int v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Integer remove( Object key ) {
-        short k;
-        if ( key != null ) {
-            if ( key instanceof Short ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        int v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        short k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            int v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Short,Integer> next() {
                         it.advance();
                         short ik = it.key();
-                        final Short key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Short key = wrapKey( ik );
                         int iv = it.value();
-                        final Integer v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Integer v = wrapValue( iv );
                         return new Map.Entry<Short,Integer>() {
                             private Integer val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Short && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TShortListDecorator.java 3.0.3-p2/gnu/trove/decorator/TShortListDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TShortListDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TShortListDecorator.java	2013-11-04 15:12:50.000000000 -0800
@@ -90,16 +90,14 @@
 	@Override
 	public Short get( int index ) {
 		short value = list.get( index );
-		if ( value == list.getNoEntryValue() ) return null;
-		else return Short.valueOf( value );
+		return Short.valueOf( value );
 	}
 
 
 	@Override
 	public Short set( int index, Short value ) {
 		short previous_value = list.set( index, value );
-		if ( previous_value == list.getNoEntryValue() ) return null;
-		else return Short.valueOf( previous_value );
+		return Short.valueOf( previous_value );
 	}
 
 
@@ -112,8 +110,7 @@
 	@Override
 	public Short remove( int index ) {
 		short previous_value = list.removeAt( index );
-		if ( previous_value == list.getNoEntryValue() ) return null;
-		else return Short.valueOf( previous_value );
+		return Short.valueOf( previous_value );
 	}
 
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TShortLongMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TShortLongMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TShortLongMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TShortLongMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Long(0) if none was found.
+     *         or null if none was found.
      */
     public Long put( Short key, Long value ) {
-        short k;
-        long v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        short k = unwrapKey( key );
+        long v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            long retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        long retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Long get( Object key ) {
-        short k;
-        if ( key != null ) {
-            if ( key instanceof Short ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        short k = unwrapKey( key );
         long v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Long remove( Object key ) {
-        short k;
-        if ( key != null ) {
-            if ( key instanceof Short ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        long v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        short k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            long v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Short,Long> next() {
                         it.advance();
                         short ik = it.key();
-                        final Short key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Short key = wrapKey( ik );
                         long iv = it.value();
-                        final Long v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Long v = wrapValue( iv );
                         return new Map.Entry<Short,Long>() {
                             private Long val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Short && _map.containsKey( unwrapKey( key ) );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TShortObjectMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TShortObjectMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TShortObjectMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TShortObjectMapDecorator.java	2013-11-04 15:12:50.000000000 -0800
@@ -92,12 +92,7 @@
      *         or <tt>null</tt> if none was found.
      */
     public V put( Short key, V value ) {
-        short k;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
-        }
+        short k = unwrapKey( key );
         return _map.put( k, value );
     }
 
@@ -109,16 +104,7 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public V get( Object key ) {
-        short k;
-        if ( key != null ) {
-            if ( key instanceof Short ) {
-                k = unwrapKey( ( Short ) key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        short k = unwrapKey( ( Short ) key );
         return _map.get( k );
     }
 
@@ -138,16 +124,7 @@
      * @return the removed value, or Integer(0) if it was not found in the map
      */
     public V remove( Object key ) {
-        short k;
-        if ( key != null ) {
-            if ( key instanceof Short ) {
-                k = unwrapKey( ( Short ) key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        short k = unwrapKey( ( Short ) key );
         return _map.remove( k );
     }
 
@@ -185,7 +162,7 @@
                     public Map.Entry<Short,V> next() {
                         it.advance();
                         short k = it.key();
-                        final Short key = (k == _map.getNoEntryKey()) ? null : wrapKey( k );
+                        final Short key = wrapKey( k );
                         final V v = it.value();
                         return new Map.Entry<Short,V>() {
                             private V val = v;
@@ -269,7 +246,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Short && _map.containsKey( ( ( Short ) key ).shortValue() );
     }
 
diff -ur 3.0.3-p1/gnu/trove/decorator/TShortShortMapDecorator.java 3.0.3-p2/gnu/trove/decorator/TShortShortMapDecorator.java
--- 3.0.3-p1/gnu/trove/decorator/TShortShortMapDecorator.java	2012-06-03 21:37:18.000000000 -0700
+++ 3.0.3-p2/gnu/trove/decorator/TShortShortMapDecorator.java	2013-11-04 17:54:23.000000000 -0800
@@ -89,26 +89,17 @@
      * @param key   an <code>Object</code> value
      * @param value an <code>Object</code> value
      * @return the previous value associated with <tt>key</tt>,
-     *         or Short(0) if none was found.
+     *         or null if none was found.
      */
     public Short put( Short key, Short value ) {
-        short k;
-        short v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        short k = unwrapKey( key );
+        short v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            short retval = _map.put( k, v );
+            return wrapValue( retval );
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        short retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -119,25 +110,12 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     public Short get( Object key ) {
-        short k;
-        if ( key != null ) {
-            if ( key instanceof Short ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
+        short k = unwrapKey( key );
         short v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if ( v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
@@ -156,25 +134,12 @@
      * @return the removed value, or null if it was not found in the map
      */
     public Short remove( Object key ) {
-        short k;
-        if ( key != null ) {
-            if ( key instanceof Short ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        short v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
-            return null;
-        } else {
+        short k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            short v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -211,9 +176,9 @@
                     public Map.Entry<Short,Short> next() {
                         it.advance();
                         short ik = it.key();
-                        final Short key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final Short key = wrapKey( ik );
                         short iv = it.value();
-                        final Short v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final Short v = wrapValue( iv );
                         return new Map.Entry<Short,Short>() {
                             private Short val = v;
 
@@ -296,7 +261,6 @@
      * @return a <code>boolean</code> value
      */
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof Short && _map.containsKey( unwrapKey( key ) );
     }
 
