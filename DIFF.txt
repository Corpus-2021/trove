diff -ur old-trove-3.0.3/AUTHORS.txt trove-3.0.3/AUTHORS.txt
--- old-trove-3.0.3/AUTHORS.txt	2012-06-03 21:38:22.000000000 -0700
+++ trove-3.0.3/AUTHORS.txt	2014-03-03 15:16:35.000000000 -0800
@@ -1,12 +1,16 @@
-Rob Eden <robeden@users.sourceforge.net>
-Johan Parent <jparent@users.sourceforge.net>
-Jeff Randall <randall@uph.com>
-Eric D. Friedman <ericdf@users.sourceforge.net>
-
-Please do NOT email bug reports or feature requests.
-
-Instead use the very fine bug tracking system and feature request
-service on SourceForge:  http://sourceforge.net/projects/trove4j/
-We'll read your issue just as quickly, and the project's issues will
-remain out in the open where everyone can see them.  We also monitor
-the project forums, so feel free to use those too.
+This version modified by Tim Wilson <twilson@palantir.com>
+
+Original authors:
+
+Rob Eden <robeden@users.sourceforge.net>
+Johan Parent <jparent@users.sourceforge.net>
+Jeff Randall <randall@uph.com>
+Eric D. Friedman <ericdf@users.sourceforge.net>
+
+Please do NOT email bug reports or feature requests.
+
+Instead use the very fine bug tracking system and feature request
+service on SourceForge:  http://sourceforge.net/projects/trove4j/
+We'll read your issue just as quickly, and the project's issues will
+remain out in the open where everyone can see them.  We also monitor
+the project forums, so feel free to use those too.
Only in trove-3.0.3/: build.sh
diff -ur old-trove-3.0.3/build.xml trove-3.0.3/build.xml
--- old-trove-3.0.3/build.xml	2012-06-03 21:38:22.000000000 -0700
+++ trove-3.0.3/build.xml	2014-03-03 15:19:33.000000000 -0800
@@ -442,4 +442,4 @@
             <format property="fullVersion" pattern="'build time' yyMMddHHmmss"/>
         </tstamp>
     </target>
-</project>
\ No newline at end of file
+</project>
Only in old-trove-3.0.3/: CHANGES.txt
Only in trove-3.0.3/: DIFF.txt
Only in trove-3.0.3/: generated-src
diff -ur old-trove-3.0.3/generator_src/gnu/trove/generator/Generator.java trove-3.0.3/generator_src/gnu/trove/generator/Generator.java
--- old-trove-3.0.3/generator_src/gnu/trove/generator/Generator.java	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/generator_src/gnu/trove/generator/Generator.java	2014-03-03 15:19:33.000000000 -0800
@@ -66,13 +66,13 @@
  */
 public class Generator {
     private static final WrapperInfo[] WRAPPERS = new WrapperInfo[]{
-            new WrapperInfo("double", "Double", "POSITIVE_INFINITY", "NEGATIVE_INFINITY"),
-            new WrapperInfo("float", "Float", "POSITIVE_INFINITY", "NEGATIVE_INFINITY"),
-            new WrapperInfo("int", "Integer", "MAX_VALUE", "MIN_VALUE"),
-            new WrapperInfo("long", "Long", "MAX_VALUE", "MIN_VALUE"),
-            new WrapperInfo("byte", "Byte", "MAX_VALUE", "MIN_VALUE"),
-            new WrapperInfo("short", "Short", "MAX_VALUE", "MIN_VALUE"),
-            new WrapperInfo("char", "Character", "MAX_VALUE", "MIN_VALUE")};
+            new WrapperInfo("double", "Double", "POSITIVE_INFINITY", "NEGATIVE_INFINITY", "8"),
+            new WrapperInfo("float", "Float", "POSITIVE_INFINITY", "NEGATIVE_INFINITY", "4"),
+            new WrapperInfo("int", "Integer", "MAX_VALUE", "MIN_VALUE", "4"),
+            new WrapperInfo("long", "Long", "MAX_VALUE", "MIN_VALUE", "8"),
+            new WrapperInfo("byte", "Byte", "MAX_VALUE", "MIN_VALUE", "1"),
+            new WrapperInfo("short", "Short", "MAX_VALUE", "MIN_VALUE", "2"),
+            new WrapperInfo("char", "Character", "MAX_VALUE", "MIN_VALUE", "2")};
 
     private static final Pattern PATTERN_v;
     private static final Pattern PATTERN_V;
@@ -80,6 +80,7 @@
     private static final Pattern PATTERN_VT;
     private static final Pattern PATTERN_VMAX;
     private static final Pattern PATTERN_VMIN;
+    private static final Pattern PATTERN_VBYTES;
     private static final Pattern PATTERN_V_UNDERBAR;
 
     private static final Pattern PATTERN_k;
@@ -88,6 +89,7 @@
     private static final Pattern PATTERN_KT;
     private static final Pattern PATTERN_KMAX;
     private static final Pattern PATTERN_KMIN;
+    private static final Pattern PATTERN_KBYTES;
     private static final Pattern PATTERN_K_UNDERBAR;
 
     private static final Pattern PATTERN_e;
@@ -96,6 +98,7 @@
     private static final Pattern PATTERN_ET;
     private static final Pattern PATTERN_EMAX;
     private static final Pattern PATTERN_EMIN;
+    private static final Pattern PATTERN_EBYTES;
     private static final Pattern PATTERN_E_UNDERBAR;
 
     static {
@@ -105,6 +108,7 @@
         PATTERN_VT = Pattern.compile("#VT#");
         PATTERN_VMAX = Pattern.compile("#VMAX#");
         PATTERN_VMIN = Pattern.compile("#VMIN#");
+        PATTERN_VBYTES = Pattern.compile("#VBYTES#");
         PATTERN_V_UNDERBAR = Pattern.compile("_V_");
 
         PATTERN_k = Pattern.compile("#k#");
@@ -113,6 +117,7 @@
         PATTERN_KT = Pattern.compile("#KT#");
         PATTERN_KMAX = Pattern.compile("#KMAX#");
         PATTERN_KMIN = Pattern.compile("#KMIN#");
+        PATTERN_KBYTES = Pattern.compile("#KBYTES#");
         PATTERN_K_UNDERBAR = Pattern.compile("_K_");
 
         PATTERN_e = Pattern.compile("#e#");
@@ -121,6 +126,7 @@
         PATTERN_ET = Pattern.compile("#ET#");
         PATTERN_EMAX = Pattern.compile("#EMAX#");
         PATTERN_EMIN = Pattern.compile("#EMIN#");
+        PATTERN_EBYTES = Pattern.compile("#EBYTES#");
         PATTERN_E_UNDERBAR = Pattern.compile("_E_");
     }
 
@@ -248,6 +254,7 @@
             String KC = K.toUpperCase();
             String KMAX = info.max_value;
             String KMIN = info.min_value;
+            String KBYTES = info.bytes;
 
             String out = content;
             out = PATTERN_k.matcher(out).replaceAll(k);
@@ -256,6 +263,7 @@
             out = PATTERN_KT.matcher(out).replaceAll(KT);
             out = PATTERN_KMAX.matcher(out).replaceAll(KMAX);
             out = PATTERN_KMIN.matcher(out).replaceAll(KMIN);
+            out = PATTERN_KBYTES.matcher(out).replaceAll(KBYTES);
 
             String out_file_name = "T" + file_name;
             out_file_name = PATTERN_K_UNDERBAR.matcher(out_file_name).replaceAll(K);
@@ -267,6 +275,7 @@
                 String VC = V.toUpperCase();
                 String VMAX = jinfo.max_value;
                 String VMIN = jinfo.min_value;
+                String VBYTES = jinfo.bytes;
 
                 String vout = out;
 
@@ -275,6 +284,7 @@
                 vout = PATTERN_VC.matcher(vout).replaceAll(VC);
                 vout = PATTERN_VT.matcher(vout).replaceAll(VT);
                 vout = PATTERN_VMAX.matcher(vout).replaceAll(VMAX);
+                vout = PATTERN_VBYTES.matcher(vout).replaceAll(VBYTES);
                 String processed_output = PATTERN_VMIN.matcher(vout).replaceAll(VMIN);
 
                 StringBuilder processed_replication_output = new StringBuilder();
@@ -304,6 +314,7 @@
             String EC = E.toUpperCase();
             String EMAX = info.max_value;
             String EMIN = info.min_value;
+            String EBYTES = info.bytes;
 
             String out = content;
             out = PATTERN_e.matcher(out).replaceAll(e);
@@ -311,6 +322,7 @@
             out = PATTERN_EC.matcher(out).replaceAll(EC);
             out = PATTERN_ET.matcher(out).replaceAll(ET);
             out = PATTERN_EMAX.matcher(out).replaceAll(EMAX);
+            out = PATTERN_EBYTES.matcher(out).replaceAll(EBYTES);
             String processed_output = PATTERN_EMIN.matcher(out).replaceAll(EMIN);
 
             String out_file_name = "T" + file_name;
@@ -347,6 +359,7 @@
                 String KC = K.toUpperCase();
                 String KMAX = info.max_value;
                 String KMIN = info.min_value;
+                String KBYTES = info.bytes;
 
                 for (int j = 0; j < WRAPPERS.length; j++) {
                     WrapperInfo jinfo = WRAPPERS[j];
@@ -357,6 +370,7 @@
                     String VC = V.toUpperCase();
                     String VMAX = jinfo.max_value;
                     String VMIN = jinfo.min_value;
+                    String VBYTES = jinfo.bytes;
 
                     String out = entry.getValue();
                     String before_e = out;
@@ -366,6 +380,7 @@
                     out = Pattern.compile("#EC#").matcher(out).replaceAll(KC);
                     out = Pattern.compile("#EMAX#").matcher(out).replaceAll(KMAX);
                     out = Pattern.compile("#EMIN#").matcher(out).replaceAll(KMIN);
+                    out = Pattern.compile("#EBYTES#").matcher(out).replaceAll(KBYTES);
                     boolean uses_e = !out.equals(before_e);
 
                     // If we use "e" (instead of "k" & "v", then we don't need the inner
@@ -378,6 +393,7 @@
                     out = Pattern.compile("#VC#").matcher(out).replaceAll(VC);
                     out = Pattern.compile("#VMAX#").matcher(out).replaceAll(VMAX);
                     out = Pattern.compile("#VMIN#").matcher(out).replaceAll(VMIN);
+                    out = Pattern.compile("#VBYTES#").matcher(out).replaceAll(VBYTES);
 
                     out = Pattern.compile("#k#").matcher(out).replaceAll(k);
                     out = Pattern.compile("#K#").matcher(out).replaceAll(K);
@@ -385,6 +401,7 @@
                     out = Pattern.compile("#KC#").matcher(out).replaceAll(KC);
                     out = Pattern.compile("#KMAX#").matcher(out).replaceAll(KMAX);
                     out = Pattern.compile("#KMIN#").matcher(out).replaceAll(KMIN);
+                    out = Pattern.compile("#KBYTES#").matcher(out).replaceAll(KBYTES);
 
                     if (first_loop) first_loop = false;
                     else {
@@ -625,14 +642,16 @@
         final String class_name;
         final String max_value;
         final String min_value;
+        final String bytes;
 
         WrapperInfo(String primitive, String class_name, String max_value,
-                    String min_value) {
+                    String min_value, String bytes) {
 
             this.primitive = primitive;
             this.class_name = class_name;
             this.max_value = class_name + "." + max_value;
             this.min_value = class_name + "." + min_value;
+            this.bytes = bytes;
         }
     }
 }
Only in old-trove-3.0.3/: generator_test
Only in trove-3.0.3/: .git
Only in old-trove-3.0.3/: idea
Only in trove-3.0.3/: ivy.xml
Only in old-trove-3.0.3/: javadocs
Only in old-trove-3.0.3/: lib
Only in trove-3.0.3/: LICENSE
Only in old-trove-3.0.3/: LICENSE.txt
diff -ur old-trove-3.0.3/README-idea-devel.txt trove-3.0.3/README-idea-devel.txt
--- old-trove-3.0.3/README-idea-devel.txt	2012-06-03 21:38:22.000000000 -0700
+++ trove-3.0.3/README-idea-devel.txt	2014-03-03 15:27:21.000000000 -0800
@@ -10,4 +10,4 @@
                       the CVS files. This should be an absoulte path.
                         Example: C:/Users/reden/Documents/Trove/working
   - TROVE_JDK_NAME  - Name of the JDK for Trove to use.
-                        Example: 1.6.0_17
\ No newline at end of file
+                        Example: 1.6.0_17
Only in trove-3.0.3/: README.md
Only in trove-3.0.3/src/gnu/trove: array
diff -ur old-trove-3.0.3/src/gnu/trove/impl/hash/TCustomObjectHash.java trove-3.0.3/src/gnu/trove/impl/hash/TCustomObjectHash.java
--- old-trove-3.0.3/src/gnu/trove/impl/hash/TCustomObjectHash.java	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/src/gnu/trove/impl/hash/TCustomObjectHash.java	2014-03-03 15:19:33.000000000 -0800
@@ -35,7 +35,6 @@
  * @author Jeff Randall
  * @version $Id: TObjectHash.java,v 1.1.2.6 2009/11/07 03:36:44 robeden Exp $
  */
-@SuppressWarnings( { "UnusedDeclaration" } )
 abstract public class TCustomObjectHash<T> extends TObjectHash<T> {
 	static final long serialVersionUID = 8766048185963756400L;
 
diff -ur old-trove-3.0.3/src/gnu/trove/impl/hash/THashIterator.java trove-3.0.3/src/gnu/trove/impl/hash/THashIterator.java
--- old-trove-3.0.3/src/gnu/trove/impl/hash/THashIterator.java	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/src/gnu/trove/impl/hash/THashIterator.java	2014-03-03 15:19:33.000000000 -0800
@@ -87,6 +87,7 @@
      * @throws NoSuchElementException if this is called on an
      *                                exhausted iterator.
      */
+    @Override
     public V next() {
         moveToNextIndex();
         return objectAtIndex( _index );
@@ -99,6 +100,7 @@
      *
      * @return a <code>boolean</code> value
      */
+    @Override
     public boolean hasNext() {
         return nextIndex() >= 0;
     }
@@ -110,6 +112,7 @@
      * will leave the underlying data structure in a confused
      * state.
      */
+    @Override
     public void remove() {
         if ( _expectedSize != _hash.size() ) {
             throw new ConcurrentModificationException();
diff -ur old-trove-3.0.3/src/gnu/trove/impl/hash/THash.java trove-3.0.3/src/gnu/trove/impl/hash/THash.java
--- old-trove-3.0.3/src/gnu/trove/impl/hash/THash.java	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/src/gnu/trove/impl/hash/THash.java	2014-03-03 15:19:33.000000000 -0800
@@ -44,7 +44,6 @@
  * @version $Id: THash.java,v 1.1.2.4 2010/03/02 00:55:34 robeden Exp $
  */
 abstract public class THash implements Externalizable {
-    @SuppressWarnings( { "UnusedDeclaration" } )
     static final long serialVersionUID = -1792948471915530295L;
 
     /** the load above which rehashing occurs. */
@@ -396,6 +395,7 @@
     }
 
 
+    @Override
     public void writeExternal( ObjectOutput out ) throws IOException {
         // VERSION
         out.writeByte( 0 );
@@ -408,6 +408,7 @@
     }
 
 
+    @Override
     public void readExternal( ObjectInput in )
             throws IOException, ClassNotFoundException {
 
@@ -426,4 +427,4 @@
             setUp( (int) Math.ceil( DEFAULT_CAPACITY / _loadFactor ) );
         }
     }
-}// THash
\ No newline at end of file
+}// THash
diff -ur old-trove-3.0.3/src/gnu/trove/impl/hash/THashPrimitiveIterator.java trove-3.0.3/src/gnu/trove/impl/hash/THashPrimitiveIterator.java
--- old-trove-3.0.3/src/gnu/trove/impl/hash/THashPrimitiveIterator.java	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/src/gnu/trove/impl/hash/THashPrimitiveIterator.java	2014-03-03 15:19:33.000000000 -0800
@@ -98,6 +98,7 @@
      *
      * @return a <code>boolean</code> value
      */
+    @Override
     public boolean hasNext() {
         return nextIndex() >= 0;
     }
@@ -109,6 +110,7 @@
      * will leave the underlying data structure in a confused
      * state.
      */
+    @Override
     public void remove() {
         if (_expectedSize != _hash.size()) {
             throw new ConcurrentModificationException();
@@ -140,4 +142,4 @@
     }
 
 
-} // TPrimitiveIterator
\ No newline at end of file
+} // TPrimitiveIterator
Only in trove-3.0.3/src/gnu/trove/impl/hash: THashPrimitiveOffheapIterator.java
diff -ur old-trove-3.0.3/src/gnu/trove/impl/hash/TObjectHash.java trove-3.0.3/src/gnu/trove/impl/hash/TObjectHash.java
--- old-trove-3.0.3/src/gnu/trove/impl/hash/TObjectHash.java	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/src/gnu/trove/impl/hash/TObjectHash.java	2014-03-03 15:19:33.000000000 -0800
@@ -42,7 +42,6 @@
  */
 abstract public class TObjectHash<T> extends THash {
 
-    @SuppressWarnings({"UnusedDeclaration"})
     static final long serialVersionUID = -3461112548087185871L;
 
 
@@ -94,11 +93,13 @@
     }
 
 
+    @Override
     public int capacity() {
         return _set.length;
     }
 
 
+    @Override
     protected void removeAt(int index) {
         _set[index] = REMOVED;
         super.removeAt(index);
@@ -111,6 +112,7 @@
      * @param initialCapacity an <code>int</code> value
      * @return an <code>int</code> value
      */
+    @Override
     public int setUp(int initialCapacity) {
         int capacity;
 
@@ -148,7 +150,6 @@
      * @param obj an <code>Object</code> value
      * @return a <code>boolean</code> value
      */
-    @SuppressWarnings({"unchecked"})
     public boolean contains(Object obj) {
         return index(obj) >= 0;
     }
diff -ur old-trove-3.0.3/src/gnu/trove/impl/hash/TPrimitiveHash.java trove-3.0.3/src/gnu/trove/impl/hash/TPrimitiveHash.java
--- old-trove-3.0.3/src/gnu/trove/impl/hash/TPrimitiveHash.java	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/src/gnu/trove/impl/hash/TPrimitiveHash.java	2014-03-03 15:19:33.000000000 -0800
@@ -104,6 +104,7 @@
      *
      * @return the physical capacity of the hash table.
      */
+    @Override
     public int capacity() {
         return _states.length;
     }
@@ -114,6 +115,7 @@
      *
      * @param index an <code>int</code> value
      */
+    @Override
     protected void removeAt( int index ) {
         _states[index] = REMOVED;
         super.removeAt( index );
@@ -127,6 +129,7 @@
      * @param initialCapacity an <code>int</code> value
      * @return the actual capacity chosen
      */
+    @Override
     protected int setUp( int initialCapacity ) {
         int capacity;
 
@@ -134,4 +137,4 @@
         _states = new byte[capacity];
         return capacity;
     }
-} // TPrimitiveHash
\ No newline at end of file
+} // TPrimitiveHash
Only in trove-3.0.3/src/gnu/trove/impl/hash: TPrimitiveOffheapHash.java
diff -ur old-trove-3.0.3/src/gnu/trove/impl/package.html trove-3.0.3/src/gnu/trove/impl/package.html
--- old-trove-3.0.3/src/gnu/trove/impl/package.html	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/src/gnu/trove/impl/package.html	2014-03-03 15:19:33.000000000 -0800
@@ -21,4 +21,4 @@
 This package (and its sub-packages) contain internal implementations used in Trove. These
 classes should <strong>not</strong> be accessed directly (treat them like <tt>com.sun</tt>
 classes.
-</html>
\ No newline at end of file
+</html>
diff -ur old-trove-3.0.3/src/gnu/trove/impl/sync/SynchronizedCollection.java trove-3.0.3/src/gnu/trove/impl/sync/SynchronizedCollection.java
--- old-trove-3.0.3/src/gnu/trove/impl/sync/SynchronizedCollection.java	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/src/gnu/trove/impl/sync/SynchronizedCollection.java	2014-03-03 15:19:33.000000000 -0800
@@ -39,53 +39,66 @@
 		this.mutex = mutex;
 	}
 
+    @Override
 	public int size() {
 		synchronized( mutex ) { return c.size(); }
 	}
+    @Override
 	public boolean isEmpty() {
 		synchronized( mutex ) { return c.isEmpty(); }
 	}
+    @Override
 	public boolean contains( Object o ) {
 		synchronized( mutex ) { return c.contains( o ); }
 	}
+    @Override
 	public Object[] toArray() {
 		synchronized( mutex ) { return c.toArray(); }
 	}
-	@SuppressWarnings({"SuspiciousToArrayCall"})
+    @Override
 	public <T> T[] toArray( T[] a ) {
 		synchronized( mutex ) { return c.toArray( a ); }
 	}
 
+    @Override
 	public Iterator<E> iterator() {
 		return c.iterator(); // Must be manually synched by user!
 	}
 
+    @Override
 	public boolean add( E e ) {
 		synchronized( mutex ) { return c.add( e ); }
 	}
+    @Override
 	public boolean remove( Object o ) {
 		synchronized( mutex ) { return c.remove( o ); }
 	}
 
+    @Override
 	public boolean containsAll( Collection<?> coll ) {
 		synchronized( mutex ) { return c.containsAll( coll ); }
 	}
+    @Override
 	public boolean addAll( Collection<? extends E> coll ) {
 		synchronized( mutex ) { return c.addAll( coll ); }
 	}
+    @Override
 	public boolean removeAll( Collection<?> coll ) {
 		synchronized( mutex ) { return c.removeAll( coll ); }
 	}
+    @Override
 	public boolean retainAll( Collection<?> coll ) {
 		synchronized( mutex ) { return c.retainAll( coll ); }
 	}
+    @Override
 	public void clear() {
 		synchronized( mutex ) { c.clear(); }
 	}
+    @Override
 	public String toString() {
 		synchronized( mutex ) { return c.toString(); }
 	}
 	private void writeObject( ObjectOutputStream s ) throws IOException {
 		synchronized( mutex ) { s.defaultWriteObject(); }
 	}
-}
\ No newline at end of file
+}
diff -ur old-trove-3.0.3/src/gnu/trove/impl/sync/SynchronizedSet.java trove-3.0.3/src/gnu/trove/impl/sync/SynchronizedSet.java
--- old-trove-3.0.3/src/gnu/trove/impl/sync/SynchronizedSet.java	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/src/gnu/trove/impl/sync/SynchronizedSet.java	2014-03-03 15:19:33.000000000 -0800
@@ -26,6 +26,8 @@
 	private static final long serialVersionUID = 487447009682186044L;
 
 	SynchronizedSet( Set<E> s, Object mutex ) { super( s, mutex ); }
+    @Override
 	public boolean equals( Object o ) { synchronized( mutex ) { return c.equals( o ); } }
+    @Override
 	public int hashCode() { synchronized( mutex ) { return c.hashCode(); } }
-}
\ No newline at end of file
+}
diff -ur old-trove-3.0.3/src/gnu/trove/iterator/hash/TObjectHashIterator.java trove-3.0.3/src/gnu/trove/iterator/hash/TObjectHashIterator.java
--- old-trove-3.0.3/src/gnu/trove/iterator/hash/TObjectHashIterator.java	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/src/gnu/trove/iterator/hash/TObjectHashIterator.java	2014-03-03 15:19:33.000000000 -0800
@@ -36,7 +36,7 @@
 
 public class TObjectHashIterator<E> extends THashIterator<E> {
 
-    protected final TObjectHash _objectHash;
+    protected final TObjectHash<E> _objectHash;
 
 
     public TObjectHashIterator( TObjectHash<E> hash ) {
@@ -45,6 +45,7 @@
     }
 
 
+    @Override
     @SuppressWarnings("unchecked")
     protected E objectAtIndex( int index ) {
         Object obj = _objectHash._set[index];
diff -ur old-trove-3.0.3/src/gnu/trove/iterator/TPrimitiveIterator.java trove-3.0.3/src/gnu/trove/iterator/TPrimitiveIterator.java
--- old-trove-3.0.3/src/gnu/trove/iterator/TPrimitiveIterator.java	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/src/gnu/trove/iterator/TPrimitiveIterator.java	2014-03-03 15:19:33.000000000 -0800
@@ -47,6 +47,7 @@
      *
      * @return a <code>boolean</code> value
      */
+    @Override
     public boolean hasNext();
 
 
@@ -56,6 +57,7 @@
      * will leave the underlying data structure in a confused
      * state.
      */
+    @Override
     public void remove();
 
 } // TPrimitiveIterator
diff -ur old-trove-3.0.3/src/gnu/trove/list/linked/TLinkedList.java trove-3.0.3/src/gnu/trove/list/linked/TLinkedList.java
--- old-trove-3.0.3/src/gnu/trove/list/linked/TLinkedList.java	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/src/gnu/trove/list/linked/TLinkedList.java	2014-03-03 15:19:33.000000000 -0800
@@ -96,6 +96,7 @@
      * @param index an <code>int</code> value
      * @return a <code>ListIterator</code> value
      */
+    @Override
     public ListIterator<T> listIterator( int index ) {
         return new IteratorImpl( index );
     }
@@ -106,6 +107,7 @@
      *
      * @return an <code>int</code> value
      */
+    @Override
     public int size() {
         return _size;
     }
@@ -119,6 +121,7 @@
      * @param index    an <code>int</code> value
      * @param linkable an object of type TLinkable
      */
+    @Override
     public void add( int index, T linkable ) {
         if ( index < 0 || index > size() ) {
             throw new IndexOutOfBoundsException( "index:" + index );
@@ -133,6 +136,7 @@
      * @param linkable an object of type TLinkable
      * @return always true
      */
+    @Override
     public boolean add( T linkable ) {
         insert( _size, linkable );
         return true;
@@ -160,6 +164,7 @@
 
 
     /** Empties the list. */
+    @Override
     public void clear() {
         if ( null != _head ) {
             for ( TLinkable<T> link = _head.getNext();
@@ -186,10 +191,11 @@
      *
      * @return an <code>Object[]</code> value
      */
+    @Override
     public Object[] toArray() {
         Object[] o = new Object[_size];
         int i = 0;
-        for ( TLinkable link = _head; link != null; link = link.getNext() ) {
+        for ( TLinkable<T> link = _head; link != null; link = link.getNext() ) {
             o[i++] = link;
         }
         return o;
@@ -255,6 +261,7 @@
      * @param o an <code>Object</code> value
      * @return a <code>boolean</code> value
      */
+    @Override
     public boolean contains( Object o ) {
         for ( TLinkable<T> link = _head; link != null; link = link.getNext() ) {
             if ( o.equals( link ) ) {
@@ -267,7 +274,6 @@
 
     /** {@inheritDoc} */
     @Override
-    @SuppressWarnings({"unchecked"})
     public T get( int index ) {
         // Blow out for bogus values
         if ( index < 0 || index >= _size ) {
@@ -334,7 +340,6 @@
      * @param current The current node
      * @return the node after the current node
      */
-    @SuppressWarnings({"unchecked"})
     public T getNext( T current ) {
         return current.getNext();
     }
@@ -355,7 +360,6 @@
      * @param current The current node
      * @return the node after the current node
      */
-    @SuppressWarnings({"unchecked"})
     public T getPrevious( T current ) {
         return current.getPrevious();
     }
@@ -366,7 +370,6 @@
      *
      * @return an <code>Object</code> value
      */
-    @SuppressWarnings({"unchecked"})
     public T removeFirst() {
         T o = _head;
 
@@ -394,7 +397,6 @@
      *
      * @return an <code>Object</code> value
      */
-    @SuppressWarnings({"unchecked"})
     public T removeLast() {
         T o = _tail;
 
@@ -422,7 +424,6 @@
      * @param index    an <code>int</code> value
      * @param linkable an object of type TLinkable
      */
-    @SuppressWarnings({"unchecked"})
     protected void insert( int index, T linkable ) {
 
         if ( _size == 0 ) {
@@ -460,7 +461,8 @@
      * @param o a TLinkable element already inserted in this list.
      * @return true if the element was a TLinkable and removed
      */
-    @SuppressWarnings({"unchecked"})
+    @Override
+    @SuppressWarnings("unchecked")
     public boolean remove( Object o ) {
         if ( o instanceof TLinkable ) {
             T p, n;
@@ -560,7 +562,6 @@
      * @return false if the loop over the values terminated because
      *         the procedure returned false for some value.
      */
-    @SuppressWarnings({"unchecked"})
     public boolean forEachValue( TObjectProcedure<T> procedure ) {
         T node = _head;
         while ( node != null ) {
@@ -576,6 +577,7 @@
     }
 
 
+    @Override
     public void writeExternal( ObjectOutput out ) throws IOException {
         // VERSION
         out.writeByte( 0 );
@@ -591,6 +593,7 @@
     }
 
 
+    @Override
     @SuppressWarnings({"unchecked"})
     public void readExternal( ObjectInput in )
             throws IOException, ClassNotFoundException {
@@ -623,7 +626,6 @@
          *
          * @param position an <code>int</code> value
          */
-        @SuppressWarnings({"unchecked"})
         IteratorImpl( int position ) {
             if ( position < 0 || position > _size ) {
                 throw new IndexOutOfBoundsException();
@@ -654,6 +656,7 @@
          *
          * @param linkable an object of type TLinkable
          */
+        @Override
         public final void add( T linkable ) {
             _lastReturned = null;
             _nextIndex++;
@@ -671,6 +674,7 @@
          *
          * @return a <code>boolean</code> value
          */
+        @Override
         public final boolean hasNext() {
             return _nextIndex != _size;
         }
@@ -681,6 +685,7 @@
          *
          * @return a <code>boolean</code> value
          */
+        @Override
         public final boolean hasPrevious() {
             return _nextIndex != 0;
         }
@@ -693,7 +698,7 @@
          * @return an <code>Object</code> value
          * @throws NoSuchElementException if there is no next element
          */
-        @SuppressWarnings({"unchecked"})
+        @Override
         public final T next() {
             if ( _nextIndex == _size ) {
                 throw new NoSuchElementException();
@@ -712,6 +717,7 @@
          *
          * @return an <code>int</code> value
          */
+        @Override
         public final int nextIndex() {
             return _nextIndex;
         }
@@ -724,7 +730,7 @@
          * @return an <code>Object</code> value
          * @throws NoSuchElementException if there is no previous element.
          */
-        @SuppressWarnings({"unchecked"})
+        @Override
         public final T previous() {
             if ( _nextIndex == 0 ) {
                 throw new NoSuchElementException();
@@ -746,6 +752,7 @@
          *
          * @return an <code>int</code> value
          */
+        @Override
         public final int previousIndex() {
             return _nextIndex - 1;
         }
@@ -759,7 +766,7 @@
          *                               have been invoked, or remove or add have been invoked after
          *                               the last invocation of next or previous.
          */
-        @SuppressWarnings({"unchecked"})
+        @Override
         public final void remove() {
             if ( _lastReturned == null ) {
                 throw new IllegalStateException( "must invoke next or previous before invoking remove" );
@@ -780,6 +787,7 @@
          *
          * @param linkable an object of type TLinkable
          */
+        @Override
         public final void set( T linkable ) {
             if ( _lastReturned == null ) {
                 throw new IllegalStateException();
diff -ur old-trove-3.0.3/src/gnu/trove/map/hash/TCustomHashMap.java trove-3.0.3/src/gnu/trove/map/hash/TCustomHashMap.java
--- old-trove-3.0.3/src/gnu/trove/map/hash/TCustomHashMap.java	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/src/gnu/trove/map/hash/TCustomHashMap.java	2014-03-03 15:19:33.000000000 -0800
@@ -125,6 +125,8 @@
      * @param initialCapacity an <code>int</code> value
      * @return an <code>int</code> value
      */
+    @Override
+    @SuppressWarnings("unchecked")
     public int setUp( int initialCapacity ) {
         int capacity;
 
@@ -143,6 +145,7 @@
      * @return the previous value associated with <tt>key</tt>,
      *         or {@code null} if none was found.
      */
+    @Override
     public V put( K key, V value ) {
         int index = insertKey( key );
         return doPut( value, index );
@@ -158,6 +161,7 @@
      * @return the previous value associated with <tt>key</tt>,
      *         or {@code null} if none was found.
      */
+    @Override
     public V putIfAbsent( K key, V value ) {
         int index = insertKey( key );
         if ( index < 0 ) {
@@ -193,7 +197,8 @@
      * @param other an <code>Object</code> value
      * @return a <code>boolean</code> value
      */
-    @SuppressWarnings({"unchecked", "SimplifiableIfStatement"})
+    @SuppressWarnings("unchecked")
+    @Override
     public boolean equals( Object other ) {
         if ( !( other instanceof Map ) ) {
             return false;
@@ -206,6 +211,7 @@
     }
 
 
+    @Override
     public int hashCode() {
         HashProcedure p = new HashProcedure();
         forEachEntry( p );
@@ -213,12 +219,14 @@
     }
 
 
+    @Override
     public String toString() {
         final StringBuilder buf = new StringBuilder( "{" );
         forEachEntry( new TObjectObjectProcedure<K, V>() {
             private boolean first = true;
 
 
+            @Override
             public boolean execute( K key, V value ) {
                 if ( first ) {
                     first = false;
@@ -244,6 +252,7 @@
             return h;
         }
 
+        @Override
         public final boolean execute( K key, V value ) {
             h += HashFunctions.hash( key ) ^ ( value == null ? 0 : value.hashCode() );
             return true;
@@ -259,6 +268,7 @@
         }
 
 
+        @Override
         public final boolean execute( K key, V value ) {
             // Check to make sure the key is there. This avoids problems that come up with
             // null values. Since it is only caused in that cause, only do this when the
@@ -280,6 +290,7 @@
      * @return false if the loop over the keys terminated because
      *         the procedure returned false for some key.
      */
+    @Override
     public boolean forEachKey( TObjectProcedure<? super K> procedure ) {
         return forEach( procedure );
     }
@@ -292,6 +303,7 @@
      * @return false if the loop over the values terminated because
      *         the procedure returned false for some value.
      */
+    @Override
     public boolean forEachValue( TObjectProcedure<? super V> procedure ) {
         V[] values = _values;
         Object[] set = _set;
@@ -315,6 +327,7 @@
      *         the procedure returned false for some entry.
      */
     @SuppressWarnings({"unchecked"})
+    @Override
     public boolean forEachEntry( TObjectObjectProcedure<? super K, ? super V> procedure ) {
         Object[] keys = _set;
         V[] values = _values;
@@ -337,6 +350,7 @@
      * @return true if the map was modified.
      */
     @SuppressWarnings({"unchecked"})
+    @Override
     public boolean retainEntries( TObjectObjectProcedure<? super K, ? super V> procedure ) {
         boolean modified = false;
         Object[] keys = _set;
@@ -367,6 +381,7 @@
      *
      * @param function a <code>TObjectFunction</code> value
      */
+    @Override
     public void transformValues( TObjectFunction<V, V> function ) {
         V[] values = _values;
         Object[] set = _set;
@@ -384,6 +399,7 @@
      * @param newCapacity an <code>int</code> value
      */
     @SuppressWarnings({"unchecked"})
+    @Override
     protected void rehash( int newCapacity ) {
         int oldCapacity = _set.length;
         int oldSize = size();
@@ -416,6 +432,7 @@
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
     @SuppressWarnings({"unchecked"})
+    @Override
     public V get( Object key ) {
         int index = index( key );
         if ( index < 0 || ! strategy.equals( ( K ) _set[index], ( K ) key  ) ) {
@@ -426,6 +443,7 @@
 
 
     /** Empties the map. */
+    @Override
     public void clear() {
         if ( size() == 0 ) {
             return; // optimization
@@ -444,7 +462,7 @@
      * @param key an <code>Object</code> value
      * @return an <code>Object</code> value
      */
-    @SuppressWarnings({"unchecked"})
+    @Override
     public V remove( Object key ) {
         V prev = null;
         int index = index( key );
@@ -461,6 +479,7 @@
      *
      * @param index an <code>int</code> value
      */
+    @Override
     public void removeAt( int index ) {
         _values[index] = null;
         super.removeAt( index );  // clear key, state; adjust size
@@ -472,6 +491,7 @@
      *
      * @return a <code>Collection</code> value
      */
+    @Override
     public Collection<V> values() {
         return new ValueView();
     }
@@ -482,6 +502,7 @@
      *
      * @return a <code>Set</code> value
      */
+    @Override
     public Set<K> keySet() {
         return new KeyView();
     }
@@ -492,6 +513,7 @@
      *
      * @return a <code>Set</code> value
      */
+    @Override
     public Set<Map.Entry<K, V>> entrySet() {
         return new EntryView();
     }
@@ -503,6 +525,8 @@
      * @param val an <code>Object</code> value
      * @return a <code>boolean</code> value
      */
+    @Override
+    @SuppressWarnings("unchecked")
     public boolean containsValue( Object val ) {
         Object[] set = _set;
         V[] vals = _values;
@@ -534,6 +558,7 @@
      * @param key an <code>Object</code> value
      * @return a <code>boolean</code> value
      */
+    @Override
     public boolean containsKey( Object key ) {
         return contains( key );
     }
@@ -544,6 +569,7 @@
      *
      * @param map a <code>Map</code> value
      */
+    @Override
     public void putAll( Map<? extends K, ? extends V> map ) {
         ensureCapacity( map.size() );
         // could optimize this for cases when map instanceof TCustomHashMap
@@ -556,9 +582,11 @@
     /** a view onto the values of the map. */
     protected class ValueView extends MapBackedView<V> {
 
-        @SuppressWarnings({"unchecked"})
+        @SuppressWarnings({"unchecked", "rawtypes"})
+        @Override
         public Iterator<V> iterator() {
             return new TObjectHashIterator( TCustomHashMap.this ) {
+                @Override
                 protected V objectAtIndex( int index ) {
                     return _values[index];
                 }
@@ -566,11 +594,14 @@
         }
 
 
+        @Override
         public boolean containsElement( V value ) {
             return containsValue( value );
         }
 
 
+        @Override
+        @SuppressWarnings({"unchecked"})
         public boolean removeElement( V value ) {
             Object[] values = _values;
             Object[] set = _set;
@@ -592,14 +623,17 @@
     /** a view onto the entries of the map. */
     protected class EntryView extends MapBackedView<Map.Entry<K, V>> {
 
+        @SuppressWarnings({"rawtypes"})
         private final class EntryIterator extends TObjectHashIterator {
 
+            @SuppressWarnings({"unchecked"})
             EntryIterator( TCustomHashMap<K, V> map ) {
                 super( map );
             }
 
 
             @SuppressWarnings({"unchecked"})
+            @Override
             public Entry objectAtIndex( final int index ) {
                 return new Entry( (K) _set[index], _values[index], index );
             }
@@ -607,11 +641,14 @@
 
 
         @SuppressWarnings({"unchecked"})
+        @Override
         public Iterator<Map.Entry<K, V>> iterator() {
             return new EntryIterator( TCustomHashMap.this );
         }
 
 
+        @Override
+        @SuppressWarnings({"unchecked"})
         public boolean removeElement( Map.Entry<K, V> entry ) {
             // have to effectively reimplement Map.remove here
             // because we need to return true/false depending on
@@ -639,6 +676,8 @@
         }
 
 
+        @Override
+        @SuppressWarnings({"unchecked"})
         public boolean containsElement( Map.Entry<K, V> entry ) {
             Object val = get( keyForEntry( entry ) );
             Object entryValue = entry.getValue();
@@ -660,6 +699,7 @@
     private abstract class MapBackedView<E> extends AbstractSet<E>
             implements Set<E>, Iterable<E> {
 
+        @Override
         public abstract Iterator<E> iterator();
 
 
@@ -670,12 +710,14 @@
 
 
         @SuppressWarnings({"unchecked"})
+        @Override
         public boolean contains( Object key ) {
             return containsElement( (E) key );
         }
 
 
         @SuppressWarnings({"unchecked"})
+        @Override
         public boolean remove( Object o ) {
             return removeElement( (E) o );
         }
@@ -691,21 +733,25 @@
 //        }
 
 
+        @Override
         public void clear() {
             TCustomHashMap.this.clear();
         }
 
 
+        @Override
         public boolean add( E obj ) {
             throw new UnsupportedOperationException();
         }
 
 
+        @Override
         public int size() {
             return TCustomHashMap.this.size();
         }
 
 
+        @Override
         public Object[] toArray() {
             Object[] result = new Object[size()];
             Iterator<E> e = iterator();
@@ -717,6 +763,7 @@
 
 
         @SuppressWarnings({"unchecked"})
+        @Override
         public <T> T[] toArray( T[] a ) {
             int size = size();
             if ( a.length < size ) {
@@ -737,17 +784,19 @@
         }
 
 
+        @Override
         public boolean isEmpty() {
             return TCustomHashMap.this.isEmpty();
         }
 
 
+        @Override
         public boolean addAll( Collection<? extends E> collection ) {
             throw new UnsupportedOperationException();
         }
 
 
-        @SuppressWarnings({"SuspiciousMethodCalls"})
+        @Override
         public boolean retainAll( Collection<?> collection ) {
             boolean changed = false;
             Iterator<E> i = iterator();
@@ -760,6 +809,7 @@
             return changed;
         }
 
+        @Override
 		public String toString() {
 			Iterator<E> i = iterator();
 			if ( !i.hasNext() ) return "{}";
@@ -778,17 +828,20 @@
     /** a view onto the keys of the map. */
     protected class KeyView extends MapBackedView<K> {
 
-        @SuppressWarnings({"unchecked"})
+        @SuppressWarnings({"unchecked", "rawtypes"})
+        @Override
         public Iterator<K> iterator() {
             return new TObjectHashIterator( TCustomHashMap.this );
         }
 
 
+        @Override
         public boolean removeElement( K key ) {
             return null != TCustomHashMap.this.remove( key );
         }
 
 
+        @Override
         public boolean containsElement( K key ) {
             return TCustomHashMap.this.contains( key );
         }
@@ -808,16 +861,19 @@
         }
 
 
+        @Override
         public K getKey() {
             return key;
         }
 
 
+        @Override
         public V getValue() {
             return val;
         }
 
 
+        @Override
         public V setValue( V o ) {
             if ( _values[index] != val ) {
                 throw new ConcurrentModificationException();
@@ -831,6 +887,8 @@
         }
 
 
+        @SuppressWarnings({ "unchecked", "rawtypes" })
+        @Override
         public boolean equals( Object o ) {
             if ( o instanceof Map.Entry ) {
                 Map.Entry<K, V> e1 = this;
@@ -844,6 +902,7 @@
         }
 
 
+        @Override
         public int hashCode() {
             return ( getKey() == null ? 0 : getKey().hashCode() ) ^ ( getValue() == null ? 0 : getValue().hashCode() );
         }
@@ -856,6 +915,7 @@
     }
 
 
+    @Override
     public void writeExternal( ObjectOutput out ) throws IOException {
         // VERSION
         out.writeByte( 1 );
@@ -876,6 +936,8 @@
     }
 
 
+    @Override
+    @SuppressWarnings("unchecked")
     public void readExternal( ObjectInput in )
             throws IOException, ClassNotFoundException {
 
diff -ur old-trove-3.0.3/src/gnu/trove/map/hash/THashMap.java trove-3.0.3/src/gnu/trove/map/hash/THashMap.java
--- old-trove-3.0.3/src/gnu/trove/map/hash/THashMap.java	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/src/gnu/trove/map/hash/THashMap.java	2014-03-03 15:19:33.000000000 -0800
@@ -121,6 +121,8 @@
      * @param initialCapacity an <code>int</code> value
      * @return an <code>int</code> value
      */
+    @Override
+    @SuppressWarnings({"unchecked"})
     public int setUp(int initialCapacity) {
         int capacity;
 
@@ -139,6 +141,7 @@
      * @return the previous value associated with <tt>key</tt>,
      *         or {@code null} if none was found.
      */
+    @Override
     public V put(K key, V value) {
         // insertKey() inserts the key if a slot if found and returns the index
         int index = insertKey(key);
@@ -155,6 +158,7 @@
      * @return the previous value associated with <tt>key</tt>,
      *         or {@code null} if none was found.
      */
+    @Override
     public V putIfAbsent(K key, V value) {
         // insertKey() inserts the key if a slot if found and returns the index
         int index = insertKey(key);
@@ -189,7 +193,8 @@
      * @param other an <code>Object</code> value
      * @return a <code>boolean</code> value
      */
-    @SuppressWarnings({"unchecked", "SimplifiableIfStatement"})
+    @Override
+    @SuppressWarnings({"unchecked"})
     public boolean equals(Object other) {
         if (!(other instanceof Map)) {
             return false;
@@ -198,10 +203,11 @@
         if (that.size() != this.size()) {
             return false;
         }
-        return forEachEntry(new EqProcedure<K, V>(that));
+        return forEachEntry(new EqProcedure(that));
     }
 
 
+    @Override
     public int hashCode() {
         HashProcedure p = new HashProcedure();
         forEachEntry(p);
@@ -209,12 +215,14 @@
     }
 
 
+    @Override
     public String toString() {
         final StringBuilder buf = new StringBuilder("{");
         forEachEntry(new TObjectObjectProcedure<K, V>() {
             private boolean first = true;
 
 
+            @Override
             public boolean execute(K key, V value) {
                 if (first) {
                     first = false;
@@ -240,6 +248,7 @@
             return h;
         }
 
+        @Override
         public final boolean execute(K key, V value) {
             h += HashFunctions.hash(key) ^ (value == null ? 0 : value.hashCode());
             return true;
@@ -247,7 +256,7 @@
     }
 
 
-    private final class EqProcedure<K, V> implements TObjectObjectProcedure<K, V> {
+    private final class EqProcedure implements TObjectObjectProcedure<K, V> {
         private final Map<K, V> _otherMap;
 
         EqProcedure(Map<K, V> otherMap) {
@@ -255,6 +264,7 @@
         }
 
 
+        @Override
         public final boolean execute(K key, V value) {
             // Check to make sure the key is there. This avoids problems that come up with
             // null values. Since it is only caused in that cause, only do this when the
@@ -277,6 +287,7 @@
      * @return false if the loop over the keys terminated because
      *         the procedure returned false for some key.
      */
+    @Override
     public boolean forEachKey(TObjectProcedure<? super K> procedure) {
         return forEach(procedure);
     }
@@ -289,6 +300,7 @@
      * @return false if the loop over the values terminated because
      *         the procedure returned false for some value.
      */
+    @Override
     public boolean forEachValue(TObjectProcedure<? super V> procedure) {
         V[] values = _values;
         Object[] set = _set;
@@ -311,6 +323,7 @@
      * @return false if the loop over the entries terminated because
      *         the procedure returned false for some entry.
      */
+    @Override
     @SuppressWarnings({"unchecked"})
     public boolean forEachEntry(TObjectObjectProcedure<? super K, ? super V> procedure) {
         Object[] keys = _set;
@@ -333,6 +346,7 @@
      * @param procedure determines which entries to keep
      * @return true if the map was modified.
      */
+    @Override
     @SuppressWarnings({"unchecked"})
     public boolean retainEntries(TObjectObjectProcedure<? super K, ? super V> procedure) {
         boolean modified = false;
@@ -363,6 +377,7 @@
      *
      * @param function a <code>TObjectFunction</code> value
      */
+    @Override
     public void transformValues(TObjectFunction<V, V> function) {
         V[] values = _values;
         Object[] set = _set;
@@ -379,6 +394,7 @@
      *
      * @param newCapacity an <code>int</code> value
      */
+    @Override
     @SuppressWarnings({"unchecked"})
     protected void rehash(int newCapacity) {
         int oldCapacity = _set.length;
@@ -392,7 +408,6 @@
 
         // Process entries from the old array, skipping free and removed slots. Put the
         // values into the appropriate place in the new array.
-        int count = 0;
         for (int i = oldCapacity; i-- > 0;) {
             Object o = oldKeys[i];
 
@@ -403,8 +418,6 @@
                 throwObjectContractViolation(_set[(-index - 1)], o, size(), oldSize, oldKeys);
             }
             _values[index] = oldVals[i];
-            //
-            count++;
         }
 
         // Last check: size before and after should be the same
@@ -418,7 +431,7 @@
      * @param key an <code>Object</code> value
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
-    @SuppressWarnings({"unchecked"})
+    @Override
     public V get(Object key) {
         int index = index(key);
         return index < 0 ? null : _values[index];
@@ -428,6 +441,7 @@
     /**
      * Empties the map.
      */
+    @Override
     public void clear() {
         if (size() == 0) {
             return; // optimization
@@ -446,7 +460,7 @@
      * @param key an <code>Object</code> value
      * @return an <code>Object</code> value
      */
-    @SuppressWarnings({"unchecked"})
+    @Override
     public V remove(Object key) {
         V prev = null;
         int index = index(key);
@@ -463,6 +477,7 @@
      *
      * @param index an <code>int</code> value
      */
+    @Override
     public void removeAt(int index) {
         _values[index] = null;
         super.removeAt(index);  // clear key, state; adjust size
@@ -474,6 +489,7 @@
      *
      * @return a <code>Collection</code> value
      */
+    @Override
     public Collection<V> values() {
         return new ValueView();
     }
@@ -484,6 +500,7 @@
      *
      * @return a <code>Set</code> value
      */
+    @Override
     public Set<K> keySet() {
         return new KeyView();
     }
@@ -494,6 +511,7 @@
      *
      * @return a <code>Set</code> value
      */
+    @Override
     public Set<Map.Entry<K, V>> entrySet() {
         return new EntryView();
     }
@@ -505,6 +523,7 @@
      * @param val an <code>Object</code> value
      * @return a <code>boolean</code> value
      */
+    @Override
     public boolean containsValue(Object val) {
         Object[] set = _set;
         V[] vals = _values;
@@ -536,6 +555,7 @@
      * @param key an <code>Object</code> value
      * @return a <code>boolean</code> value
      */
+    @Override
     public boolean containsKey(Object key) {
         //noinspection unchecked
         return contains(key);
@@ -547,6 +567,7 @@
      *
      * @param map a <code>Map</code> value
      */
+    @Override
     public void putAll(Map<? extends K, ? extends V> map) {
         ensureCapacity(map.size());
         // could optimize this for cases when map instanceof THashMap
@@ -561,9 +582,11 @@
      */
     protected class ValueView extends MapBackedView<V> {
 
-        @SuppressWarnings({"unchecked"})
+        @Override
+        @SuppressWarnings({"unchecked", "rawtypes"})
         public Iterator<V> iterator() {
             return new TObjectHashIterator(THashMap.this) {
+                @Override
                 protected V objectAtIndex(int index) {
                     return _values[index];
                 }
@@ -571,11 +594,13 @@
         }
 
 
+        @Override
         public boolean containsElement(V value) {
             return containsValue(value);
         }
 
 
+        @Override
         public boolean removeElement(V value) {
             Object[] values = _values;
             Object[] set = _set;
@@ -599,13 +624,16 @@
      */
     protected class EntryView extends MapBackedView<Map.Entry<K, V>> {
 
+        @SuppressWarnings("rawtypes")
         private final class EntryIterator extends TObjectHashIterator {
 
+            @SuppressWarnings("unchecked")
             EntryIterator(THashMap<K, V> map) {
                 super(map);
             }
 
 
+            @Override
             @SuppressWarnings({"unchecked"})
             public Entry objectAtIndex(final int index) {
                 return new Entry((K) _set[index], _values[index], index);
@@ -613,12 +641,14 @@
         }
 
 
+        @Override
         @SuppressWarnings({"unchecked"})
         public Iterator<Map.Entry<K, V>> iterator() {
             return new EntryIterator(THashMap.this);
         }
 
 
+        @Override
         public boolean removeElement(Map.Entry<K, V> entry) {
             if (entry == null) return false;
 
@@ -648,6 +678,7 @@
         }
 
 
+        @Override
         public boolean containsElement(Map.Entry<K, V> entry) {
             V val = get(keyForEntry(entry));
             V entryValue = entry.getValue();
@@ -669,6 +700,7 @@
     private abstract class MapBackedView<E> extends AbstractSet<E>
             implements Set<E>, Iterable<E> {
 
+        @Override
         public abstract Iterator<E> iterator();
 
 
@@ -678,12 +710,14 @@
         public abstract boolean containsElement(E key);
 
 
+        @Override
         @SuppressWarnings({"unchecked"})
         public boolean contains(Object key) {
             return containsElement((E) key);
         }
 
 
+        @Override
         @SuppressWarnings({"unchecked"})
         public boolean remove(Object o) {
             try {
@@ -704,21 +738,25 @@
 //        }
 
 
+        @Override
         public void clear() {
             THashMap.this.clear();
         }
 
 
+        @Override
         public boolean add(E obj) {
             throw new UnsupportedOperationException();
         }
 
 
+        @Override
         public int size() {
             return THashMap.this.size();
         }
 
 
+        @Override
         public Object[] toArray() {
             Object[] result = new Object[size()];
             Iterator<E> e = iterator();
@@ -729,6 +767,7 @@
         }
 
 
+        @Override
         @SuppressWarnings({"unchecked"})
         public <T> T[] toArray(T[] a) {
             int size = size();
@@ -750,17 +789,19 @@
         }
 
 
+        @Override
         public boolean isEmpty() {
             return THashMap.this.isEmpty();
         }
 
 
+        @Override
         public boolean addAll(Collection<? extends E> collection) {
             throw new UnsupportedOperationException();
         }
 
 
-        @SuppressWarnings({"SuspiciousMethodCalls"})
+        @Override
         public boolean retainAll(Collection<?> collection) {
             boolean changed = false;
             Iterator<E> i = iterator();
@@ -773,6 +814,7 @@
             return changed;
         }
 
+        @Override
         public String toString() {
             Iterator<E> i = iterator();
             if (!i.hasNext()) return "{}";
@@ -793,17 +835,19 @@
      */
     protected class KeyView extends MapBackedView<K> {
 
-        @SuppressWarnings({"unchecked"})
+        @Override
         public Iterator<K> iterator() {
             return new TObjectHashIterator<K>(THashMap.this);
         }
 
 
+        @Override
         public boolean removeElement(K key) {
             return null != THashMap.this.remove(key);
         }
 
 
+        @Override
         public boolean containsElement(K key) {
             return THashMap.this.contains(key);
         }
@@ -823,16 +867,19 @@
         }
 
 
+        @Override
         public K getKey() {
             return key;
         }
 
 
+        @Override
         public V getValue() {
             return val;
         }
 
 
+        @Override
         public V setValue(V o) {
             if (_values[index] != val) {
                 throw new ConcurrentModificationException();
@@ -846,6 +893,8 @@
         }
 
 
+        @Override
+        @SuppressWarnings("rawtypes")
         public boolean equals(Object o) {
             if (o instanceof Map.Entry) {
                 Map.Entry<K, V> e1 = this;
@@ -857,6 +906,7 @@
         }
 
 
+        @Override
         public int hashCode() {
             return (getKey() == null ? 0 : getKey().hashCode()) ^ (getValue() == null ? 0 : getValue().hashCode());
         }
@@ -869,6 +919,7 @@
     }
 
 
+    @Override
     public void writeExternal(ObjectOutput out) throws IOException {
         // VERSION
         out.writeByte(1);
@@ -889,6 +940,8 @@
     }
 
 
+    @Override
+    @SuppressWarnings("unchecked")
     public void readExternal(ObjectInput in)
             throws IOException, ClassNotFoundException {
 
diff -ur old-trove-3.0.3/src/gnu/trove/procedure/array/ToObjectArrayProceedure.java trove-3.0.3/src/gnu/trove/procedure/array/ToObjectArrayProceedure.java
--- old-trove-3.0.3/src/gnu/trove/procedure/array/ToObjectArrayProceedure.java	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/src/gnu/trove/procedure/array/ToObjectArrayProceedure.java	2014-03-03 15:19:33.000000000 -0800
@@ -42,8 +42,9 @@
     }
 
 
+    @Override
     public final boolean execute( T value ) {
         target[pos++] = value;
         return true;
     }
-} // ToObjectArrayProcedure
\ No newline at end of file
+} // ToObjectArrayProcedure
diff -ur old-trove-3.0.3/src/gnu/trove/set/hash/TCustomHashSet.java trove-3.0.3/src/gnu/trove/set/hash/TCustomHashSet.java
--- old-trove-3.0.3/src/gnu/trove/set/hash/TCustomHashSet.java	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/src/gnu/trove/set/hash/TCustomHashSet.java	2014-03-03 15:19:33.000000000 -0800
@@ -110,6 +110,7 @@
      * @param obj an <code>Object</code> value
      * @return true if the set was modified by the add operation
      */
+    @Override
     public boolean add( E obj ) {
         int index = insertKey( obj );
 
@@ -122,7 +123,8 @@
     }
 
 
-    @SuppressWarnings({"SimplifiableIfStatement"})
+    @Override
+    @SuppressWarnings("rawtypes")
     public boolean equals( Object other ) {
         if ( !( other instanceof Set ) ) {
             return false;
@@ -135,6 +137,7 @@
     }
 
 
+    @Override
     public int hashCode() {
         HashProcedure p = new HashProcedure();
         forEach( p );
@@ -149,6 +152,7 @@
             return h;
         }
 
+        @Override
         public final boolean execute( E key ) {
             h += HashFunctions.hash( key );
             return true;
@@ -162,6 +166,7 @@
      * @param newCapacity an <code>int</code> value
      */
     @SuppressWarnings({"unchecked"})
+    @Override
     protected void rehash( int newCapacity ) {
         int oldCapacity = _set.length;
         int oldSize = size();
@@ -187,7 +192,8 @@
      *
      * @return an <code>Object[]</code> value
      */
-    @SuppressWarnings({"unchecked"})
+    @Override
+    @SuppressWarnings({"unchecked", "rawtypes"})
     public Object[] toArray() {
         Object[] result = new Object[size()];
         forEach( new ToObjectArrayProceedure( result ) );
@@ -201,7 +207,8 @@
      * @param a an <code>Object[]</code> value
      * @return an <code>Object[]</code> value
      */
-    @SuppressWarnings({"unchecked"})
+    @Override
+    @SuppressWarnings({"unchecked", "rawtypes"})
     public <T> T[] toArray( T[] a ) {
         int size = size();
         if ( a.length < size ) {
@@ -227,6 +234,7 @@
 
 
     /** Empties the set. */
+    @Override
     public void clear() {
         super.clear();
 
@@ -240,7 +248,7 @@
      * @param obj an <code>Object</code> value
      * @return true if the set was modified by the remove operation.
      */
-    @SuppressWarnings({"unchecked"})
+    @Override
     public boolean remove( Object obj ) {
         int index = index( obj );
         if ( index >= 0 ) {
@@ -257,7 +265,7 @@
      *
      * @return an <code>Iterator</code> value
      */
-    @SuppressWarnings({"unchecked"})
+    @Override
     public TObjectHashIterator<E> iterator() {
         return new TObjectHashIterator<E>( this );
     }
@@ -270,9 +278,9 @@
      * @param collection a <code>Collection</code> value
      * @return true if all elements were present in the set.
      */
-    @SuppressWarnings("ForLoopReplaceableByForEach")
+    @Override
     public boolean containsAll( Collection<?> collection ) {
-        for ( Iterator i = collection.iterator(); i.hasNext(); ) {
+        for ( Iterator<?> i = collection.iterator(); i.hasNext(); ) {
             if ( !contains( i.next() ) ) {
                 return false;
             }
@@ -287,6 +295,7 @@
      * @param collection a <code>Collection</code> value
      * @return true if the set was modified by the add all operation.
      */
+    @Override
     public boolean addAll( Collection<? extends E> collection ) {
         boolean changed = false;
         int size = collection.size();
@@ -308,10 +317,11 @@
      * @param collection a <code>Collection</code> value
      * @return true if the set was modified by the remove all operation.
      */
+    @Override
     public boolean removeAll( Collection<?> collection ) {
         boolean changed = false;
         int size = collection.size();
-        Iterator it;
+        Iterator<?> it;
 
         it = collection.iterator();
         while ( size-- > 0 ) {
@@ -330,7 +340,7 @@
      * @param collection a <code>Collection</code> value
      * @return true if the set was modified by the retain all operation
      */
-    @SuppressWarnings({"SuspiciousMethodCalls"})
+    @Override
     public boolean retainAll( Collection<?> collection ) {
         boolean changed = false;
         int size = size();
@@ -345,12 +355,14 @@
     }
 
 
+    @Override
     public String toString() {
         final StringBuilder buf = new StringBuilder( "{" );
         forEach( new TObjectProcedure<E>() {
             private boolean first = true;
 
 
+            @Override
             public boolean execute( Object value ) {
                 if ( first ) {
                     first = false;
@@ -367,6 +379,7 @@
     }
 
 
+    @Override
     public void writeExternal( ObjectOutput out ) throws IOException {
         // VERSION
         out.writeByte( 1 );
@@ -387,6 +400,7 @@
 
 
     @SuppressWarnings({"unchecked"})
+    @Override
     public void readExternal( ObjectInput in )
             throws IOException, ClassNotFoundException {
 
diff -ur old-trove-3.0.3/src/gnu/trove/set/hash/THashSet.java trove-3.0.3/src/gnu/trove/set/hash/THashSet.java
--- old-trove-3.0.3/src/gnu/trove/set/hash/THashSet.java	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/src/gnu/trove/set/hash/THashSet.java	2014-03-03 15:19:33.000000000 -0800
@@ -102,6 +102,7 @@
      * @param obj an <code>Object</code> value
      * @return true if the set was modified by the add operation
      */
+    @Override
     public boolean add(E obj) {
         int index = insertKey(obj);
 
@@ -114,6 +115,7 @@
     }
 
 
+    @Override
     @SuppressWarnings({"SimplifiableIfStatement"})
     public boolean equals(Object other) {
         if (!(other instanceof Set)) {
@@ -127,6 +129,7 @@
     }
 
 
+    @Override
     public int hashCode() {
         HashProcedure p = new HashProcedure();
         forEach(p);
@@ -141,6 +144,7 @@
             return h;
         }
 
+        @Override
         public final boolean execute(E key) {
             h += HashFunctions.hash(key);
             return true;
@@ -153,6 +157,7 @@
      *
      * @param newCapacity an <code>int</code> value
      */
+    @Override
     @SuppressWarnings({"unchecked"})
     protected void rehash(int newCapacity) {
         int oldCapacity = _set.length;
@@ -184,6 +189,7 @@
      *
      * @return an <code>Object[]</code> value
      */
+    @Override
     @SuppressWarnings({"unchecked"})
     public Object[] toArray() {
         Object[] result = new Object[size()];
@@ -198,6 +204,7 @@
      * @param a an <code>Object[]</code> value
      * @return an <code>Object[]</code> value
      */
+    @Override
     @SuppressWarnings({"unchecked"})
     public <T> T[] toArray(T[] a) {
         int size = size();
@@ -226,6 +233,7 @@
     /**
      * Empties the set.
      */
+    @Override
     public void clear() {
         super.clear();
 
@@ -239,6 +247,7 @@
      * @param obj an <code>Object</code> value
      * @return true if the set was modified by the remove operation.
      */
+    @Override
     @SuppressWarnings({"unchecked"})
     public boolean remove(Object obj) {
         int index = index(obj);
@@ -256,6 +265,7 @@
      *
      * @return an <code>Iterator</code> value
      */
+    @Override
     @SuppressWarnings({"unchecked"})
     public TObjectHashIterator<E> iterator() {
         return new TObjectHashIterator<E>(this);
@@ -269,7 +279,7 @@
      * @param collection a <code>Collection</code> value
      * @return true if all elements were present in the set.
      */
-    @SuppressWarnings("ForLoopReplaceableByForEach")
+    @Override
     public boolean containsAll(Collection<?> collection) {
         for (Iterator i = collection.iterator(); i.hasNext();) {
             if (!contains(i.next())) {
@@ -286,6 +296,7 @@
      * @param collection a <code>Collection</code> value
      * @return true if the set was modified by the add all operation.
      */
+    @Override
     public boolean addAll(Collection<? extends E> collection) {
         boolean changed = false;
         int size = collection.size();
@@ -307,6 +318,7 @@
      * @param collection a <code>Collection</code> value
      * @return true if the set was modified by the remove all operation.
      */
+    @Override
     public boolean removeAll(Collection<?> collection) {
         boolean changed = false;
         int size = collection.size();
@@ -329,7 +341,7 @@
      * @param collection a <code>Collection</code> value
      * @return true if the set was modified by the retain all operation
      */
-    @SuppressWarnings({"SuspiciousMethodCalls"})
+    @Override
     public boolean retainAll(Collection<?> collection) {
         boolean changed = false;
         int size = size();
@@ -344,12 +356,14 @@
     }
 
 
+    @Override
     public String toString() {
         final StringBuilder buf = new StringBuilder("{");
         forEach(new TObjectProcedure<E>() {
             private boolean first = true;
 
 
+            @Override
             public boolean execute(Object value) {
                 if (first) {
                     first = false;
@@ -366,6 +380,7 @@
     }
 
 
+    @Override
     public void writeExternal(ObjectOutput out) throws IOException {
         // VERSION
         out.writeByte(1);
@@ -388,6 +403,7 @@
         }
     }
 
+    @Override
     @SuppressWarnings({"unchecked"})
     public void readExternal(ObjectInput in)
             throws IOException, ClassNotFoundException {
diff -ur old-trove-3.0.3/src/gnu/trove/set/hash/TLinkedHashSet.java trove-3.0.3/src/gnu/trove/set/hash/TLinkedHashSet.java
--- old-trove-3.0.3/src/gnu/trove/set/hash/TLinkedHashSet.java	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/src/gnu/trove/set/hash/TLinkedHashSet.java	2014-03-03 15:19:33.000000000 -0800
@@ -156,6 +156,7 @@
      * @param newCapacity an <code>int</code> value
      */
     @Override
+    @SuppressWarnings("unchecked")
     protected void rehash(int newCapacity) {
         TIntLinkedList oldOrder = new TIntLinkedList(order);
         int oldSize = size();
@@ -198,6 +199,7 @@
             return ioException;
         }
 
+        @Override
         public boolean execute(int value) {
             try {
                 output.writeObject(_set[value]);
@@ -299,6 +301,8 @@
          * @return true if additional invocations of the procedure are
          *         allowed.
          */
+        @Override
+        @SuppressWarnings("unchecked")
         public boolean execute(int value) {
             return procedure.execute((E) set[value]);
         }
diff -ur old-trove-3.0.3/src/gnu/trove/strategy/IdentityHashingStrategy.java trove-3.0.3/src/gnu/trove/strategy/IdentityHashingStrategy.java
--- old-trove-3.0.3/src/gnu/trove/strategy/IdentityHashingStrategy.java	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/src/gnu/trove/strategy/IdentityHashingStrategy.java	2014-03-03 15:19:33.000000000 -0800
@@ -16,10 +16,12 @@
         new IdentityHashingStrategy<Object>();
 
 
+    @Override
 	public int computeHashCode( K object ) {
 		return System.identityHashCode( object );
 	}
 
+    @Override
 	public boolean equals( K o1, K o2 ) {
 		return o1 == o2;
 	}
Only in trove-3.0.3/templates/gnu/trove: array
diff -ur old-trove-3.0.3/templates/gnu/trove/decorator/_E_ListDecorator.template trove-3.0.3/templates/gnu/trove/decorator/_E_ListDecorator.template
--- old-trove-3.0.3/templates/gnu/trove/decorator/_E_ListDecorator.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/decorator/_E_ListDecorator.template	2014-03-03 15:19:33.000000000 -0800
@@ -118,6 +118,7 @@
 
 
 	// Implements Externalizable
+    @Override
 	public void readExternal( ObjectInput in )
         throws IOException, ClassNotFoundException {
 
@@ -130,6 +131,7 @@
 
 
     // Implements Externalizable
+    @Override
     public void writeExternal( ObjectOutput out ) throws IOException {
         // VERSION
         out.writeByte(0);
diff -ur old-trove-3.0.3/templates/gnu/trove/decorator/_E_ObjectMapDecorator.template trove-3.0.3/templates/gnu/trove/decorator/_E_ObjectMapDecorator.template
--- old-trove-3.0.3/templates/gnu/trove/decorator/_E_ObjectMapDecorator.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/decorator/_E_ObjectMapDecorator.template	2014-03-03 15:19:33.000000000 -0800
@@ -91,13 +91,9 @@
      * @return the previous value associated with <tt>key</tt>,
      *         or <tt>null</tt> if none was found.
      */
+    @Override
     public V put( #ET# key, V value ) {
-        #e# k;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
-        }
+        #e# k = unwrapKey( key );
         return _map.put( k, value );
     }
 
@@ -108,24 +104,20 @@
      * @param key an <code>Object</code> value
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
+    @Override
     public V get( Object key ) {
-        #e# k;
-        if ( key != null ) {
-            if ( key instanceof #ET# ) {
-                k = unwrapKey( ( #ET# ) key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
+        if ( key instanceof #ET# ) {
+            #e# k = unwrapKey( ( #ET# ) key );
+            return _map.get( k );
         }
-        return _map.get( k );
+        return null;
     }
 
 
     /**
      * Empties the map.
      */
+    @Override
     public void clear() {
         this._map.clear();
     }
@@ -137,18 +129,13 @@
      * @param key an <code>Object</code> value
      * @return the removed value, or Integer(0) if it was not found in the map
      */
+    @Override
     public V remove( Object key ) {
-        #e# k;
-        if ( key != null ) {
-            if ( key instanceof #ET# ) {
-                k = unwrapKey( ( #ET# ) key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
+        if ( key instanceof #ET# ) {
+            #e# k = unwrapKey( ( #ET# ) key );
+            return _map.remove( k );
         }
-        return _map.remove( k );
+        return null;
     }
 
 
@@ -157,16 +144,21 @@
      *
      * @return a <code>Set</code> value
      */
+    @Override
     public Set<Map.Entry<#ET#,V>> entrySet() {
         return new AbstractSet<Map.Entry<#ET#,V>>() {
+            @Override
             public int size() {
                 return _map.size();
             }
 
+            @Override
             public boolean isEmpty() {
                 return T#E#ObjectMapDecorator.this.isEmpty();
             }
 
+            @Override
+            @SuppressWarnings("rawtypes")
             public boolean contains( Object o ) {
                 if ( o instanceof Map.Entry ) {
                     Object k = ( ( Map.Entry ) o ).getKey();
@@ -178,10 +170,12 @@
                 }
             }
 
+            @Override
             public Iterator<Map.Entry<#ET#,V>> iterator() {
                 return new Iterator<Map.Entry<#ET#,V>>() {
                     private final T#E#ObjectIterator<V> it = _map.iterator();
 
+                    @Override
                     public Map.Entry<#ET#,V> next() {
                         it.advance();
                         #e# k = it.key();
@@ -190,24 +184,30 @@
                         return new Map.Entry<#ET#,V>() {
                             private V val = v;
 
+                            @Override
+                            @SuppressWarnings("rawtypes")
                             public boolean equals( Object o ) {
                                 return o instanceof Map.Entry
                                         && ( ( Map.Entry ) o ).getKey().equals( key )
                                         && ( ( Map.Entry ) o ).getValue().equals( val );
                             }
 
+                            @Override
                             public #ET# getKey() {
                                 return key;
                             }
 
+                            @Override
                             public V getValue() {
                                 return val;
                             }
 
+                            @Override
                             public int hashCode() {
                                 return key.hashCode() + val.hashCode();
                             }
 
+                            @Override
                             public V setValue( V value ) {
                                 val = value;
                                 return put( key, value );
@@ -215,20 +215,25 @@
                         };
                     }
 
+                    @Override
                     public boolean hasNext() {
                         return it.hasNext();
                     }
 
+                    @Override
                     public void remove() {
                         it.remove();
                     }
                 };
             }
 
+            @Override
             public boolean add( Map.Entry<#ET#,V> o ) {
                 throw new UnsupportedOperationException();
             }
 
+            @Override
+            @SuppressWarnings("unchecked")
             public boolean remove( Object o ) {
                 boolean modified = false;
                 if ( contains( o ) ) {
@@ -240,10 +245,12 @@
                 return modified;
             }
 
+            @Override
             public boolean addAll( Collection<? extends Map.Entry<#ET#,V>> c ) {
                 throw new UnsupportedOperationException();
             }
 
+            @Override
             public void clear() {
                 T#E#ObjectMapDecorator.this.clear();
             }
@@ -257,6 +264,7 @@
      * @param val an <code>Object</code> value
      * @return a <code>boolean</code> value
      */
+    @Override
     public boolean containsValue( Object val ) {
         return _map.containsValue( val );
     }
@@ -268,8 +276,8 @@
      * @param key an <code>Object</code> value
      * @return a <code>boolean</code> value
      */
+    @Override
     public boolean containsKey( Object key ) {
-        if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof #ET# && _map.containsKey( ( ( #ET# ) key ).#e#Value() );
     }
 
@@ -279,6 +287,7 @@
      *
      * @return the map's size.
      */
+    @Override
     public int size() {
         return this._map.size();
     }
@@ -289,6 +298,7 @@
      *
      * @return true if the map is empty
      */
+    @Override
     public boolean isEmpty() {
         return size() == 0;
     }
@@ -301,6 +311,7 @@
      *
      * @param map a <code>Map</code> value
      */
+    @Override
     public void putAll( Map<? extends #ET#, ? extends  V> map ) {
         Iterator<? extends Entry<? extends #ET#,? extends V>> it = map.entrySet().iterator();
         for ( int i = map.size(); i-- > 0; ) {
@@ -333,6 +344,8 @@
 
 
     // Implements Externalizable
+    @Override
+    @SuppressWarnings("unchecked")
     public void readExternal( ObjectInput in )
         throws IOException, ClassNotFoundException {
 
@@ -346,6 +359,7 @@
 
 
     // Implements Externalizable
+    @Override
     public void writeExternal( ObjectOutput out ) throws IOException {
         // VERSION
         out.writeByte( 0 );
diff -ur old-trove-3.0.3/templates/gnu/trove/decorator/_E_SetDecorator.template trove-3.0.3/templates/gnu/trove/decorator/_E_SetDecorator.template
--- old-trove-3.0.3/templates/gnu/trove/decorator/_E_SetDecorator.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/decorator/_E_SetDecorator.template	2014-03-03 15:19:33.000000000 -0800
@@ -92,6 +92,7 @@
      *
      * @param value true if the set was modified by the insertion
      */
+    @Override
     public boolean add( #ET# value ) {
         return value != null && _set.add( value.#e#Value() );
     }
@@ -104,15 +105,16 @@
      * @param other an <code>Object</code> value
      * @return true if the sets are identical
      */
+    @Override
     public boolean equals( Object other ) {
         if ( _set.equals( other ) ) {
             return true;	// comparing two trove sets
         } else if ( other instanceof Set ) {
-            Set that = ( Set ) other;
+            Set<?> that = ( Set<?> ) other;
             if ( that.size() != _set.size() ) {
                 return false;	// different sizes, no need to compare
             } else {		// now we have to do it the hard way
-                Iterator it = that.iterator();
+                Iterator<?> it = that.iterator();
                 for ( int i = that.size(); i-- > 0; ) {
                     Object val = it.next();
                     if ( val instanceof #ET# ) {
@@ -137,6 +139,7 @@
     /**
      * Empties the set.
      */
+    @Override
     public void clear() {
         this._set.clear();
     }
@@ -148,6 +151,7 @@
      * @param value an <code>Object</code> value
      * @return true if the set was modified
      */
+    @Override
     public boolean remove( Object value ) {
         return value instanceof #ET# && _set.remove( ( ( #ET# ) value ).#e#Value() );
     }
@@ -158,18 +162,22 @@
      *
      * @return an iterator with support for removals in the underlying set
      */
+    @Override
     public Iterator<#ET#> iterator() {
         return new Iterator<#ET#>() {
             private final T#E#Iterator it = _set.iterator();
 
+            @Override
             public #ET# next() {
                 return #ET#.valueOf( it.next() );
             }
 
+            @Override
             public boolean hasNext() {
                 return it.hasNext();
             }
 
+            @Override
             public void remove() {
                 it.remove();
             }
@@ -182,6 +190,7 @@
      *
      * @return the set's size.
      */
+    @Override
     public int size() {
         return this._set.size();
     }
@@ -192,6 +201,7 @@
      *
      * @return true if the set is empty
      */
+    @Override
     public boolean isEmpty() {
         return this._set.size() == 0;
     }
@@ -208,6 +218,7 @@
 
 
     // Implements Externalizable
+    @Override
     public void readExternal( ObjectInput in )
         throws IOException, ClassNotFoundException {
 
@@ -220,6 +231,7 @@
 
 
     // Implements Externalizable
+    @Override
     public void writeExternal( ObjectOutput out ) throws IOException {
         // VERSION
         out.writeByte( 0 );
diff -ur old-trove-3.0.3/templates/gnu/trove/decorator/_K__V_MapDecorator.template trove-3.0.3/templates/gnu/trove/decorator/_K__V_MapDecorator.template
--- old-trove-3.0.3/templates/gnu/trove/decorator/_K__V_MapDecorator.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/decorator/_K__V_MapDecorator.template	2014-03-03 15:19:33.000000000 -0800
@@ -91,24 +91,16 @@
      * @return the previous value associated with <tt>key</tt>,
      *         or #VT#(0) if none was found.
      */
+    @Override
     public #VT# put( #KT# key, #VT# value ) {
-        #k# k;
-        #v# v;
-        if ( key == null ) {
-            k = _map.getNoEntryKey();
-        } else {
-            k = unwrapKey( key );
+        #k# k = unwrapKey( key );
+        #v# v = unwrapValue( value );
+        if ( _map.containsKey( k ) ) {
+            #v# retval = _map.put( k, v );
+            return wrapValue( retval);
         }
-        if ( value == null ) {
-            v = _map.getNoEntryValue();
-        } else {
-            v = unwrapValue( value );
-        }
-        #v# retval = _map.put( k, v );
-        if ( retval == _map.getNoEntryValue() ) {
-            return null;
-        }
-        return wrapValue( retval );
+        _map.put( k, v );
+        return null;
     }
 
 
@@ -118,32 +110,24 @@
      * @param key an <code>Object</code> value
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
+    @Override
     public #VT# get( Object key ) {
-        #k# k;
-        if ( key != null ) {
-            if ( key instanceof #KT# ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
+        if (! ( key instanceof #KT# ) ) {
+            return null;
         }
+        #k# k = unwrapKey( key );
         #v# v = _map.get( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if (v == _map.getNoEntryValue() && !_map.containsKey( k ) ) {
             return null;
-        } else {
-            return wrapValue( v );
         }
+        return wrapValue( v );
     }
 
 
     /**
      * Empties the map.
      */
+    @Override
     public void clear() {
         this._map.clear();
     }
@@ -155,26 +139,17 @@
      * @param key an <code>Object</code> value
      * @return the removed value, or null if it was not found in the map
      */
+    @Override
     public #VT# remove( Object key ) {
-        #k# k;
-        if ( key != null ) {
-            if ( key instanceof #KT# ) {
-                k = unwrapKey( key );
-            } else {
-                return null;
-            }
-        } else {
-            k = _map.getNoEntryKey();
-        }
-        #v# v = _map.remove( k );
-        // There may be a false positive since primitive maps
-        // cannot return null, so we have to do an extra
-        // check here.
-        if ( v == _map.getNoEntryValue() ) {
+        if (! (key instanceof #KT# ) ) {
             return null;
-        } else {
+        }
+        #k# k = unwrapKey( key );
+        if ( _map.containsKey( k ) ) {
+            #v# v = _map.remove( k );
             return wrapValue( v );
         }
+        return null;
     }
 
 
@@ -183,16 +158,20 @@
      *
      * @return a <code>Set</code> value
      */
+    @Override
     public Set<Map.Entry<#KT#,#VT#>> entrySet() {
         return new AbstractSet<Map.Entry<#KT#,#VT#>>() {
+            @Override
             public int size() {
                 return _map.size();
             }
 
+            @Override
             public boolean isEmpty() {
                 return T#K##V#MapDecorator.this.isEmpty();
             }
 
+            @Override
             public boolean contains( Object o ) {
                 if (o instanceof Map.Entry) {
                     Object k = ( ( Map.Entry ) o ).getKey();
@@ -204,37 +183,44 @@
                 }
             }
 
+            @Override
             public Iterator<Map.Entry<#KT#,#VT#>> iterator() {
                 return new Iterator<Map.Entry<#KT#,#VT#>>() {
                     private final T#K##V#Iterator it = _map.iterator();
 
+                    @Override
                     public Map.Entry<#KT#,#VT#> next() {
                         it.advance();
                         #k# ik = it.key();
-                        final #KT# key = (ik == _map.getNoEntryKey()) ? null : wrapKey( ik );
+                        final #KT# key =  wrapKey( ik );
                         #v# iv = it.value();
-                        final #VT# v = (iv == _map.getNoEntryValue()) ? null : wrapValue( iv );
+                        final #VT# v = wrapValue( iv );
                         return new Map.Entry<#KT#,#VT#>() {
                             private #VT# val = v;
 
+                            @Override
                             public boolean equals( Object o ) {
                                 return o instanceof Map.Entry
                                         && ( ( Map.Entry ) o ).getKey().equals(key)
                                         && ( ( Map.Entry ) o ).getValue().equals(val);
                             }
 
+                            @Override
                             public #KT# getKey() {
                                 return key;
                             }
 
+                            @Override
                             public #VT# getValue() {
                                 return val;
                             }
 
+                            @Override
                             public int hashCode() {
                                 return key.hashCode() + val.hashCode();
                             }
 
+                            @Override
                             public #VT# setValue( #VT# value ) {
                                 val = value;
                                 return put( key, value );
@@ -242,20 +228,24 @@
                         };
                     }
 
+                    @Override
                     public boolean hasNext() {
                         return it.hasNext();
                     }
 
+                    @Override
                     public void remove() {
                         it.remove();
                     }
                 };
             }
 
+            @Override
             public boolean add( Map.Entry<#KT#,#VT#> o ) {
                 throw new UnsupportedOperationException();
             }
 
+            @Override
             public boolean remove( Object o ) {
                 boolean modified = false;
                 if ( contains( o ) ) {
@@ -267,10 +257,12 @@
                 return modified;
             }
 
+            @Override
             public boolean addAll( Collection<? extends Map.Entry<#KT#, #VT#>> c ) {
                 throw new UnsupportedOperationException();
             }
 
+            @Override
             public void clear() {
                 T#K##V#MapDecorator.this.clear();
             }
@@ -284,6 +276,7 @@
      * @param val an <code>Object</code> value
      * @return a <code>boolean</code> value
      */
+    @Override
     public boolean containsValue( Object val ) {
         return val instanceof #VT# && _map.containsValue( unwrapValue( val ) );
     }
@@ -295,6 +288,7 @@
      * @param key an <code>Object</code> value
      * @return a <code>boolean</code> value
      */
+    @Override
     public boolean containsKey( Object key ) {
         if ( key == null ) return _map.containsKey( _map.getNoEntryKey() );
         return key instanceof #KT# && _map.containsKey( unwrapKey( key ) );
@@ -306,6 +300,7 @@
      *
      * @return the map's size.
      */
+    @Override
     public int size() {
         return this._map.size();
     }
@@ -316,6 +311,7 @@
      *
      * @return true if the map is empty
      */
+    @Override
     public boolean isEmpty() {
         return size() == 0;
     }
@@ -328,6 +324,7 @@
      *
      * @param map a <code>Map</code> value
      */
+    @Override
     public void putAll( Map<? extends #KT#, ? extends #VT#> map ) {
         Iterator<? extends Entry<? extends #KT#,? extends #VT#>> it =
             map.entrySet().iterator();
@@ -383,6 +380,7 @@
 
 
     // Implements Externalizable
+    @Override
     public void readExternal( ObjectInput in )
         throws IOException, ClassNotFoundException {
 
@@ -395,6 +393,7 @@
 
 
     // Implements Externalizable
+    @Override
     public void writeExternal( ObjectOutput out ) throws IOException {
         // VERSION
         out.writeByte(0);
diff -ur old-trove-3.0.3/templates/gnu/trove/decorator/Object_E_MapDecorator.template trove-3.0.3/templates/gnu/trove/decorator/Object_E_MapDecorator.template
--- old-trove-3.0.3/templates/gnu/trove/decorator/Object_E_MapDecorator.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/decorator/Object_E_MapDecorator.template	2014-03-03 15:19:33.000000000 -0800
@@ -93,6 +93,7 @@
      * @return the previous value associated with <tt>key</tt>,
      *         or Integer(0) if none was found.
      */
+    @Override
     public #ET# put( K key, #ET# value ) {
         if ( value == null ) return wrapValue( _map.put( key, _map.getNoEntryValue() ) );
         return wrapValue( _map.put( key, unwrapValue( value ) ) );
@@ -105,6 +106,7 @@
      * @param key an <code>Object</code> value
      * @return the value of <tt>key</tt> or null if no such mapping exists.
      */
+    @Override
     public #ET# get( Object key ) {
         #e# v = _map.get( key );
         // There may be a false positive since primitive maps
@@ -121,6 +123,7 @@
     /**
      * Empties the map.
      */
+    @Override
     public void clear() {
         this._map.clear();
     }
@@ -132,6 +135,7 @@
      * @param key an <code>Object</code> value
      * @return the removed value, or Integer(0) if it was not found in the map
      */
+    @Override
     public #ET# remove( Object key ) {
         #e# v = _map.remove( key );
         // There may be a false positive since primitive maps
@@ -150,16 +154,20 @@
      *
      * @return a <code>Set</code> value
      */
+    @Override
     public Set<Map.Entry<K,#ET#>> entrySet() {
         return new AbstractSet<Map.Entry<K,#ET#>>() {
+            @Override
             public int size() {
                 return _map.size();
             }
 
+            @Override
             public boolean isEmpty() {
                 return TObject#E#MapDecorator.this.isEmpty();
             }
 
+            @Override
             public boolean contains( Object o ) {
                 if ( o instanceof Map.Entry ) {
                     Object k = ( ( Map.Entry ) o ).getKey();
@@ -171,10 +179,12 @@
                 }
             }
 
+            @Override
             public Iterator<Map.Entry<K,#ET#>> iterator() {
                 return new Iterator<Map.Entry<K,#ET#>>() {
                     private final TObject#E#Iterator<K> it = _map.iterator();
 
+                    @Override
                     public Map.Entry<K,#ET#> next() {
                         it.advance();
                         final K key = it.key();
@@ -182,24 +192,29 @@
                         return new Map.Entry<K,#ET#>() {
                             private #ET# val = v;
 
+                            @Override
                             public boolean equals( Object o ) {
                                 return o instanceof Map.Entry &&
                                         ( ( Map.Entry ) o ).getKey().equals( key ) &&
                                         ( ( Map.Entry ) o ).getValue().equals( val );
                             }
 
+                            @Override
                             public K getKey() {
                                 return key;
                             }
 
+                            @Override
                             public #ET# getValue() {
                                 return val;
                             }
 
+                            @Override
                             public int hashCode() {
                                 return key.hashCode() + val.hashCode();
                             }
 
+                            @Override
                             public #ET# setValue( #ET# value ) {
                                 val = value;
                                 return put( key, value );
@@ -207,20 +222,24 @@
                         };
                     }
 
+                    @Override
                     public boolean hasNext() {
                         return it.hasNext();
                     }
 
+                    @Override
                     public void remove() {
                         it.remove();
                     }
                 };
             }
 
+            @Override
             public boolean add( Map.Entry<K,#ET#> o ) {
                 throw new UnsupportedOperationException();
             }
 
+            @Override
             public boolean remove( Object o ) {
                 boolean modified = false;
                 if ( contains( o ) ) {
@@ -232,10 +251,12 @@
                 return modified;
             }
 
+            @Override
             public boolean addAll(Collection<? extends Map.Entry<K,#ET#>> c) {
                 throw new UnsupportedOperationException();
             }
 
+            @Override
             public void clear() {
                 TObject#E#MapDecorator.this.clear();
             }
@@ -249,6 +270,7 @@
      * @param val an <code>Object</code> value
      * @return a <code>boolean</code> value
      */
+    @Override
     public boolean containsValue( Object val ) {
         return val instanceof #ET# && _map.containsValue( unwrapValue( val ) );
     }
@@ -260,6 +282,7 @@
      * @param key an <code>Object</code> value
      * @return a <code>boolean</code> value
      */
+    @Override
     public boolean containsKey( Object key ) {
         return _map.containsKey( key );
     }
@@ -270,6 +293,7 @@
      *
      * @return the map's size.
      */
+    @Override
     public int size() {
         return this._map.size();
     }
@@ -280,6 +304,7 @@
      *
      * @return true if the map is empty
      */
+    @Override
     public boolean isEmpty() {
         return this._map.size() == 0;
     }
@@ -292,6 +317,7 @@
      *
      * @param map a <code>Map</code> value
      */
+    @Override
     public void putAll( Map<? extends K, ? extends  #ET#> map ) {
         Iterator<? extends Entry<? extends K,? extends #ET#>> it = map.entrySet().iterator();
         for ( int i = map.size(); i-- > 0; ) {
@@ -324,6 +350,7 @@
 
 
     // Implements Externalizable
+    @Override
     public void readExternal(ObjectInput in)
         throws IOException, ClassNotFoundException {
 
@@ -337,6 +364,7 @@
 
 
     // Implements Externalizable
+    @Override
     public void writeExternal(ObjectOutput out) throws IOException {
         // VERSION
         out.writeByte( 0 );
diff -ur old-trove-3.0.3/templates/gnu/trove/_E_Collection.template trove-3.0.3/templates/gnu/trove/_E_Collection.template
--- old-trove-3.0.3/templates/gnu/trove/_E_Collection.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/_E_Collection.template	2014-03-03 15:19:33.000000000 -0800
@@ -296,6 +296,7 @@
      * @param o object to be compared for equality with this collection
      * @return <tt>true</tt> if the specified object is equal to this collection
      */
+    @Override
     boolean equals( Object o );
 
 
@@ -311,6 +312,7 @@
      * @see Object#equals(Object)
      * @see Collection#equals(Object)
      */
+    @Override
     int hashCode();
 
 
diff -ur old-trove-3.0.3/templates/gnu/trove/impl/hash/_E_Hash.template trove-3.0.3/templates/gnu/trove/impl/hash/_E_Hash.template
--- old-trove-3.0.3/templates/gnu/trove/impl/hash/_E_Hash.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/impl/hash/_E_Hash.template	2014-03-03 15:19:33.000000000 -0800
@@ -144,6 +144,7 @@
      * @param initialCapacity an <code>int</code> value
      * @return the actual capacity chosen
      */
+    @Override
     protected int setUp( int initialCapacity ) {
         int capacity;
 
@@ -188,6 +189,7 @@
      *
      * @param index an <code>int</code> value
      */
+    @Override
     protected void removeAt( int index ) {
         _set[index] = no_entry_value;
         super.removeAt( index );
@@ -201,7 +203,7 @@
      * @return the index of <tt>val</tt> or -1 if it isn't in the set.
      */
     protected int index( #e# val ) {
-        int hash, probe, index, length;
+        int hash, index, length;
 
         final byte[] states = _states;
         final #e#[] set = _set;
Only in trove-3.0.3/templates/gnu/trove/impl/hash: _E_OffheapHash.template
diff -ur old-trove-3.0.3/templates/gnu/trove/impl/hash/_K__V_Hash.template trove-3.0.3/templates/gnu/trove/impl/hash/_K__V_Hash.template
--- old-trove-3.0.3/templates/gnu/trove/impl/hash/_K__V_Hash.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/impl/hash/_K__V_Hash.template	2014-03-03 15:19:33.000000000 -0800
@@ -159,6 +159,7 @@
      * @param initialCapacity an <code>int</code> value
      * @return the actual capacity chosen
      */
+    @Override
     protected int setUp( int initialCapacity ) {
         int capacity;
 
@@ -203,6 +204,7 @@
      *
      * @param index an <code>int</code> value
      */
+    @Override
     protected void removeAt( int index ) {
         _set[index] = no_entry_key;
         super.removeAt( index );
@@ -216,7 +218,7 @@
      * @return the index of <tt>val</tt> or -1 if it isn't in the set.
      */
     protected int index( #k# key ) {
-        int hash, probe, index, length;
+        int hash, index, length;
 
         final byte[] states = _states;
         final #k#[] set = _set;
@@ -432,6 +434,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public void writeExternal( ObjectOutput out ) throws IOException {
         // VERSION
     	out.writeByte( 0 );
@@ -448,6 +451,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public void readExternal( ObjectInput in ) throws IOException, ClassNotFoundException {
         // VERSION
     	in.readByte();
Only in trove-3.0.3/templates/gnu/trove/impl/hash: _K__V_OffheapHash.template
diff -ur old-trove-3.0.3/templates/gnu/trove/impl/sync/Synchronized_E_Collection.template trove-3.0.3/templates/gnu/trove/impl/sync/Synchronized_E_Collection.template
--- old-trove-3.0.3/templates/gnu/trove/impl/sync/Synchronized_E_Collection.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/impl/sync/Synchronized_E_Collection.template	2014-03-03 15:19:33.000000000 -0800
@@ -66,85 +66,109 @@
 		this.mutex = mutex;
 	}
 
+    @Override
 	public int size() {
 		synchronized( mutex ) { return c.size(); }
 	}
+    @Override
 	public boolean isEmpty() {
 		synchronized( mutex ) { return c.isEmpty(); }
 	}
+    @Override
 	public boolean contains( #e# o ) {
 		synchronized( mutex ) { return c.contains( o ); }
 	}
+    @Override
 	public #e#[] toArray() {
 		synchronized( mutex ) { return c.toArray(); }
 	}
+    @Override
 	public #e#[] toArray( #e#[] a ) {
 		synchronized( mutex ) { return c.toArray( a ); }
 	}
 
+    @Override
 	public T#E#Iterator iterator() {
 		return c.iterator(); // Must be manually synched by user!
 	}
 
+    @Override
 	public boolean add( #e# e ) {
 		synchronized (mutex ) { return c.add( e ); }
 	}
+    @Override
 	public boolean remove( #e# o ) {
 		synchronized( mutex ) { return c.remove( o ); }
 	}
 
+    @Override
 	public boolean containsAll( Collection<?> coll ) {
 		synchronized( mutex ) { return c.containsAll( coll );}
 	}
+    @Override
 	public boolean containsAll( T#E#Collection coll ) {
 		synchronized( mutex ) { return c.containsAll( coll );}
 	}
+    @Override
 	public boolean containsAll( #e#[] array ) {
 		synchronized( mutex ) { return c.containsAll( array );}
 	}
 
+    @Override
 	public boolean addAll( Collection<? extends #ET#> coll ) {
 		synchronized( mutex ) { return c.addAll( coll ); }
 	}
+    @Override
 	public boolean addAll( T#E#Collection coll ) {
 		synchronized( mutex ) { return c.addAll( coll ); }
 	}
+    @Override
 	public boolean addAll( #e#[] array ) {
 		synchronized( mutex ) { return c.addAll( array ); }
 	}
 
+    @Override
 	public boolean removeAll( Collection<?> coll ) {
 		synchronized( mutex ) { return c.removeAll( coll ); }
 	}
+    @Override
 	public boolean removeAll( T#E#Collection coll ) {
 		synchronized( mutex ) { return c.removeAll( coll ); }
 	}
+    @Override
 	public boolean removeAll( #e#[] array ) {
 		synchronized( mutex ) { return c.removeAll( array ); }
 	}
 
+    @Override
 	public boolean retainAll( Collection<?> coll ) {
 		synchronized( mutex ) { return c.retainAll( coll ); }
 	}
+    @Override
 	public boolean retainAll( T#E#Collection coll ) {
 		synchronized( mutex ) { return c.retainAll( coll ); }
 	}
+    @Override
 	public boolean retainAll( #e#[] array ) {
 		synchronized( mutex ) { return c.retainAll( array ); }
 	}
 
+    @Override
 	public #e# getNoEntryValue() { return c.getNoEntryValue(); }
+    @Override
 	public boolean forEach( T#E#Procedure procedure ) {
 		synchronized( mutex ) { return c.forEach( procedure ); }
 	}
 
+    @Override
 	public void clear() {
 		synchronized( mutex ) { c.clear(); }
 	}
+    @Override
 	public String toString() {
 		synchronized( mutex ) { return c.toString(); }
 	}
 	private void writeObject( ObjectOutputStream s ) throws IOException {
 		synchronized( mutex ) { s.defaultWriteObject(); }
 	}
-}
\ No newline at end of file
+}
diff -ur old-trove-3.0.3/templates/gnu/trove/impl/sync/Synchronized_E_List.template trove-3.0.3/templates/gnu/trove/impl/sync/Synchronized_E_List.template
--- old-trove-3.0.3/templates/gnu/trove/impl/sync/Synchronized_E_List.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/impl/sync/Synchronized_E_List.template	2014-03-03 15:19:33.000000000 -0800
@@ -65,56 +65,72 @@
 		this.list = list;
 	}
 
+    @Override
 	public boolean equals( Object o ) {
 		synchronized( mutex ) { return list.equals( o ); }
 	}
+    @Override
 	public int hashCode() {
 		synchronized( mutex ) { return list.hashCode(); }
 	}
 
+    @Override
 	public #e# get( int index ) {
 		synchronized( mutex ) { return list.get( index ); }
 	}
+    @Override
 	public #e# set( int index, #e# element) {
 		synchronized( mutex ) { return list.set( index, element ); }
 	}
+    @Override
 	public void set( int offset, #e#[] values ) {
 		synchronized( mutex ) { list.set( offset, values ); }
 	}
+    @Override
 	public void set( int offset, #e#[] values, int valOffset, int length ) {
 		synchronized( mutex ) { list.set( offset, values, valOffset, length ); }
 	}
 
+    @Override
 	public #e# replace( int offset, #e# val ) {
 		synchronized( mutex ) { return list.replace( offset, val ); }
 	}
+    @Override
 	public void remove( int offset, int length ) {
 		synchronized( mutex ) { list.remove( offset, length ); }
 	}
+    @Override
 	public #e# removeAt( int offset ) {
 		synchronized( mutex ) { return list.removeAt( offset ); }
 	}
 
+    @Override
 	public void add( #e#[] vals ) {
 		synchronized( mutex ) { list.add( vals ); }
 	}
+    @Override
 	public void add( #e#[] vals, int offset, int length ) {
 		synchronized( mutex ) { list.add( vals, offset, length ); }
 	}
 
+    @Override
 	public void insert( int offset, #e# value ) {
 		synchronized( mutex ) { list.insert( offset, value ); }
 	}
+    @Override
 	public void insert( int offset, #e#[] values ) {
 		synchronized( mutex ) { list.insert( offset, values ); }
 	}
+    @Override
 	public void insert( int offset, #e#[] values, int valOffset, int len ) {
 		synchronized( mutex ) { list.insert( offset, values, valOffset, len ); }
 	}
 
+    @Override
 	public int indexOf( #e# o ) {
 		synchronized( mutex ) { return list.indexOf( o ); }
 	}
+    @Override
 	public int lastIndexOf( #e# o ) {
 		synchronized( mutex ) { return list.lastIndexOf( o ); }
 	}
@@ -127,6 +143,7 @@
 //            return list.listIterator( index ); // Must be manually synched by user
 //        }
 
+    @Override
 	public T#E#List subList( int fromIndex, int toIndex ) {
 		synchronized( mutex ) {
 			return new TSynchronized#E#List( list.subList( fromIndex, toIndex ),
@@ -134,70 +151,91 @@
 		}
 	}
 
+    @Override
 	public #e#[] toArray( int offset, int len ) {
 		synchronized( mutex ) { return list.toArray( offset, len ); }
 	}
+    @Override
 	public #e#[] toArray( #e#[] dest, int offset, int len ) {
 		synchronized( mutex ) { return list.toArray( dest, offset, len ); }
 	}
+    @Override
 	public #e#[] toArray( #e#[] dest, int source_pos, int dest_pos, int len ) {
 		synchronized( mutex ) { return list.toArray( dest, source_pos, dest_pos, len ); }
 	}
 
+    @Override
 	public int indexOf( int offset, #e# value ) {
 		synchronized( mutex ) { return list.indexOf( offset, value ); }
 	}
+    @Override
 	public int lastIndexOf( int offset, #e# value ) {
 		synchronized( mutex ) { return list.lastIndexOf( offset, value ); }
 	}
 
+    @Override
 	public void fill( #e# val ) {
 		synchronized( mutex ) { list.fill( val ); }
 	}
+    @Override
 	public void fill( int fromIndex, int toIndex, #e# val ) {
 		synchronized( mutex ) { list.fill( fromIndex, toIndex, val ); }
 	}
 
+    @Override
 	public void reverse() {
 		synchronized( mutex ) { list.reverse(); }
 	}
+    @Override
 	public void reverse( int from, int to ) {
 		synchronized( mutex ) { list.reverse( from, to ); }
 	}
 
+    @Override
 	public void shuffle( Random rand ) {
 		synchronized( mutex ) { list.shuffle( rand ); }
 	}
 
+    @Override
 	public void sort() {
 		synchronized( mutex ) { list.sort(); }
 	}
+    @Override
 	public void sort( int fromIndex, int toIndex ) {
 		synchronized( mutex ) { list.sort( fromIndex, toIndex ); }
 	}
 
+    @Override
 	public int binarySearch( #e# value ) {
 		synchronized( mutex ) { return list.binarySearch( value ); }
 	}
+    @Override
 	public int binarySearch( #e# value, int fromIndex, int toIndex ) {
 		synchronized( mutex ) { return list.binarySearch( value, fromIndex, toIndex ); }
 	}
 
+    @Override
 	public T#E#List grep( T#E#Procedure condition ) {
 		synchronized( mutex ) { return list.grep( condition ); }
 	}
+    @Override
 	public T#E#List inverseGrep( T#E#Procedure condition ) {
 		synchronized( mutex ) { return list.inverseGrep( condition ); }
 	}
 
+    @Override
 	public #e# max() { synchronized( mutex ) { return list.max(); } }
+    @Override
 	public #e# min() { synchronized( mutex ) { return list.min(); } }
+    @Override
 	public #e# sum() { synchronized( mutex ) { return list.sum(); } }
 
+    @Override
 	public boolean forEachDescending( T#E#Procedure procedure ) {
 		synchronized( mutex ) { return list.forEachDescending( procedure ); }
 	}
 
+    @Override
 	public void transformValues( T#E#Function function ) {
 		synchronized( mutex ) { list.transformValues( function ); }
 	}
diff -ur old-trove-3.0.3/templates/gnu/trove/impl/sync/Synchronized_E_ObjectMap.template trove-3.0.3/templates/gnu/trove/impl/sync/Synchronized_E_ObjectMap.template
--- old-trove-3.0.3/templates/gnu/trove/impl/sync/Synchronized_E_ObjectMap.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/impl/sync/Synchronized_E_ObjectMap.template	2014-03-03 15:19:33.000000000 -0800
@@ -48,7 +48,6 @@
 import java.io.ObjectOutputStream;
 import java.io.IOException;
 
-
 public class TSynchronized#E#ObjectMap<V>
 	implements T#E#ObjectMap<V>, Serializable {
 	// use serialVersionUID from JDK 1.2.2 for interoperability
@@ -69,34 +68,44 @@
 		this.mutex = mutex;
 	}
 
+    @Override
 	public int size() {
 		synchronized( mutex ) { return m.size(); }
 	}
+    @Override
 	public boolean isEmpty(){
 		synchronized( mutex ) { return m.isEmpty(); }
 	}
+    @Override
 	public boolean containsKey( #e# key ) {
 		synchronized( mutex ) { return m.containsKey( key ); }
 	}
+    @Override
 	public boolean containsValue( Object value ){
 		synchronized( mutex ) { return m.containsValue( value ); }
 	}
+    @Override
 	public V get( #e# key ) {
 		synchronized( mutex ) { return m.get( key ); }
 	}
 
+    @Override
 	public V put( #e# key, V value ) {
 		synchronized( mutex ) { return m.put( key, value ); }
 	}
+    @Override
 	public V remove( #e# key ) {
 		synchronized( mutex ) { return m.remove( key ); }
 	}
+    @Override
 	public void putAll( Map<? extends #ET#, ? extends V> map ) {
 		synchronized( mutex ) { m.putAll( map ); }
 	}
+    @Override
 	public void putAll( T#E#ObjectMap<? extends V> map ) {
 		synchronized( mutex ) { m.putAll( map ); }
 	}
+    @Override
 	public void clear() {
 		synchronized( mutex ) { m.clear(); }
 	}
@@ -104,6 +113,7 @@
 	private transient T#E#Set keySet = null;
 	private transient Collection<V> values = null;
 
+    @Override
 	public T#E#Set keySet() {
 		synchronized( mutex ) {
 			if ( keySet == null )
@@ -111,13 +121,16 @@
 			return keySet;
 		}
 	}
+    @Override
 	public #e#[] keys() {
 		synchronized( mutex ) { return m.keys(); }
 	}
+    @Override
 	public #e#[] keys( #e#[] array ) {
 		synchronized( mutex ) { return m.keys( array ); }
 	}
 
+    @Override
 	public Collection<V> valueCollection() {
 		synchronized( mutex ) {
 			if ( values == null ) {
@@ -126,45 +139,58 @@
 			return values;
 		}
 	}
+    @Override
 	public Object[] values() {
 		synchronized( mutex ) { return m.values(); }
 	}
+    @Override
 	public V[] values( V[] array ) {
 		synchronized( mutex ) { return m.values( array ); }
 	}
 
+    @Override
 	public T#E#ObjectIterator<V> iterator() {
 		return m.iterator(); // Must be manually synched by user!
 	}
 
 	// unchanging over the life of the map, no need to lock
+    @Override
 	public #e# getNoEntryKey() { return m.getNoEntryKey(); }
 
+    @Override
 	public V putIfAbsent( #e# key, V value ) {
 		synchronized( mutex ) { return m.putIfAbsent( key, value ); }
 	}
+    @Override
 	public boolean forEachKey( T#E#Procedure procedure ) {
 		synchronized( mutex ) { return m.forEachKey( procedure ); }
 	}
+    @Override
 	public boolean forEachValue( TObjectProcedure<? super V> procedure ) {
 		synchronized( mutex ) { return m.forEachValue( procedure ); }
 	}
+    @Override
 	public boolean forEachEntry( T#E#ObjectProcedure<? super V> procedure ) {
 		synchronized( mutex ) { return m.forEachEntry( procedure ); }
 	}
+    @Override
 	public void transformValues( TObjectFunction<V,V> function ) {
 		synchronized( mutex ) { m.transformValues( function ); }
 	}
+    @Override
 	public boolean retainEntries( T#E#ObjectProcedure<? super V> procedure ) {
 		synchronized( mutex ) { return m.retainEntries( procedure ); }
 	}
 
+    @Override
 	public boolean equals( Object o ) {
 		synchronized( mutex ) { return m.equals( o ); }
 	}
+    @Override
 	public int hashCode() {
 		synchronized( mutex ) { return m.hashCode(); }
 	}
+    @Override
 	public String toString() {
 		synchronized( mutex ) { return m.toString(); }
 	}
diff -ur old-trove-3.0.3/templates/gnu/trove/impl/sync/Synchronized_E_Set.template trove-3.0.3/templates/gnu/trove/impl/sync/Synchronized_E_Set.template
--- old-trove-3.0.3/templates/gnu/trove/impl/sync/Synchronized_E_Set.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/impl/sync/Synchronized_E_Set.template	2014-03-03 15:19:33.000000000 -0800
@@ -61,9 +61,11 @@
 		super( s, mutex );
 	}
 
+    @Override
 	public boolean equals( Object o ) {
 		synchronized( mutex ) { return c.equals( o ); }
 	}
+    @Override
 	public int hashCode() {
 		synchronized( mutex ) { return c.hashCode(); }
 	}
diff -ur old-trove-3.0.3/templates/gnu/trove/impl/sync/Synchronized_K__V_Map.template trove-3.0.3/templates/gnu/trove/impl/sync/Synchronized_K__V_Map.template
--- old-trove-3.0.3/templates/gnu/trove/impl/sync/Synchronized_K__V_Map.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/impl/sync/Synchronized_K__V_Map.template	2014-03-03 15:19:33.000000000 -0800
@@ -67,34 +67,44 @@
 		this.mutex = mutex;
 	}
 
+    @Override
 	public int size() {
 		synchronized( mutex ) { return m.size(); }
 	}
+    @Override
 	public boolean isEmpty(){
 		synchronized( mutex ) { return m.isEmpty(); }
 	}
+    @Override
 	public boolean containsKey( #k# key ) {
 		synchronized( mutex ) { return m.containsKey( key ); }
 	}
+    @Override
 	public boolean containsValue( #v# value ){
 		synchronized( mutex ) { return m.containsValue( value ); }
 	}
+    @Override
 	public #v# get( #k# key ) {
 		synchronized( mutex ) { return m.get( key ); }
 	}
 
+    @Override
 	public #v# put( #k# key, #v# value ) {
 		synchronized( mutex ) { return m.put( key, value ); }
 	}
+    @Override
 	public #v# remove( #k# key ) {
 		synchronized( mutex ) { return m.remove( key ); }
 	}
+    @Override
 	public void putAll( Map<? extends #KT#, ? extends #VT#> map ) {
 		synchronized( mutex ) { m.putAll( map ); }
 	}
+    @Override
 	public void putAll( T#K##V#Map map ) {
 		synchronized( mutex ) { m.putAll( map ); }
 	}
+    @Override
 	public void clear() {
 		synchronized( mutex ) { m.clear(); }
 	}
@@ -102,6 +112,7 @@
 	private transient T#K#Set keySet = null;
 	private transient T#V#Collection values = null;
 
+    @Override
 	public T#K#Set keySet() {
 		synchronized( mutex ) {
 			if ( keySet == null )
@@ -109,13 +120,16 @@
 			return keySet;
 		}
 	}
+    @Override
 	public #k#[] keys() {
 		synchronized( mutex ) { return m.keys(); }
 	}
+    @Override
 	public #k#[] keys( #k#[] array ) {
 		synchronized( mutex ) { return m.keys( array ); }
 	}
 
+    @Override
 	public T#V#Collection valueCollection() {
 		synchronized( mutex ) {
 			if ( values == null )
@@ -123,55 +137,72 @@
 			return values;
 		}
 	}
+    @Override
 	public #v#[] values() {
 		synchronized( mutex ) { return m.values(); }
 	}
+    @Override
 	public #v#[] values( #v#[] array ) {
 		synchronized( mutex ) { return m.values( array ); }
 	}
 
+    @Override
 	public T#K##V#Iterator iterator() {
 		return m.iterator(); // Must be manually synched by user!
 	}
 
 	// these are unchanging over the life of the map, no need to lock
+    @Override
 	public #k# getNoEntryKey() { return m.getNoEntryKey(); }
+    @Override
 	public #v# getNoEntryValue() { return m.getNoEntryValue(); }
 
+    @Override
 	public #v# putIfAbsent( #k# key, #v# value ) {
 		synchronized( mutex ) { return m.putIfAbsent( key, value ); }
 	}
+    @Override
 	public boolean forEachKey( T#K#Procedure procedure ) {
 		synchronized( mutex ) { return m.forEachKey( procedure ); }
 	}
+    @Override
 	public boolean forEachValue( T#V#Procedure procedure ) {
 		synchronized( mutex ) { return m.forEachValue( procedure ); }
 	}
+    @Override
 	public boolean forEachEntry( T#K##V#Procedure procedure ) {
 		synchronized( mutex ) { return m.forEachEntry( procedure ); }
 	}
+    @Override
 	public void transformValues( T#V#Function function ) {
 		synchronized( mutex ) { m.transformValues( function ); }
 	}
+    @Override
 	public boolean retainEntries( T#K##V#Procedure procedure ) {
 		synchronized( mutex ) { return m.retainEntries( procedure ); }
 	}
+    @Override
 	public boolean increment( #k# key ) {
 		synchronized( mutex ) { return m.increment( key ); }
 	}
+    @Override
 	public boolean adjustValue( #k# key, #v# amount ) {
 		synchronized( mutex ) { return m.adjustValue( key, amount ); }
 	}
+    @Override
 	public #v# adjustOrPutValue( #k# key, #v# adjust_amount, #v# put_amount ) {
 		synchronized( mutex ) { return m.adjustOrPutValue( key, adjust_amount, put_amount ); }
 	}
 
+    @Override
 	public boolean equals( Object o ) {
 		synchronized( mutex ) { return m.equals( o ); }
 	}
+    @Override
 	public int hashCode() {
 		synchronized( mutex ) { return m.hashCode(); }
 	}
+    @Override
 	public String toString() {
 		synchronized( mutex ) { return m.toString(); }
 	}
diff -ur old-trove-3.0.3/templates/gnu/trove/impl/sync/SynchronizedObject_E_Map.template trove-3.0.3/templates/gnu/trove/impl/sync/SynchronizedObject_E_Map.template
--- old-trove-3.0.3/templates/gnu/trove/impl/sync/SynchronizedObject_E_Map.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/impl/sync/SynchronizedObject_E_Map.template	2014-03-03 15:19:33.000000000 -0800
@@ -67,34 +67,44 @@
 		this.mutex = mutex;
 	}
 
+    @Override
 	public int size() {
 		synchronized( mutex ) { return m.size(); }
 	}
+    @Override
 	public boolean isEmpty(){
 		synchronized( mutex ) { return m.isEmpty(); }
 	}
+    @Override
 	public boolean containsKey( Object key ) {
 		synchronized( mutex ) { return m.containsKey( key ); }
 	}
+    @Override
 	public boolean containsValue( #e# value ){
 		synchronized( mutex ) { return m.containsValue( value ); }
 	}
+    @Override
 	public #e# get( Object key ) {
 		synchronized( mutex ) { return m.get( key ); }
 	}
 
+    @Override
 	public #e# put( K key, #e# value ) {
 		synchronized( mutex ) { return m.put( key, value ); }
 	}
+    @Override
 	public #e# remove( Object key ) {
 		synchronized( mutex ) { return m.remove( key ); }
 	}
+    @Override
 	public void putAll( Map<? extends K, ? extends #ET#> map ) {
 		synchronized( mutex ) { m.putAll( map ); }
 	}
+    @Override
 	public void putAll( TObject#E#Map<? extends K> map ) {
 		synchronized( mutex ) { m.putAll( map ); }
 	}
+    @Override
 	public void clear() {
 		synchronized( mutex ) { m.clear(); }
 	}
@@ -102,6 +112,7 @@
 	private transient Set<K> keySet = null;
 	private transient T#E#Collection values = null;
 
+    @Override
 	public Set<K> keySet() {
 		synchronized( mutex ) {
 			if ( keySet == null ) {
@@ -110,13 +121,16 @@
 			return keySet;
 		}
 	}
+    @Override
 	public Object[] keys() {
 		synchronized( mutex ) { return m.keys(); }
 	}
+    @Override
 	public K[] keys( K[] array ) {
 		synchronized( mutex ) { return m.keys( array ); }
 	}
 
+    @Override
 	public T#E#Collection valueCollection() {
 		synchronized( mutex ) {
 			if ( values == null )
@@ -124,54 +138,70 @@
 			return values;
 		}
 	}
+    @Override
 	public #e#[] values() {
 		synchronized( mutex ) { return m.values(); }
 	}
+    @Override
 	public #e#[] values( #e#[] array ) {
 		synchronized( mutex ) { return m.values( array ); }
 	}
 
+    @Override
 	public TObject#E#Iterator<K> iterator() {
 		return m.iterator(); // Must be manually synched by user!
 	}
 
 	// unchanging over the life of the map, no need to lock
+    @Override
 	public #e# getNoEntryValue() { return m.getNoEntryValue(); }
 
+    @Override
 	public #e# putIfAbsent( K key, #e# value ) {
 		synchronized( mutex ) { return m.putIfAbsent( key, value ); }
 	}
+    @Override
 	public boolean forEachKey( TObjectProcedure<? super K> procedure ) {
 		synchronized( mutex ) { return m.forEachKey( procedure ); }
 	}
+    @Override
 	public boolean forEachValue( T#E#Procedure procedure ) {
 		synchronized( mutex ) { return m.forEachValue( procedure ); }
 	}
+    @Override
 	public boolean forEachEntry( TObject#E#Procedure<? super K> procedure ) {
 		synchronized( mutex ) { return m.forEachEntry( procedure ); }
 	}
+    @Override
 	public void transformValues( T#E#Function function ) {
 		synchronized( mutex ) { m.transformValues( function ); }
 	}
+    @Override
 	public boolean retainEntries( TObject#E#Procedure<? super K> procedure ) {
 		synchronized( mutex ) { return m.retainEntries( procedure ); }
 	}
+    @Override
 	public boolean increment( K key ) {
 		synchronized( mutex ) { return m.increment( key ); }
 	}
+    @Override
 	public boolean adjustValue( K key, #e# amount ) {
 		synchronized( mutex ) { return m.adjustValue( key, amount ); }
 	}
+    @Override
 	public #e# adjustOrPutValue( K key, #e# adjust_amount, #e# put_amount ) {
 		synchronized( mutex ) { return m.adjustOrPutValue( key, adjust_amount, put_amount ); }
 	}
 
+    @Override
 	public boolean equals( Object o ) {
 		synchronized( mutex ) { return m.equals( o ); }
 	}
+    @Override
 	public int hashCode() {
 		synchronized( mutex ) { return m.hashCode(); }
 	}
+    @Override
 	public String toString() {
 		synchronized( mutex ) { return m.toString(); }
 	}
diff -ur old-trove-3.0.3/templates/gnu/trove/impl/sync/SynchronizedRandomAccess_E_List.template trove-3.0.3/templates/gnu/trove/impl/sync/SynchronizedRandomAccess_E_List.template
--- old-trove-3.0.3/templates/gnu/trove/impl/sync/SynchronizedRandomAccess_E_List.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/impl/sync/SynchronizedRandomAccess_E_List.template	2014-03-03 15:19:33.000000000 -0800
@@ -62,6 +62,7 @@
 		super( list, mutex );
 	}
 
+    @Override
 	public T#E#List subList( int fromIndex, int toIndex ) {
 		synchronized( mutex ) {
 			return new TSynchronizedRandomAccess#E#List(
diff -ur old-trove-3.0.3/templates/gnu/trove/impl/unmodifiable/Unmodifiable_E_Collection.template trove-3.0.3/templates/gnu/trove/impl/unmodifiable/Unmodifiable_E_Collection.template
--- old-trove-3.0.3/templates/gnu/trove/impl/unmodifiable/Unmodifiable_E_Collection.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/impl/unmodifiable/Unmodifiable_E_Collection.template	2014-03-03 15:19:33.000000000 -0800
@@ -60,43 +60,70 @@
 		this.c = c;
 	}
 
+    @Override
 	public int size()                   { return c.size(); }
+    @Override
 	public boolean isEmpty() 	        { return c.isEmpty(); }
+    @Override
 	public boolean contains( #e# o )    { return c.contains( o ); }
+    @Override
 	public #e#[] toArray()              { return c.toArray(); }
+    @Override
 	public #e#[] toArray( #e#[] a )     { return c.toArray( a ); }
+    @Override
 	public String toString()            { return c.toString(); }
+    @Override
 	public #e# getNoEntryValue()        { return c.getNoEntryValue(); }
+    @Override
 	public boolean forEach( T#E#Procedure procedure ) { return c.forEach( procedure ); }
 
+    @Override
 	public T#E#Iterator iterator() {
 		return new T#E#Iterator() {
 			T#E#Iterator i = c.iterator();
 
+            @Override
 			public boolean hasNext()    { return i.hasNext(); }
+            @Override
 			public #e# next()           { return i.next(); }
+            @Override
 			public void remove()        { throw new UnsupportedOperationException(); }
 		};
 	}
 
+    @Override
 	public boolean add( #e# e ) { throw new UnsupportedOperationException(); }
+    @Override
 	public boolean remove( #e# o ) { throw new UnsupportedOperationException(); }
 
+    @Override
 	public boolean containsAll( Collection<?> coll ) { return c.containsAll( coll ); }
+    @Override
 	public boolean containsAll( T#E#Collection coll ) { return c.containsAll( coll ); }
+    @Override
 	public boolean containsAll( #e#[] array ) { return c.containsAll( array ); }
 
+    @Override
 	public boolean addAll( T#E#Collection coll ) { throw new UnsupportedOperationException(); }
+    @Override
 	public boolean addAll( Collection<? extends #ET#> coll ) { throw new UnsupportedOperationException(); }
+    @Override
 	public boolean addAll( #e#[] array ) { throw new UnsupportedOperationException(); }
 
+    @Override
 	public boolean removeAll( Collection<?> coll ) { throw new UnsupportedOperationException(); }
+    @Override
 	public boolean removeAll( T#E#Collection coll ) { throw new UnsupportedOperationException(); }
+    @Override
 	public boolean removeAll( #e#[] array ) { throw new UnsupportedOperationException(); }
 
+    @Override
 	public boolean retainAll( Collection<?> coll ) { throw new UnsupportedOperationException(); }
+    @Override
 	public boolean retainAll( T#E#Collection coll ) { throw new UnsupportedOperationException(); }
+    @Override
 	public boolean retainAll( #e#[] array ) { throw new UnsupportedOperationException(); }
 
+    @Override
 	public void clear() { throw new UnsupportedOperationException(); }
 }
diff -ur old-trove-3.0.3/templates/gnu/trove/impl/unmodifiable/Unmodifiable_E_List.template trove-3.0.3/templates/gnu/trove/impl/unmodifiable/Unmodifiable_E_List.template
--- old-trove-3.0.3/templates/gnu/trove/impl/unmodifiable/Unmodifiable_E_List.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/impl/unmodifiable/Unmodifiable_E_List.template	2014-03-03 15:19:33.000000000 -0800
@@ -59,41 +59,60 @@
 		this.list = list;
 	}
 
+    @Override
 	public boolean equals( Object o )   { return o == this || list.equals( o ); }
+    @Override
 	public int hashCode()               { return list.hashCode(); }
 
+    @Override
 	public #e# get( int index )         { return list.get( index ); }
+    @Override
 	public int indexOf( #e# o )         { return list.indexOf( o ); }
+    @Override
 	public int lastIndexOf( #e# o )     { return list.lastIndexOf( o ); }
 
+    @Override
 	public #e#[] toArray( int offset, int len ) {
 		return list.toArray( offset, len );
 	}
+    @Override
 	public #e#[] toArray( #e#[] dest, int offset, int len ) {
 		return list.toArray( dest, offset, len );
 	}
+    @Override
 	public #e#[] toArray( #e#[] dest, int source_pos, int dest_pos, int len ) {
 		return list.toArray( dest, source_pos, dest_pos, len );
 	}
 
+    @Override
 	public boolean forEachDescending( T#E#Procedure procedure ) {
 		return list.forEachDescending( procedure );
 	}
 
+    @Override
 	public int binarySearch( #e# value ) { return list.binarySearch( value ); }
+    @Override
 	public int binarySearch( #e# value, int fromIndex, int toIndex ) {
 		return list.binarySearch( value, fromIndex, toIndex );
 	}
 
+    @Override
 	public int indexOf( int offset, #e# value )     { return list.indexOf( offset, value ); }
+    @Override
 	public int lastIndexOf( int offset, #e# value ) { return list.lastIndexOf( offset, value ); }
+    @Override
 	public T#E#List grep( T#E#Procedure condition ) { return list.grep( condition ); }
+    @Override
 	public T#E#List inverseGrep( T#E#Procedure condition ) { return list.inverseGrep( condition ); }
 
+    @Override
 	public #e# max()    { return list.max(); }
+    @Override
 	public #e# min()    { return list.min(); }
+    @Override
 	public #e# sum()    { return list.sum(); }
 
+    @Override
 	public T#E#List subList( int fromIndex, int toIndex ) {
 		return new TUnmodifiable#E#List( list.subList( fromIndex, toIndex ) );
 	}
@@ -142,30 +161,49 @@
 		: this);
 	}
 
+    @Override
 	public void add( #e#[] vals ) { throw new UnsupportedOperationException(); }
+    @Override
 	public void add( #e#[] vals, int offset, int length ) { throw new UnsupportedOperationException(); }
 
+    @Override
 	public #e# removeAt( int offset ) { throw new UnsupportedOperationException(); }
+    @Override
 	public void remove( int offset, int length ) { throw new UnsupportedOperationException(); }
 
+    @Override
 	public void insert( int offset, #e# value ) { throw new UnsupportedOperationException(); }
+    @Override
 	public void insert( int offset, #e#[] values ) { throw new UnsupportedOperationException(); }
+    @Override
 	public void insert( int offset, #e#[] values, int valOffset, int len ) { throw new UnsupportedOperationException(); }
 
+    @Override
 	public #e# set( int offset, #e# val ) { throw new UnsupportedOperationException(); }
+    @Override
 	public void set( int offset, #e#[] values ) { throw new UnsupportedOperationException(); }
+    @Override
 	public void set( int offset, #e#[] values, int valOffset, int length ) { throw new UnsupportedOperationException(); }
 
+    @Override
 	public #e# replace( int offset, #e# val ) { throw new UnsupportedOperationException(); }
 
+    @Override
 	public void transformValues( T#E#Function function ) { throw new UnsupportedOperationException(); }
 
+    @Override
 	public void reverse() { throw new UnsupportedOperationException(); }
+    @Override
 	public void reverse( int from, int to ) { throw new UnsupportedOperationException(); }
+    @Override
 	public void shuffle( Random rand ) { throw new UnsupportedOperationException(); }
 
+    @Override
 	public void sort() { throw new UnsupportedOperationException(); }
+    @Override
 	public void sort( int fromIndex, int toIndex ) { throw new UnsupportedOperationException(); }
+    @Override
 	public void fill( #e# val ) { throw new UnsupportedOperationException(); }
+    @Override
 	public void fill( int fromIndex, int toIndex, #e# val ) { throw new UnsupportedOperationException(); }
 }
diff -ur old-trove-3.0.3/templates/gnu/trove/impl/unmodifiable/Unmodifiable_E_ObjectMap.template trove-3.0.3/templates/gnu/trove/impl/unmodifiable/Unmodifiable_E_ObjectMap.template
--- old-trove-3.0.3/templates/gnu/trove/impl/unmodifiable/Unmodifiable_E_ObjectMap.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/impl/unmodifiable/Unmodifiable_E_ObjectMap.template	2014-03-03 15:19:33.000000000 -0800
@@ -55,66 +55,99 @@
 		this.m = m;
 	}
 
+    @Override
 	public int size()                       { return m.size(); }
+    @Override
 	public boolean isEmpty()                { return m.isEmpty(); }
+    @Override
 	public boolean containsKey( #e# key )   { return m.containsKey( key ); }
+    @Override
 	public boolean containsValue( Object val ) { return m.containsValue( val ); }
+    @Override
 	public V get( #e# key)                  { return m.get( key ); }
 
+    @Override
 	public V put( #e# key, V value ) { throw new UnsupportedOperationException(); }
+    @Override
 	public V remove( #e# key ) { throw new UnsupportedOperationException(); }
+    @Override
 	public void putAll( T#E#ObjectMap<? extends V> m ) { throw new UnsupportedOperationException(); }
+    @Override
 	public void putAll( Map<? extends #ET#, ? extends V> map ) { throw new UnsupportedOperationException(); }
+    @Override
 	public void clear() { throw new UnsupportedOperationException(); }
 
 	private transient T#E#Set keySet = null;
 	private transient Collection<V> values = null;
 
+    @Override
 	public T#E#Set keySet() {
 		if ( keySet == null )
 			keySet = TCollections.unmodifiableSet( m.keySet() );
 		return keySet;
 	}
+    @Override
 	public #e#[] keys() { return m.keys(); }
+    @Override
 	public #e#[] keys( #e#[] array ) { return m.keys( array ); }
 
+    @Override
 	public Collection<V> valueCollection() {
 		if ( values == null )
 			values = Collections.unmodifiableCollection( m.valueCollection() );
 		return values;
 	}
+    @Override
 	public Object[] values() { return m.values(); }
+    @Override
 	public V[] values( V[] array ) { return m.values( array ); }
 
+    @Override
 	public boolean equals(Object o) { return o == this || m.equals(o); }
+    @Override
 	public int hashCode()           { return m.hashCode(); }
+    @Override
 	public String toString()        { return m.toString(); }
+    @Override
 	public #e# getNoEntryKey()      { return m.getNoEntryKey(); }
 
+    @Override
 	public boolean forEachKey( T#E#Procedure procedure ) {
 		return m.forEachKey( procedure );
 	}
+    @Override
 	public boolean forEachValue( TObjectProcedure<? super V> procedure ) {
 		return m.forEachValue( procedure );
 	}
+    @Override
 	public boolean forEachEntry( T#E#ObjectProcedure<? super V> procedure ) {
 		return m.forEachEntry( procedure );
 	}
 
+    @Override
 	public T#E#ObjectIterator<V> iterator() {
 		return new T#E#ObjectIterator<V>() {
 			T#E#ObjectIterator<V> iter = m.iterator();
 
+            @Override
 			public #e# key() { return iter.key(); }
+            @Override
 			public V value() { return iter.value(); }
+            @Override
 			public void advance() { iter.advance(); }
+            @Override
 			public boolean hasNext() { return iter.hasNext(); }
+            @Override
 			public V setValue( V val ) { throw new UnsupportedOperationException(); }
+            @Override
 			public void remove() { throw new UnsupportedOperationException(); }
 		};
 	}
 
+    @Override
 	public V putIfAbsent( #e# key, V value ) { throw new UnsupportedOperationException(); }
+    @Override
 	public void transformValues( TObjectFunction<V,V> function ) { throw new UnsupportedOperationException(); }
+    @Override
 	public boolean retainEntries( T#E#ObjectProcedure<? super V> procedure ) { throw new UnsupportedOperationException(); }
 }
diff -ur old-trove-3.0.3/templates/gnu/trove/impl/unmodifiable/Unmodifiable_E_Set.template trove-3.0.3/templates/gnu/trove/impl/unmodifiable/Unmodifiable_E_Set.template
--- old-trove-3.0.3/templates/gnu/trove/impl/unmodifiable/Unmodifiable_E_Set.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/impl/unmodifiable/Unmodifiable_E_Set.template	2014-03-03 15:19:33.000000000 -0800
@@ -55,6 +55,8 @@
 	private static final long serialVersionUID = -9215047833775013803L;
 
 	public TUnmodifiable#E#Set( T#E#Set s )    { super( s ); }
+    @Override
 	public boolean equals( Object o )   { return o == this || c.equals(o); }
+    @Override
 	public int hashCode()               { return c.hashCode(); }
 }
diff -ur old-trove-3.0.3/templates/gnu/trove/impl/unmodifiable/Unmodifiable_K__V_Map.template trove-3.0.3/templates/gnu/trove/impl/unmodifiable/Unmodifiable_K__V_Map.template
--- old-trove-3.0.3/templates/gnu/trove/impl/unmodifiable/Unmodifiable_K__V_Map.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/impl/unmodifiable/Unmodifiable_K__V_Map.template	2014-03-03 15:19:33.000000000 -0800
@@ -60,70 +60,107 @@
 		this.m = m;
 	}
 
+    @Override
 	public int size()                       { return m.size(); }
+    @Override
 	public boolean isEmpty()                { return m.isEmpty(); }
+    @Override
 	public boolean containsKey( #k# key )   { return m.containsKey( key ); }
+    @Override
 	public boolean containsValue( #v# val ) { return m.containsValue( val ); }
+    @Override
 	public #v# get( #k# key)                { return m.get( key ); }
 
+    @Override
 	public #v# put( #k# key, #v# value ) { throw new UnsupportedOperationException(); }
+    @Override
 	public #v# remove( #k# key ) { throw new UnsupportedOperationException(); }
+    @Override
 	public void putAll( T#K##V#Map m ) { throw new UnsupportedOperationException(); }
+    @Override
 	public void putAll( Map<? extends #KT#, ? extends #VT#> map ) { throw new UnsupportedOperationException(); }
+    @Override
 	public void clear() { throw new UnsupportedOperationException(); }
 
 	private transient T#K#Set keySet = null;
 	private transient T#V#Collection values = null;
 
+    @Override
 	public T#K#Set keySet() {
 		if ( keySet == null )
 			keySet = TCollections.unmodifiableSet( m.keySet() );
 		return keySet;
 	}
+    @Override
 	public #k#[] keys() { return m.keys(); }
+    @Override
 	public #k#[] keys( #k#[] array ) { return m.keys( array ); }
 
+    @Override
 	public T#V#Collection valueCollection() {
 		if ( values == null )
 			values = TCollections.unmodifiableCollection( m.valueCollection() );
 		return values;
 	}
+    @Override
 	public #v#[] values() { return m.values(); }
+    @Override
 	public #v#[] values( #v#[] array ) { return m.values( array ); }
 
+    @Override
 	public boolean equals(Object o) { return o == this || m.equals(o); }
+    @Override
 	public int hashCode()           { return m.hashCode(); }
+    @Override
 	public String toString()        { return m.toString(); }
+    @Override
 	public #k# getNoEntryKey()      { return m.getNoEntryKey(); }
+    @Override
 	public #v# getNoEntryValue()    { return m.getNoEntryValue(); }
 
+    @Override
 	public boolean forEachKey( T#K#Procedure procedure ) {
 		return m.forEachKey( procedure );
 	}
+    @Override
 	public boolean forEachValue( T#V#Procedure procedure ) {
 		return m.forEachValue( procedure );
 	}
+    @Override
 	public boolean forEachEntry( T#K##V#Procedure procedure ) {
 		return m.forEachEntry( procedure );
 	}
 
+    @Override
 	public T#K##V#Iterator iterator() {
 		return new T#K##V#Iterator() {
 			T#K##V#Iterator iter = m.iterator();
 
+            @Override
 			public #k# key() { return iter.key(); }
+            @Override
 			public #v# value() { return iter.value(); }
+            @Override
 			public void advance() { iter.advance(); }
+            @Override
 			public boolean hasNext() { return iter.hasNext(); }
+            @Override
 			public #v# setValue( #v# val ) { throw new UnsupportedOperationException(); }
+            @Override
 			public void remove() { throw new UnsupportedOperationException(); }
 		};
 	}
 
+    @Override
 	public #v# putIfAbsent( #k# key, #v# value ) { throw new UnsupportedOperationException(); }
+    @Override
 	public void transformValues( T#V#Function function ) { throw new UnsupportedOperationException(); }
+    @Override
 	public boolean retainEntries( T#K##V#Procedure procedure ) { throw new UnsupportedOperationException(); }
+    @Override
 	public boolean increment( #k# key ) { throw new UnsupportedOperationException(); }
+    @Override
 	public boolean adjustValue( #k# key, #v# amount ) { throw new UnsupportedOperationException(); }
+    @Override
 	public #v# adjustOrPutValue( #k# key, #v# adjust_amount, #v# put_amount ) { throw new UnsupportedOperationException(); }
 }
diff -ur old-trove-3.0.3/templates/gnu/trove/impl/unmodifiable/UnmodifiableObject_E_Map.template trove-3.0.3/templates/gnu/trove/impl/unmodifiable/UnmodifiableObject_E_Map.template
--- old-trove-3.0.3/templates/gnu/trove/impl/unmodifiable/UnmodifiableObject_E_Map.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/impl/unmodifiable/UnmodifiableObject_E_Map.template	2014-03-03 15:19:33.000000000 -0800
@@ -55,69 +55,105 @@
 		this.m = m;
 	}
 
+    @Override
 	public int size()                       { return m.size(); }
+    @Override
 	public boolean isEmpty()                { return m.isEmpty(); }
+    @Override
 	public boolean containsKey( Object key ){ return m.containsKey( key ); }
+    @Override
 	public boolean containsValue( #e# val ) { return m.containsValue( val ); }
+    @Override
 	public #e# get( Object key )            { return m.get( key ); }
 
+    @Override
 	public #e# put( K key, #e# value ) { throw new UnsupportedOperationException(); }
+    @Override
 	public #e# remove( Object key ) { throw new UnsupportedOperationException(); }
+    @Override
 	public void putAll( TObject#E#Map<? extends K> m ) { throw new UnsupportedOperationException(); }
+    @Override
 	public void putAll( Map<? extends K, ? extends #ET#> map ) { throw new UnsupportedOperationException(); }
+    @Override
 	public void clear() { throw new UnsupportedOperationException(); }
 
 	private transient Set<K> keySet = null;
 	private transient T#E#Collection values = null;
 
+    @Override
 	public Set<K> keySet() {
 		if ( keySet == null )
 			keySet = Collections.unmodifiableSet( m.keySet() );
 		return keySet;
 	}
+    @Override
 	public Object[] keys() { return m.keys(); }
+    @Override
 	public K[] keys( K[] array ) { return m.keys( array ); }
 
+    @Override
 	public T#E#Collection valueCollection() {
 		if ( values == null )
 			values = TCollections.unmodifiableCollection( m.valueCollection() );
 		return values;
 	}
+    @Override
 	public #e#[] values() { return m.values(); }
+    @Override
 	public #e#[] values( #e#[] array ) { return m.values( array ); }
 
+    @Override
 	public boolean equals(Object o) { return o == this || m.equals(o); }
+    @Override
 	public int hashCode()           { return m.hashCode(); }
+    @Override
 	public String toString()        { return m.toString(); }
+    @Override
 	public #e# getNoEntryValue()    { return m.getNoEntryValue(); }
 
+    @Override
 	public boolean forEachKey( TObjectProcedure<? super K> procedure ) {
 		return m.forEachKey( procedure );
 	}
+    @Override
 	public boolean forEachValue( T#E#Procedure procedure ) {
 		return m.forEachValue( procedure );
 	}
+    @Override
 	public boolean forEachEntry( TObject#E#Procedure<? super K> procedure ) {
 		return m.forEachEntry( procedure );
 	}
 
+    @Override
 	public TObject#E#Iterator<K> iterator() {
 		return new TObject#E#Iterator<K>() {
 			TObject#E#Iterator<K> iter = m.iterator();
 
+            @Override
 			public K key() { return iter.key(); }
+            @Override
 			public #e# value() { return iter.value(); }
+            @Override
 			public void advance() { iter.advance(); }
+            @Override
 			public boolean hasNext() { return iter.hasNext(); }
+            @Override
 			public #e# setValue( #e# val ) { throw new UnsupportedOperationException(); }
+            @Override
 			public void remove() { throw new UnsupportedOperationException(); }
 		};
 	}
 
+    @Override
 	public #e# putIfAbsent( K key, #e# value ) { throw new UnsupportedOperationException(); }
+    @Override
 	public void transformValues( T#E#Function function ) { throw new UnsupportedOperationException(); }
+    @Override
 	public boolean retainEntries( TObject#E#Procedure<? super K> procedure ) { throw new UnsupportedOperationException(); }
+    @Override
 	public boolean increment( K key ) { throw new UnsupportedOperationException(); }
+    @Override
 	public boolean adjustValue( K key, #e# amount ) { throw new UnsupportedOperationException(); }
+    @Override
 	public #e# adjustOrPutValue( K key, #e# adjust_amount, #e# put_amount ) { throw new UnsupportedOperationException(); }
 }
diff -ur old-trove-3.0.3/templates/gnu/trove/impl/unmodifiable/UnmodifiableRandomAccess_E_List.template trove-3.0.3/templates/gnu/trove/impl/unmodifiable/UnmodifiableRandomAccess_E_List.template
--- old-trove-3.0.3/templates/gnu/trove/impl/unmodifiable/UnmodifiableRandomAccess_E_List.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/impl/unmodifiable/UnmodifiableRandomAccess_E_List.template	2014-03-03 15:19:33.000000000 -0800
@@ -58,6 +58,7 @@
 		super( list );
 	}
 
+    @Override
 	public T#E#List subList( int fromIndex, int toIndex ) {
 		return new TUnmodifiableRandomAccess#E#List( list.subList( fromIndex, toIndex ) );
 	}
@@ -71,4 +72,4 @@
 	private Object writeReplace() {
 		return new TUnmodifiable#E#List( list );
 	}
-}
\ No newline at end of file
+}
diff -ur old-trove-3.0.3/templates/gnu/trove/iterator/_E_ObjectIterator.template trove-3.0.3/templates/gnu/trove/iterator/_E_ObjectIterator.template
--- old-trove-3.0.3/templates/gnu/trove/iterator/_E_ObjectIterator.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/iterator/_E_ObjectIterator.template	2014-03-03 15:19:33.000000000 -0800
@@ -122,4 +122,4 @@
      * @return the old value of the entry.
      */
     public V setValue( V val );
-}
\ No newline at end of file
+}
diff -ur old-trove-3.0.3/templates/gnu/trove/iterator/Object_E_Iterator.template trove-3.0.3/templates/gnu/trove/iterator/Object_E_Iterator.template
--- old-trove-3.0.3/templates/gnu/trove/iterator/Object_E_Iterator.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/iterator/Object_E_Iterator.template	2014-03-03 15:19:33.000000000 -0800
@@ -122,4 +122,4 @@
      * @return the old value of the entry.
      */
     public #e# setValue( #e# val );
-}
\ No newline at end of file
+}
diff -ur old-trove-3.0.3/templates/gnu/trove/list/array/_E_ArrayList.template trove-3.0.3/templates/gnu/trove/list/array/_E_ArrayList.template
--- old-trove-3.0.3/templates/gnu/trove/list/array/_E_ArrayList.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/list/array/_E_ArrayList.template	2014-03-03 15:19:33.000000000 -0800
@@ -62,7 +62,6 @@
      * Creates a new <code>T#E#ArrayList</code> instance with the
      * default capacity.
      */
-    @SuppressWarnings({"RedundantCast"})
     public T#E#ArrayList() {
         this( DEFAULT_CAPACITY, ( #e# ) 0 );
     }
@@ -74,7 +73,6 @@
      *
      * @param capacity an <code>int</code> value
      */
-    @SuppressWarnings({"RedundantCast"})
     public T#E#ArrayList( int capacity ) {
         this( capacity, ( #e# ) 0 );
     }
@@ -168,6 +166,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public #e# getNoEntryValue() {
         return no_entry_value;
     }
@@ -191,12 +190,14 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public int size() {
         return _pos;
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean isEmpty() {
         return _pos == 0;
     }
@@ -217,6 +218,7 @@
     // modifying
 
     /** {@inheritDoc} */
+    @Override
     public boolean add( #e# val ) {
         ensureCapacity( _pos + 1 );
         _data[ _pos++ ] = val;
@@ -225,12 +227,14 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public void add( #e#[] vals ) {
         add( vals, 0, vals.length );
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public void add( #e#[] vals, int offset, int length ) {
         ensureCapacity( _pos + length );
         System.arraycopy( vals, offset, _data, _pos, length );
@@ -239,6 +243,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public void insert( int offset, #e# value ) {
         if ( offset == _pos ) {
             add( value );
@@ -254,12 +259,14 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public void insert( int offset, #e#[] values ) {
         insert( offset, values, 0, values.length );
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public void insert( int offset, #e#[] values, int valOffset, int len ) {
         if ( offset == _pos ) {
             add( values, valOffset, len );
@@ -276,6 +283,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #e# get( int offset ) {
         if ( offset >= _pos ) {
             throw new ArrayIndexOutOfBoundsException( offset );
@@ -293,6 +301,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #e# set( int offset, #e# val ) {
         if ( offset >= _pos ) {
             throw new ArrayIndexOutOfBoundsException( offset );
@@ -305,6 +314,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #e# replace( int offset, #e# val ) {
         if ( offset >= _pos ) {
             throw new ArrayIndexOutOfBoundsException( offset );
@@ -316,12 +326,14 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public void set( int offset, #e#[] values ) {
         set( offset, values, 0, values.length );
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public void set( int offset, #e#[] values, int valOffset, int length ) {
         if ( offset < 0 || offset + length > _pos ) {
             throw new ArrayIndexOutOfBoundsException( offset );
@@ -339,6 +351,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public void clear() {
         clear( DEFAULT_CAPACITY );
     }
@@ -379,6 +392,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean remove( #e# value ) {
         for ( int index = 0; index < _pos; index++ ) {
             if ( value == _data[index]  ) {
@@ -391,6 +405,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #e# removeAt( int offset ) {
         #e# old = get( offset );
         remove( offset, 1 );
@@ -399,6 +414,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public void remove( int offset, int length ) {
 		if ( length == 0 ) return;
         if ( offset < 0 || offset >= _pos ) {
@@ -426,12 +442,14 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public T#E#Iterator iterator() {
         return new T#E#ArrayIterator( 0 );
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean containsAll( Collection<?> collection ) {
         for ( Object element : collection ) {
             if ( element instanceof #ET# ) {
@@ -449,6 +467,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean containsAll( T#E#Collection collection ) {
         if ( this == collection ) {
             return true;
@@ -465,6 +484,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean containsAll( #e#[] array ) {
         for ( int i = array.length; i-- > 0; ) {
             if ( ! contains( array[i] ) ) {
@@ -476,6 +496,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean addAll( Collection<? extends #ET#> collection ) {
         boolean changed = false;
         for ( #ET# element : collection ) {
@@ -489,6 +510,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean addAll( T#E#Collection collection ) {
         boolean changed = false;
         T#E#Iterator iter = collection.iterator();
@@ -503,6 +525,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean addAll( #e#[] array ) {
         boolean changed = false;
         for ( #e# element : array ) {
@@ -515,7 +538,7 @@
 
 
     /** {@inheritDoc} */
-    @SuppressWarnings({"SuspiciousMethodCalls"})
+    @Override
     public boolean retainAll( Collection<?> collection ) {
         boolean modified = false;
 	    T#E#Iterator iter = iterator();
@@ -530,6 +553,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean retainAll( T#E#Collection collection ) {
         if ( this == collection ) {
             return false;
@@ -547,6 +571,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean retainAll( #e#[] array ) {
         boolean changed = false;
         Arrays.sort( array );
@@ -563,6 +588,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean removeAll( Collection<?> collection ) {
         boolean changed = false;
         for ( Object element : collection ) {
@@ -578,6 +604,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean removeAll( T#E#Collection collection ) {
         if ( collection == this ) {
             clear();
@@ -596,6 +623,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean removeAll( #e#[] array ) {
         boolean changed = false;
         for ( int i = array.length; i-- > 0; ) {
@@ -608,6 +636,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public void transformValues( T#E#Function function ) {
         for ( int i = _pos; i-- > 0; ) {
             _data[ i ] = function.execute( _data[ i ] );
@@ -616,12 +645,14 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public void reverse() {
         reverse( 0, _pos );
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public void reverse( int from, int to ) {
         if ( from == to ) {
             return;             // nothing to do
@@ -636,6 +667,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public void shuffle( Random rand ) {
         for ( int i = _pos; i-- > 1; ) {
             swap( i, rand.nextInt( i ) );
@@ -659,6 +691,7 @@
     // copying
 
     /** {@inheritDoc} */
+    @Override
     public T#E#List subList( int begin, int end ) {
     	if ( end < begin ) {
 			throw new IllegalArgumentException( "end index " + end +
@@ -679,12 +712,14 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #e#[] toArray() {
         return toArray( 0, _pos );
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public #e#[] toArray( int offset, int len ) {
         #e#[] rv = new #e#[ len ];
         toArray( rv, offset, len );
@@ -693,6 +728,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #e#[] toArray( #e#[] dest ) {
         int len = dest.length;
         if ( dest.length > _pos ) {
@@ -705,6 +741,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #e#[] toArray( #e#[] dest, int offset, int len ) {
         if ( len == 0 ) {
             return dest;             // nothing to copy
@@ -718,6 +755,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #e#[] toArray( #e#[] dest, int source_pos, int dest_pos, int len ) {
         if ( len == 0 ) {
             return dest;             // nothing to copy
@@ -768,6 +806,7 @@
     // procedures
 
     /** {@inheritDoc} */
+    @Override
     public boolean forEach( T#E#Procedure procedure ) {
         for ( int i = 0; i < _pos; i++ ) {
             if ( !procedure.execute( _data[ i ] ) ) {
@@ -779,6 +818,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean forEachDescending( T#E#Procedure procedure ) {
         for ( int i = _pos; i-- > 0; ) {
             if ( !procedure.execute( _data[ i ] ) ) {
@@ -792,12 +832,14 @@
     // sorting
 
     /** {@inheritDoc} */
+    @Override
     public void sort() {
         Arrays.sort( _data, 0, _pos );
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public void sort( int fromIndex, int toIndex ) {
         Arrays.sort( _data, fromIndex, toIndex );
     }
@@ -806,12 +848,14 @@
     // filling
 
     /** {@inheritDoc} */
+    @Override
     public void fill( #e# val ) {
         Arrays.fill( _data, 0, _pos, val );
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public void fill( int fromIndex, int toIndex, #e# val ) {
         if ( toIndex > _pos ) {
           ensureCapacity( toIndex );
@@ -824,12 +868,14 @@
     // searching
 
     /** {@inheritDoc} */
+    @Override
     public int binarySearch( #e# value ) {
         return binarySearch( value, 0, _pos );
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public int binarySearch(#e# value, int fromIndex, int toIndex) {
         if ( fromIndex < 0 ) {
             throw new ArrayIndexOutOfBoundsException( fromIndex );
@@ -860,12 +906,14 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public int indexOf( #e# value ) {
         return indexOf( 0, value );
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public int indexOf( int offset, #e# value ) {
         for ( int i = offset; i < _pos; i++ ) {
             if ( _data[ i ] == value ) {
@@ -877,12 +925,14 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public int lastIndexOf( #e# value ) {
         return lastIndexOf( _pos, value );
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public int lastIndexOf( int offset, #e# value ) {
         for ( int i = offset; i-- > 0; ) {
             if ( _data[ i ] == value ) {
@@ -894,12 +944,14 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean contains( #e# value ) {
         return lastIndexOf( value ) >= 0;
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public T#E#List grep( T#E#Procedure condition ) {
         T#E#ArrayList list = new T#E#ArrayList();
         for ( int i = 0; i < _pos; i++ ) {
@@ -912,6 +964,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public T#E#List inverseGrep( T#E#Procedure condition ) {
         T#E#ArrayList list = new T#E#ArrayList();
         for ( int i = 0; i < _pos; i++ ) {
@@ -924,6 +977,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #e# max() {
         if ( size() == 0 ) {
             throw new IllegalStateException("cannot find maximum of an empty list");
@@ -939,6 +993,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #e# min() {
         if ( size() == 0 ) {
             throw new IllegalStateException( "cannot find minimum of an empty list" );
@@ -954,6 +1009,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #e# sum() {
         #e# sum = 0;
         for ( int i = 0; i < _pos; i++ ) {
@@ -1001,12 +1057,14 @@
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean hasNext() {
             return cursor < size();
 	    }
 
 
         /** {@inheritDoc} */
+        @Override
         public #e# next() {
             try {
                 #e# next = get( cursor );
@@ -1019,6 +1077,7 @@
 
 
         /** {@inheritDoc} */
+        @Override
         public void remove() {
             if ( lastRet == -1 )
 		        throw new IllegalStateException();
@@ -1035,6 +1094,7 @@
     }
 
 
+    @Override
     public void writeExternal( ObjectOutput out ) throws IOException {
     	// VERSION
     	out.writeByte( 0 );
@@ -1054,6 +1114,7 @@
     }
 
 
+    @Override
     public void readExternal( ObjectInput in )
     	throws IOException, ClassNotFoundException {
 
Only in trove-3.0.3/templates/gnu/trove/list/array: _E_OffheapArrayList.template
diff -ur old-trove-3.0.3/templates/gnu/trove/list/_E_List.template trove-3.0.3/templates/gnu/trove/list/_E_List.template
--- old-trove-3.0.3/templates/gnu/trove/list/_E_List.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/list/_E_List.template	2014-03-03 15:19:33.000000000 -0800
@@ -44,6 +44,7 @@
      *
      * @return the value that represents null
      */
+    @Override
     public #e# getNoEntryValue();
 
 
@@ -52,6 +53,7 @@
      *
      * @return the number of values in the list.
      */
+    @Override
     public int size();
 
 
@@ -60,6 +62,7 @@
      *
      * @return true if the list is empty.
      */
+    @Override
     public boolean isEmpty();
 
 
@@ -69,6 +72,7 @@
      * @param val an <code>#e#</code> value
      * @return true if the list was modified by the add operation 
      */
+    @Override
     public boolean add(#e# val);
 
 
@@ -186,6 +190,7 @@
      * Flushes the internal state of the list, resetting the capacity
      * to the default.
      */
+    @Override
     public void clear();
 
 
@@ -195,6 +200,7 @@
      * @param value an <code>#e#</code> value
      * @return true if the list was modified by the remove operation.
      */
+    @Override
     public boolean remove( #e# value );
 
 
@@ -267,6 +273,7 @@
      *
      * @return an <code>#e#[]</code> value
      */
+    @Override
     public #e#[] toArray();
 
 
@@ -297,6 +304,7 @@
      * @param dest the array to copy into.
      * @return the array passed in.
      */
+    @Override
     public #e#[] toArray( #e#[] dest );
 
 
@@ -330,6 +338,7 @@
      * @param procedure a <code>T#E#Procedure</code> value
      * @return true if the procedure did not terminate prematurely.
      */
+    @Override
     public boolean forEach( T#E#Procedure procedure );
 
 
@@ -465,6 +474,7 @@
      * @param value an <code>#e#</code> value
      * @return true if value is in the list.
      */
+    @Override
     public boolean contains( #e# value );
 
 
diff -ur old-trove-3.0.3/templates/gnu/trove/list/linked/_E_LinkedList.template trove-3.0.3/templates/gnu/trove/list/linked/_E_LinkedList.template
--- old-trove-3.0.3/templates/gnu/trove/list/linked/_E_LinkedList.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/list/linked/_E_LinkedList.template	2014-03-03 15:19:33.000000000 -0800
@@ -67,21 +67,25 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public #e# getNoEntryValue() {
         return no_entry_value;
     }
 
     /** {@inheritDoc} */
+    @Override
     public int size() {
         return size;
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean isEmpty() {
         return size() == 0;
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean add(#e# val) {
         T#E#Link l = new T#E#Link(val);
         if (no(head)) {
@@ -99,6 +103,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public void add(#e#[] vals) {
         for (#e# val : vals) {
             add(val);
@@ -106,6 +111,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public void add(#e#[] vals, int offset, int length) {
         for (int i = 0; i < length; i++) {
             #e# val = vals[offset + i];
@@ -114,6 +120,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public void insert(int offset, #e# value) {
         T#E#LinkedList tmp = new T#E#LinkedList();
         tmp.add(value);
@@ -121,11 +128,13 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public void insert(int offset, #e#[] values) {
         insert(offset, link(values, 0, values.length));
     }
 
     /** {@inheritDoc} */
+    @Override
     public void insert(int offset, #e#[] values, int valOffset, int len) {
         insert(offset, link(values, valOffset, len));
     }
@@ -178,6 +187,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public #e# get(int offset) {
         if (offset > size)
             throw new IndexOutOfBoundsException("index " + offset + " exceeds size " + size);
@@ -210,43 +220,44 @@
             return getLink(tail, size() - 1, offset, false);
     }
 
-        /**
-         * Returns the link at absolute offset starting from given the initial link 'l' at index 'idx'
-         *
-         * @param l
-         * @param idx
-         * @param offset
-         * @return
-         */
-        private static T#E#Link getLink(T#E#Link l, int idx, int offset) {
-            return getLink(l, idx, offset, true);
-        }
-
-        /**
-         * Returns link at given absolute offset starting from link 'l' at index 'idx'
-         * @param l
-         * @param idx
-         * @param offset
-         * @param next
-         * @return
-         */
-        private static T#E#Link getLink(T#E#Link l, int idx, int offset, boolean next) {
-            int i = idx;
-            //
-            while (got(l)) {
-                if (i == offset) {
-                    return l;
-                }
+    /**
+        * Returns the link at absolute offset starting from given the initial link 'l' at index 'idx'
+        *
+        * @param l
+        * @param idx
+        * @param offset
+        * @return
+        */
+    private static T#E#Link getLink(T#E#Link l, int idx, int offset) {
+        return getLink(l, idx, offset, true);
+    }
 
-                i = i + (next ? 1 : -1);
-                l = next ? l.getNext() : l.getPrevious();
+    /**
+        * Returns link at given absolute offset starting from link 'l' at index 'idx'
+        * @param l
+        * @param idx
+        * @param offset
+        * @param next
+        * @return
+        */
+    private static T#E#Link getLink(T#E#Link l, int idx, int offset, boolean next) {
+        int i = idx;
+        //
+        while (got(l)) {
+            if (i == offset) {
+                return l;
             }
 
-            return null;
+            i = i + (next ? 1 : -1);
+            l = next ? l.getNext() : l.getPrevious();
         }
 
+        return null;
+    }
+
 
     /** {@inheritDoc} */
+    @Override
     public #e# set(int offset, #e# val) {
         if (offset > size)
             throw new IndexOutOfBoundsException("index " + offset + " exceeds size " + size);
@@ -262,11 +273,13 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public void set(int offset, #e#[] values) {
         set(offset, values, 0, values.length);
     }
 
     /** {@inheritDoc} */
+    @Override
     public void set(int offset, #e#[] values, int valOffset, int length) {
         for (int i = 0; i < length; i++) {
             #e# value = values[valOffset + i];
@@ -275,11 +288,13 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public #e# replace(int offset, #e# val) {
         return set(offset, val);
     }
 
     /** {@inheritDoc} */
+    @Override
     public void clear() {
         size = 0;
         //
@@ -288,6 +303,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean remove(#e# value) {
         boolean changed = false;
         for (T#E#Link l = head; got(l); l = l.getNext()) {
@@ -335,6 +351,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean containsAll(Collection<?> collection) {
         if (isEmpty())
             return false;
@@ -352,6 +369,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean containsAll(T#E#Collection collection) {
         if (isEmpty())
             return false;
@@ -365,6 +383,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean containsAll(#e#[] array) {
         if (isEmpty())
             return false;
@@ -377,6 +396,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean addAll(Collection<? extends #ET#> collection) {
         boolean ret = false;
         for (#ET# v : collection) {
@@ -388,6 +408,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean addAll(T#E#Collection collection) {
         boolean ret = false;
         for (T#E#Iterator it = collection.iterator(); it.hasNext();) {
@@ -400,6 +421,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean addAll(#e#[] array) {
         boolean ret = false;
         for (#e# i : array) {
@@ -411,6 +433,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean retainAll(Collection<?> collection) {
         boolean modified = false;
         T#E#Iterator iter = iterator();
@@ -424,6 +447,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean retainAll(T#E#Collection collection) {
         boolean modified = false;
         T#E#Iterator iter = iterator();
@@ -437,6 +461,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean retainAll(#e#[] array) {
         Arrays.sort(array);
 
@@ -452,6 +477,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean removeAll(Collection<?> collection) {
         boolean modified = false;
         T#E#Iterator iter = iterator();
@@ -465,6 +491,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean removeAll(T#E#Collection collection) {
         boolean modified = false;
         T#E#Iterator iter = iterator();
@@ -478,6 +505,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean removeAll(#e#[] array) {
         Arrays.sort(array);
 
@@ -493,6 +521,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public #e# removeAt(int offset) {
         T#E#Link l = getLinkAt(offset);
         if (no(l))
@@ -504,6 +533,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public void remove(int offset, int length) {
         for (int i = 0; i < length; i++) {
             removeAt(offset); // since the list shrinks we don't need to use offset+i to get the next entry ;)
@@ -511,6 +541,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public void transformValues(T#E#Function function) {
         for (T#E#Link l = head; got(l);) {
             //
@@ -521,6 +552,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public void reverse() {
         T#E#Link h = head;
         T#E#Link t = tail;
@@ -545,6 +577,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public void reverse(int from, int to) {
         if (from > to)
             throw new IllegalArgumentException("from > to : " + from + ">" + to);
@@ -579,6 +612,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public void shuffle(Random rand) {
         for (int i = 0; i < size; i++) {
             T#E#Link l = getLinkAt(rand.nextInt(size()));
@@ -588,6 +622,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public T#E#List subList(int begin, int end) {
         if (end < begin) {
             throw new IllegalArgumentException("begin index " + begin +
@@ -615,26 +650,31 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public #e#[] toArray() {
         return toArray(new #e#[size], 0, size);
     }
 
     /** {@inheritDoc} */
+    @Override
     public #e#[] toArray(int offset, int len) {
         return toArray(new #e#[len], offset, 0, len);
     }
 
     /** {@inheritDoc} */
+    @Override
     public #e#[] toArray(#e#[] dest) {
         return toArray(dest, 0, size);
     }
 
     /** {@inheritDoc} */
+    @Override
     public #e#[] toArray(#e#[] dest, int offset, int len) {
         return toArray(dest, offset, 0, len);
     }
 
     /** {@inheritDoc} */
+    @Override
     public #e#[] toArray(#e#[] dest, int source_pos, int dest_pos, int len) {
         if (len == 0) {
             return dest;             // nothing to copy
@@ -653,6 +693,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean forEach(T#E#Procedure procedure) {
         for (T#E#Link l = head; got(l); l = l.getNext()) {
             if (!procedure.execute(l.getValue()))
@@ -662,6 +703,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean forEachDescending(T#E#Procedure procedure) {
         for (T#E#Link l = tail; got(l); l = l.getPrevious()) {
             if (!procedure.execute(l.getValue()))
@@ -671,11 +713,13 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public void sort() {
         sort(0, size);
     }
 
     /** {@inheritDoc} */
+    @Override
     public void sort(int fromIndex, int toIndex) {
         T#E#List tmp = subList(fromIndex, toIndex);
         #e#[] vals = tmp.toArray();
@@ -684,11 +728,13 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public void fill(#e# val) {
         fill(0, size, val);
     }
 
     /** {@inheritDoc} */
+    @Override
     public void fill(int fromIndex, int toIndex, #e# val) {
         if (fromIndex < 0) {
             throw new IndexOutOfBoundsException("begin index can not be < 0");
@@ -714,11 +760,13 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public int binarySearch(#e# value) {
         return binarySearch(value, 0, size());
     }
 
     /** {@inheritDoc} */
+    @Override
     public int binarySearch(#e# value, int fromIndex, int toIndex) {
         if (fromIndex < 0) {
             throw new IndexOutOfBoundsException("begin index can not be < 0");
@@ -757,11 +805,13 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public int indexOf(#e# value) {
         return indexOf(0, value);
     }
 
     /** {@inheritDoc} */
+    @Override
     public int indexOf(int offset, #e# value) {
         int count = offset;
         for (T#E#Link l = getLinkAt(offset); got(l.getNext()); l = l.getNext()) {
@@ -775,11 +825,13 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public int lastIndexOf(#e# value) {
         return lastIndexOf(0, value);
     }
 
     /** {@inheritDoc} */
+    @Override
     public int lastIndexOf(int offset, #e# value) {
         if (isEmpty())
             return -1;
@@ -797,6 +849,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean contains(#e# value) {
         if (isEmpty())
             return false;
@@ -810,11 +863,13 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public T#E#Iterator iterator() {
         return new T#E#Iterator() {
             T#E#Link l = head;
             T#E#Link current;
 
+            @Override
             public #e# next() {
                 if (no(l))
                     throw new NoSuchElementException();
@@ -826,10 +881,12 @@
                 return ret;
             }
 
+            @Override
             public boolean hasNext() {
                 return got(l);
             }
 
+            @Override
             public void remove() {
                 if (current == null)
                     throw new IllegalStateException();
@@ -841,6 +898,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public T#E#List grep(T#E#Procedure condition) {
         T#E#List ret = new T#E#LinkedList();
         for (T#E#Link l = head; got(l); l = l.getNext()) {
@@ -851,6 +909,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public T#E#List inverseGrep(T#E#Procedure condition) {
         T#E#List ret = new T#E#LinkedList();
         for (T#E#Link l = head; got(l); l = l.getNext()) {
@@ -861,6 +920,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public #e# max() {
         #e# ret = #EMIN#;
 
@@ -876,6 +936,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public #e# min() {
         #e# ret = #EMAX#;
 
@@ -891,6 +952,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public #e# sum() {
         #e# sum = 0;
 
@@ -950,6 +1012,7 @@
          * @return true if additional invocations of the procedure are
          *         allowed.
          */
+        @Override
         public boolean execute(#e# value) {
             if (remove(value))
                 changed = true;
@@ -963,6 +1026,7 @@
     }
 
     /** {@inheritDoc} */
+    @Override
     public void writeExternal(ObjectOutput out) throws IOException {
         // VERSION
         out.writeByte(0);
@@ -980,6 +1044,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public void readExternal(ObjectInput in)
             throws IOException, ClassNotFoundException {
 
diff -ur old-trove-3.0.3/templates/gnu/trove/map/custom_hash/Object_E_CustomHashMap.template trove-3.0.3/templates/gnu/trove/map/custom_hash/Object_E_CustomHashMap.template
--- old-trove-3.0.3/templates/gnu/trove/map/custom_hash/Object_E_CustomHashMap.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/map/custom_hash/Object_E_CustomHashMap.template	2014-03-03 15:19:33.000000000 -0800
@@ -56,6 +56,7 @@
     static final long serialVersionUID = 1L;
 
     private final TObject#E#Procedure<K> PUT_ALL_PROC = new TObject#E#Procedure<K>() {
+        @Override
         public boolean execute(K key, #e# value) {
             put(key, value);
             return true;
@@ -144,6 +145,7 @@
      *
      * @param map the <tt>TObject#E#Map</tt> to be copied.
      */
+    @SuppressWarnings({ "rawtypes", "unchecked" })
     public TObject#E#CustomHashMap( HashingStrategy<? super K> strategy,
 		TObject#E#Map<? extends K> map ) {
 	
@@ -171,6 +173,7 @@
      * @param initialCapacity an <code>int</code> value
      * @return the actual capacity chosen
      */
+    @Override
     public int setUp( int initialCapacity ) {
         int capacity;
 
@@ -185,6 +188,8 @@
      *
      * @param newCapacity an <code>int</code> value
      */
+    @Override
+    @SuppressWarnings("unchecked")
     protected void rehash( int newCapacity ) {
         int oldCapacity = _set.length;
 
@@ -213,18 +218,21 @@
     // Query Operations
 
     /** {@inheritDoc} */
+    @Override
     public #e# getNoEntryValue() {
         return no_entry_value;
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean containsKey( Object key ) {
         return contains( key );
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean containsValue( #e# val ) {
         Object[] keys = _set;
         #e#[] vals = _values;
@@ -239,6 +247,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #e# get( Object key ) {
         int index = index( key );
         return index < 0 ? no_entry_value : _values[index];
@@ -248,6 +257,7 @@
     // Modification Operations
 
     /** {@inheritDoc} */
+    @Override
     public #e# put( K key, #e# value ) {
         int index = insertKey( key );
         return doPut( value, index );
@@ -255,6 +265,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #e# putIfAbsent( K key, #e# value ) {
         int index = insertKey(key);
         if ( index < 0 )
@@ -282,6 +293,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #e# remove( Object key ) {
         #e# prev = no_entry_value;
         int index = index(key);
@@ -300,6 +312,7 @@
      *
      * @param index an <code>int</code> value
      */
+    @Override
     protected void removeAt( int index ) {
         _values[index] = no_entry_value;
         super.removeAt( index );  // clear key, state; adjust size
@@ -309,6 +322,7 @@
     // Bulk Operations
 
     /** {@inheritDoc} */
+    @Override
     public void putAll( Map<? extends K, ? extends #ET#> map ) {
         Set<? extends Map.Entry<? extends K,? extends #ET#>> set = map.entrySet();
         for ( Map.Entry<? extends K,? extends #ET#> entry : set ) {
@@ -318,12 +332,14 @@
     
 
     /** {@inheritDoc} */
+    @Override
     public void putAll( TObject#E#Map<? extends K> map ){
         map.forEachEntry( PUT_ALL_PROC );
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public void clear() {
         super.clear();
         Arrays.fill( _set, 0, _set.length, FREE );
@@ -334,12 +350,15 @@
     // Views
 
     /** {@inheritDoc} */
+    @Override
     public Set<K> keySet() {
         return new KeyView();
     }
 
 
     /** {@inheritDoc} */
+    @Override
+    @SuppressWarnings("unchecked")
     public Object[] keys() {
         //noinspection unchecked
         K[] keys = ( K[] ) new Object[size()];
@@ -356,6 +375,8 @@
 
 
     /** {@inheritDoc} */
+    @Override
+    @SuppressWarnings("unchecked")
     public K[] keys( K[] a ) {
         int size = size();
         if ( a.length < size ) {
@@ -377,12 +398,14 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public T#E#Collection valueCollection() {
         return new T#E#ValueCollection();
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public #e#[] values() {
         #e#[] vals = new #e#[size()];
         #e#[] v = _values;
@@ -398,6 +421,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #e#[] values( #e#[] array ) {
         int size = size();
         if ( array.length < size ) {
@@ -422,13 +446,14 @@
     /**
      * @return an iterator over the entries in this map
      */
+    @Override
     public TObject#E#Iterator<K> iterator() {
-        return new TObject#E#HashIterator<K>( this );
+        return new TObject#E#HashIterator( this );
     }
 
 
     /** {@inheritDoc} */
-    @SuppressWarnings({"RedundantCast"})
+    @Override
     public boolean increment( K key ) {
         //noinspection RedundantCast
         return adjustValue( key, (#e#)1 );
@@ -436,6 +461,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean adjustValue( K key, #e# amount ) {
         int index = index(key);
         if ( index < 0 ) {
@@ -448,6 +474,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #e# adjustOrPutValue( final K key, final #e# adjust_amount,
 		final #e# put_amount ) {
 
@@ -479,6 +506,7 @@
      * @return false if the loop over the keys terminated because
      * the procedure returned false for some key.
      */
+    @Override
     public boolean forEachKey( TObjectProcedure<? super K> procedure ) {
         return forEach( procedure );
     }
@@ -491,6 +519,7 @@
      * @return false if the loop over the values terminated because
      * the procedure returned false for some value.
      */
+    @Override
     public boolean forEachValue( T#E#Procedure procedure ) {
         Object[] keys = _set;
         #e#[] values = _values;
@@ -512,6 +541,7 @@
      * @return false if the loop over the entries terminated because
      * the procedure returned false for some entry.
      */
+    @Override
     @SuppressWarnings({"unchecked"})
     public boolean forEachEntry( TObject#E#Procedure<? super K> procedure ) {
         Object[] keys = _set;
@@ -534,6 +564,8 @@
      * @param procedure determines which entries to keep
      * @return true if the map was modified.
      */
+    @Override
+    @SuppressWarnings({"unchecked"})
     public boolean retainEntries( TObject#E#Procedure<? super K> procedure ) {
         boolean modified = false;
         //noinspection unchecked
@@ -565,6 +597,7 @@
      *
      * @param function a <code>T#E#Function</code> value
      */
+    @Override
     public void transformValues( T#E#Function function ) {
         Object[] keys = _set;
         #e#[] values = _values;
@@ -585,6 +618,8 @@
      * @param other an <code>Object</code> value
      * @return a <code>boolean</code> value
      */
+    @Override
+    @SuppressWarnings("rawtypes")
     public boolean equals( Object other ) {
         if ( ! ( other instanceof TObject#E#Map ) ) {
             return false;
@@ -619,6 +654,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public int hashCode() {
         int hashcode = 0;
         Object[] keys = _set;
@@ -636,15 +672,17 @@
     /** a view onto the keys of the map. */
     protected class KeyView extends MapBackedView<K> {
 
-        @SuppressWarnings({"unchecked"})
+        @Override
         public Iterator<K> iterator() {
-            return new TObjectHashIterator( TObject#E#CustomHashMap.this );
+            return new TObjectHashIterator<K>( TObject#E#CustomHashMap.this );
         }
 
+        @Override
         public boolean removeElement( K key ) {
             return no_entry_value != TObject#E#CustomHashMap.this.remove( key );
         }
 
+        @Override
         public boolean containsElement( K key ) {
             return TObject#E#CustomHashMap.this.contains( key );
         }
@@ -658,28 +696,34 @@
 
         public abstract boolean containsElement( E key );
 
+        @Override
         @SuppressWarnings({"unchecked"})
         public boolean contains( Object key ) {
             return containsElement( (E) key );
         }
 
+        @Override
         @SuppressWarnings({"unchecked"})
         public boolean remove( Object o ) {
             return removeElement( (E) o );
         }
 
+        @Override
         public void clear() {
             TObject#E#CustomHashMap.this.clear();
         }
 
+        @Override
         public boolean add( E obj ) {
             throw new UnsupportedOperationException();
         }
 
+        @Override
         public int size() {
             return TObject#E#CustomHashMap.this.size();
         }
 
+        @Override
         public Object[] toArray() {
             Object[] result = new Object[size()];
             Iterator<E> e = iterator();
@@ -689,6 +733,8 @@
             return result;
         }
 
+        @Override
+        @SuppressWarnings("unchecked")
         public <T> T[] toArray( T[] a ) {
             int size = size();
             if ( a.length < size ) {
@@ -710,15 +756,17 @@
             return a;
         }
 
+        @Override
         public boolean isEmpty() {
             return TObject#E#CustomHashMap.this.isEmpty();
         }
 
+        @Override
         public boolean addAll( Collection<? extends E> collection ) {
             throw new UnsupportedOperationException();
         }
 
-        @SuppressWarnings({"SuspiciousMethodCalls"})
+        @Override
         public boolean retainAll( Collection<?> collection ) {
             boolean changed = false;
             Iterator<E> i = iterator();
@@ -736,45 +784,54 @@
     class T#E#ValueCollection implements T#E#Collection {
 
         /** {@inheritDoc} */
+        @Override
         public T#E#Iterator iterator() {
             return new TObject#E#ValueHashIterator();
         }
 
         /** {@inheritDoc} */
+        @Override
         public #e# getNoEntryValue() {
             return no_entry_value;
         }
 
         /** {@inheritDoc} */
+        @Override
         public int size() {
             return _size;
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean isEmpty() {
             return 0 == _size;
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean contains( #e# entry ) {
             return TObject#E#CustomHashMap.this.containsValue( entry );
         }
 
         /** {@inheritDoc} */
+        @Override
         public #e#[] toArray() {
             return TObject#E#CustomHashMap.this.values();
         }
 
         /** {@inheritDoc} */
+        @Override
         public #e#[] toArray( #e#[] dest ) {
             return TObject#E#CustomHashMap.this.values( dest );
         }
 
+        @Override
         public boolean add( #e# entry ) {
             throw new UnsupportedOperationException();
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean remove( #e# entry ) {
             #e#[] values = _values;
             Object[] set = _set;
@@ -789,6 +846,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean containsAll( Collection<?> collection ) {
             for ( Object element : collection ) {
                 if ( element instanceof #ET# ) {
@@ -804,6 +862,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean containsAll( T#E#Collection collection ) {
             T#E#Iterator iter = collection.iterator();
             while ( iter.hasNext() ) {
@@ -815,6 +874,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean containsAll( #e#[] array ) {
             for ( #e# element : array ) {
                 if ( ! TObject#E#CustomHashMap.this.containsValue( element ) ) {
@@ -825,22 +885,25 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean addAll( Collection<? extends #ET#> collection ) {
             throw new UnsupportedOperationException();
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean addAll( T#E#Collection collection ) {
             throw new UnsupportedOperationException();
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean addAll( #e#[] array ) {
             throw new UnsupportedOperationException();
         }
 
         /** {@inheritDoc} */
-        @SuppressWarnings({"SuspiciousMethodCalls"})
+        @Override
         public boolean retainAll( Collection<?> collection ) {
             boolean modified = false;
             T#E#Iterator iter = iterator();
@@ -854,6 +917,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean retainAll( T#E#Collection collection ) {
             if ( this == collection ) {
                 return false;
@@ -870,6 +934,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean retainAll( #e#[] array ) {
             boolean changed = false;
             Arrays.sort( array );
@@ -888,6 +953,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean removeAll( Collection<?> collection ) {
             boolean changed = false;
             for ( Object element : collection ) {
@@ -902,6 +968,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean removeAll( T#E#Collection collection ) {
             if ( this == collection ) {
                 clear();
@@ -919,6 +986,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean removeAll( #e#[] array ) {
             boolean changed = false;
             for ( int i = array.length; i-- > 0; ) {
@@ -930,11 +998,13 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public void clear() {
             TObject#E#CustomHashMap.this.clear();
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean forEach( T#E#Procedure procedure ) {
             return TObject#E#CustomHashMap.this.forEachValue( procedure );
         }
@@ -946,6 +1016,7 @@
             forEachValue( new T#E#Procedure() {
                 private boolean first = true;
 
+                @Override
                 public boolean execute( #e# value ) {
                     if ( first ) {
                         first = false;
@@ -982,17 +1053,20 @@
             }
 
             /** {@inheritDoc} */
+            @Override
             public boolean hasNext() {
                 return nextIndex() >= 0;
             }
 
             /** {@inheritDoc} */
+            @Override
             public #e# next() {
                 moveToNextIndex();
                 return _values[_index];
             }
 
             /** @{inheritDoc} */
+            @Override
             public void remove() {
                 if ( _expectedSize != _hash.size() ) {
                     throw new ConcurrentModificationException();
@@ -1050,7 +1124,7 @@
     }
 
 
-    class TObject#E#HashIterator<K> extends TObjectHashIterator<K>
+    class TObject#E#HashIterator extends TObjectHashIterator<K>
         implements TObject#E#Iterator<K> {
 
         /** the collection being iterated over */
@@ -1062,22 +1136,26 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public void advance() {
             moveToNextIndex();
         }
 
         /** {@inheritDoc} */
+        @Override
         @SuppressWarnings({"unchecked"})
         public K key() {
             return ( K ) _map._set[_index];
         }
 
         /** {@inheritDoc} */
+        @Override
         public #e# value() {
             return _map._values[_index];
         }
 
         /** {@inheritDoc} */
+        @Override
         public #e# setValue( #e# val ) {
             #e# old = value();
             _map._values[_index] = val;
@@ -1088,6 +1166,7 @@
 
     // Externalization
 
+    @Override
     public void writeExternal( ObjectOutput out ) throws IOException {
         // VERSION
         out.writeByte( 0 );
@@ -1114,6 +1193,8 @@
     }
 
 
+    @Override
+    @SuppressWarnings("unchecked")
     public void readExternal( ObjectInput in )
         throws IOException, ClassNotFoundException {
 
@@ -1144,10 +1225,12 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public String toString() {
         final StringBuilder buf = new StringBuilder("{");
         forEachEntry( new TObject#E#Procedure<K>() {
             private boolean first = true;
+            @Override
             public boolean execute( K key, #e# value ) {
                 if ( first ) first = false;
                 else buf.append( "," );
diff -ur old-trove-3.0.3/templates/gnu/trove/map/_E_ObjectMap.template trove-3.0.3/templates/gnu/trove/map/_E_ObjectMap.template
--- old-trove-3.0.3/templates/gnu/trove/map/_E_ObjectMap.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/map/_E_ObjectMap.template	2014-03-03 15:19:33.000000000 -0800
@@ -407,6 +407,7 @@
      * @param o object to be compared for equality with this map
      * @return <tt>true</tt> if the specified object is equal to this map
      */
+    @Override
     boolean equals( Object o );
 
 
@@ -423,5 +424,6 @@
      * @see Object#equals(Object)
      * @see #equals(Object)
      */
+    @Override
     int hashCode();
-}
\ No newline at end of file
+}
diff -ur old-trove-3.0.3/templates/gnu/trove/map/hash/_E_ObjectHashMap.template trove-3.0.3/templates/gnu/trove/map/hash/_E_ObjectHashMap.template
--- old-trove-3.0.3/templates/gnu/trove/map/hash/_E_ObjectHashMap.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/map/hash/_E_ObjectHashMap.template	2014-03-03 15:19:33.000000000 -0800
@@ -58,6 +58,7 @@
     static final long serialVersionUID = 1L;
 
     private final T#E#ObjectProcedure<V> PUT_ALL_PROC = new T#E#ObjectProcedure<V>() {
+        @Override
         public boolean execute( #e# key, V value) {
             put( key, value );
             return true;
@@ -135,6 +136,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     @SuppressWarnings({"unchecked"})
     protected int setUp( int initialCapacity ) {
         int capacity;
@@ -146,6 +148,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     @SuppressWarnings({"unchecked"})
     protected void rehash( int newCapacity ) {
         int oldCapacity = _set.length;
@@ -171,18 +174,21 @@
     // Query Operations
 
     /** {@inheritDoc} */
+    @Override
     public #e# getNoEntryKey() {
         return no_entry_key;
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean containsKey( #e# key ) {
         return contains( key );
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean containsValue( Object val ) {
         byte[] states = _states;
         V[] vals = _values;
@@ -208,6 +214,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public V get( #e# key ) {
         int index = index( key );
         return index < 0 ? null : _values[index];
@@ -217,6 +224,7 @@
     // Modification Operations
 
     /** {@inheritDoc} */
+    @Override
     public V put( #e# key, V value ) {
         int index = insertKey( key );
         return doPut( value, index );
@@ -224,6 +232,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public V putIfAbsent( #e# key, V value ) {
         int index = insertKey( key );
         if ( index < 0 )
@@ -232,7 +241,6 @@
     }
 
 
-    @SuppressWarnings({"unchecked"})
     private V doPut( V value, int index ) {
         V previous = null;
         boolean isNewMapping = true;
@@ -253,6 +261,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public V remove( #e# key ) {
         V prev = null;
         int index = index( key );
@@ -265,6 +274,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     protected void removeAt( int index ) {
         _values[index] = null;
         super.removeAt( index );  // clear key, state; adjust size
@@ -274,6 +284,7 @@
     // Bulk Operations
 
     /** {@inheritDoc} */
+    @Override
     public void putAll( Map<? extends #ET#, ? extends V> map ) {
         Set<? extends Map.Entry<? extends #ET#,? extends V>> set = map.entrySet();
         for ( Map.Entry<? extends #ET#,? extends V> entry : set ) {
@@ -283,12 +294,14 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public void putAll( T#E#ObjectMap<? extends V> map ){
         map.forEachEntry( PUT_ALL_PROC );
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public void clear() {
         super.clear();
         Arrays.fill( _set, 0, _set.length, no_entry_key );
@@ -300,13 +313,14 @@
     // Views
 
     /** {@inheritDoc} */
+    @Override
     public T#E#Set keySet() {
         return new KeyView();
     }
 
 
     /** {@inheritDoc} */
-    @SuppressWarnings({"unchecked"})
+    @Override
     public #e#[] keys() {
         #e#[] keys = new #e#[size()];
         #e#[] k = _set;
@@ -322,8 +336,8 @@
 
 
     /** {@inheritDoc} */
-    @SuppressWarnings({"unchecked"})
-   public #e#[] keys( #e#[] dest ) {
+    @Override
+    public #e#[] keys( #e#[] dest ) {
         if ( dest.length < _size ) {
 			dest = new #e#[_size];
         }
@@ -341,13 +355,14 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public Collection<V> valueCollection() {
         return new ValueView();
     }
 
 
     /** {@inheritDoc} */
-    @SuppressWarnings({"unchecked"})
+    @Override
     public Object[] values() {
         Object[] vals = new Object[size()];
         V[] v = _values;
@@ -363,6 +378,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     @SuppressWarnings({"unchecked"})
     public V[] values( V[] dest ) {
         if ( dest.length < _size ) {
@@ -383,18 +399,21 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public T#E#ObjectIterator<V> iterator() {
-        return new T#E#ObjectHashIterator<V>( this );
+        return new T#E#ObjectHashIterator( this );
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean forEachKey( T#E#Procedure procedure ) {
         return forEach( procedure );
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean forEachValue( TObjectProcedure<? super V> procedure ) {
         byte[] states = _states;
         V[] values = _values;
@@ -408,7 +427,7 @@
 
 
     /** {@inheritDoc} */
-    @SuppressWarnings({"unchecked"})
+    @Override
     public boolean forEachEntry( T#E#ObjectProcedure<? super V> procedure ) {
         byte[] states = _states;
         #e#[] keys = _set;
@@ -423,7 +442,7 @@
 
 
     /** {@inheritDoc} */
-    @SuppressWarnings({"unchecked"})
+    @Override
     public boolean retainEntries( T#E#ObjectProcedure<? super V> procedure ) {
         boolean modified = false;
         byte[] states = _states;
@@ -449,6 +468,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public void transformValues( TObjectFunction<V,V> function ) {
         byte[] states = _states;
         V[] values = _values;
@@ -463,6 +483,8 @@
     // Comparison and hashing
 
     /** {@inheritDoc} */
+    @Override
+    @SuppressWarnings("rawtypes")
     public boolean equals( Object other ) {
         if ( ! ( other instanceof T#E#ObjectMap ) ) {
             return false;
@@ -495,6 +517,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public int hashCode() {
         int hashcode = 0;
         V[] values = _values;
@@ -512,51 +535,61 @@
     class KeyView implements T#E#Set {
 
         /** {@inheritDoc} */
+        @Override
         public #e# getNoEntryValue() {
             return no_entry_key;
         }
 
         /** {@inheritDoc} */
+        @Override
         public int size() {
             return _size;
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean isEmpty() {
             return _size == 0;
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean contains( #e# entry ) {
             return T#E#ObjectHashMap.this.containsKey( entry );
         }
 
         /** {@inheritDoc} */
+        @Override
         public T#E#Iterator iterator() {
             return new T#E#HashIterator( T#E#ObjectHashMap.this );
         }
 
         /** {@inheritDoc} */
+        @Override
         public #e#[] toArray() {
             return keys();
         }
 
         /** {@inheritDoc} */
+        @Override
         public #e#[] toArray( #e#[] dest ) {
             return keys( dest );
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean add( #e# entry ) {
             throw new UnsupportedOperationException();
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean remove( #e# entry ) {
             return null != T#E#ObjectHashMap.this.remove( entry );
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean containsAll( Collection<?> collection ) {
            for ( Object element : collection ) {
                 if ( ! T#E#ObjectHashMap.this.containsKey(
@@ -569,6 +602,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean containsAll( T#E#Collection collection ) {
             if ( collection == this ) {
                 return true;
@@ -583,6 +617,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean containsAll( #e#[] array ) {
             for ( #e# element : array  ) {
                 if ( ! T#E#ObjectHashMap.this.containsKey( element ) ) {
@@ -593,21 +628,25 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean addAll( Collection<? extends #ET#> collection ) {
             throw new UnsupportedOperationException();
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean addAll( T#E#Collection collection ) {
             throw new UnsupportedOperationException();
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean addAll( #e#[] array ) {
             throw new UnsupportedOperationException();
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean retainAll( Collection<?> collection ) {
             boolean modified = false;
             T#E#Iterator iter = iterator();
@@ -622,6 +661,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean retainAll( T#E#Collection collection ) {
             if ( this == collection ) {
                 return false;
@@ -638,6 +678,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean retainAll( #e#[] array ) {
             boolean changed = false;
             Arrays.sort( array );
@@ -654,6 +695,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean removeAll( Collection<?> collection ) {
             boolean changed = false;
             for ( Object element : collection ) {
@@ -668,6 +710,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean removeAll( T#E#Collection collection ) {
             if ( collection == this ) {
                 clear();
@@ -685,6 +728,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean removeAll( #e#[] array ) {
             boolean changed = false;
             for ( int i = array.length; i-- > 0; ) {
@@ -696,16 +740,19 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public void clear() {
             T#E#ObjectHashMap.this.clear();
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean forEach( T#E#Procedure procedure ) {
             return T#E#ObjectHashMap.this.forEachKey( procedure );
         }
 
         /** {@inheritDoc) */
+        @Override
         public boolean equals( Object other ) {
             if (! ( other instanceof T#E#Set ) ) {
                 return false;
@@ -725,6 +772,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public int hashCode() {
             int hashcode = 0;
             for ( int i = _states.length; i-- > 0; ) {
@@ -736,6 +784,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public String toString() {
             final StringBuilder buf = new StringBuilder("{");
             boolean first = true;
@@ -762,6 +811,7 @@
             }
 
             /** {@inheritDoc} */
+            @Override
             public #e# next() {
                 moveToNextIndex();
                 return _hash._set[_index];
@@ -773,19 +823,22 @@
     /** a view onto the values of the map. */
     protected class ValueView extends MapBackedView<V> {
 
-        @SuppressWarnings({"unchecked"})
+        @Override
         public Iterator<V> iterator() {
             return new T#E#ObjectValueHashIterator( T#E#ObjectHashMap.this ) {
+                @Override
                 protected V objectAtIndex( int index ) {
                     return _values[index];
                 }
             };
         }
 
+        @Override
         public boolean containsElement( V value ) {
             return containsValue( value );
         }
 
+        @Override
         public boolean removeElement( V value ) {
             V[] values = _values;
             byte[] states = _states;
@@ -805,9 +858,9 @@
         class T#E#ObjectValueHashIterator extends THashPrimitiveIterator
 	        implements Iterator<V> {
 
-            protected final T#E#ObjectHashMap _map;
+            protected final T#E#ObjectHashMap<V> _map;
 
-            public T#E#ObjectValueHashIterator( T#E#ObjectHashMap map ) {
+            public T#E#ObjectValueHashIterator( T#E#ObjectHashMap<V> map ) {
                 super( map );
                 _map = map;
             }
@@ -823,7 +876,7 @@
             }
 
             /** {@inheritDoc} */
-            @SuppressWarnings("unchecked")
+            @Override
             public V next() {
                 moveToNextIndex();
 	            return ( V ) _map._values[_index];
@@ -835,34 +888,41 @@
     private abstract class MapBackedView<E> extends AbstractSet<E>
             implements Set<E>, Iterable<E> {
 
+        @Override
         public abstract Iterator<E> iterator();
 
         public abstract boolean removeElement( E key );
 
         public abstract boolean containsElement( E key );
 
+        @Override
         @SuppressWarnings({"unchecked"})
         public boolean contains( Object key ) {
             return containsElement( (E) key );
         }
 
+        @Override
         @SuppressWarnings({"unchecked"})
         public boolean remove( Object o ) {
             return removeElement( (E) o );
         }
 
+        @Override
         public void clear() {
             T#E#ObjectHashMap.this.clear();
         }
 
+        @Override
         public boolean add( E obj ) {
             throw new UnsupportedOperationException();
         }
 
+        @Override
         public int size() {
             return T#E#ObjectHashMap.this.size();
         }
 
+        @Override
         public Object[] toArray() {
             Object[] result = new Object[size()];
             Iterator<E> e = iterator();
@@ -872,6 +932,7 @@
             return result;
         }
 
+        @Override
         @SuppressWarnings({"unchecked"})
         public <T> T[] toArray( T[] a ) {
             int size = size();
@@ -893,15 +954,17 @@
             return a;
         }
 
+        @Override
         public boolean isEmpty() {
             return T#E#ObjectHashMap.this.isEmpty();
         }
 
+        @Override
         public boolean addAll( Collection<? extends E> collection ) {
             throw new UnsupportedOperationException();
         }
 
-        @SuppressWarnings({"SuspiciousMethodCalls"})
+        @Override
         public boolean retainAll( Collection<?> collection ) {
             boolean changed = false;
             Iterator<E> i = iterator();
@@ -916,7 +979,7 @@
     }
 
 
-    class T#E#ObjectHashIterator<V> extends THashPrimitiveIterator
+    class T#E#ObjectHashIterator extends THashPrimitiveIterator
         implements T#E#ObjectIterator<V> {
 
         /** the collection being iterated over */
@@ -933,21 +996,25 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public void advance() {
             moveToNextIndex();
         }
 
         /** {@inheritDoc} */
+        @Override
         public #e# key() {
             return _map._set[_index];
         }
 
         /** {@inheritDoc} */
+        @Override
         public V value() {
             return _map._values[_index];
         }
 
         /** {@inheritDoc} */
+        @Override
         public V setValue( V val ) {
             V old = value();
             _map._values[_index] = val;
@@ -956,6 +1023,7 @@
     }
 
 
+    @Override
     public void writeExternal( ObjectOutput out ) throws IOException {
     	// VERSION
     	out.writeByte( 0 );
@@ -978,7 +1046,7 @@
         }
     }
 
-
+    @Override
     @SuppressWarnings({"unchecked"})
     public void readExternal( ObjectInput in )
     	throws IOException, ClassNotFoundException {
@@ -1005,10 +1073,12 @@
     }
 
 
+    @Override
     public String toString() {
         final StringBuilder buf = new StringBuilder("{");
         forEachEntry(new T#E#ObjectProcedure<V>() {
             private boolean first = true;
+            @Override
             public boolean execute(#e# key, Object value) {
                 if ( first ) first = false;
                 else buf.append( "," );
diff -ur old-trove-3.0.3/templates/gnu/trove/map/hash/_K__V_HashMap.template trove-3.0.3/templates/gnu/trove/map/hash/_K__V_HashMap.template
--- old-trove-3.0.3/templates/gnu/trove/map/hash/_K__V_HashMap.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/map/hash/_K__V_HashMap.template	2014-03-03 15:19:33.000000000 -0800
@@ -156,6 +156,7 @@
      * @param initialCapacity an <code>int</code> value
      * @return the actual capacity chosen
      */
+    @Override
     protected int setUp( int initialCapacity ) {
         int capacity;
 
@@ -171,6 +172,7 @@
      * @param newCapacity an <code>int</code> value
      */
      /** {@inheritDoc} */
+    @Override
     protected void rehash( int newCapacity ) {
         int oldCapacity = _set.length;
         
@@ -193,6 +195,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #v# put( #k# key, #v# value ) {
         int index = insertKey( key );
         return doPut( key, value, index );
@@ -200,6 +203,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #v# putIfAbsent( #k# key, #v# value ) {
         int index = insertKey( key );
         if (index < 0)
@@ -227,6 +231,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public void putAll( Map<? extends #KT#, ? extends #VT#> map ) {
         ensureCapacity( map.size() );
         // could optimize this for cases when map instanceof THashMap
@@ -237,6 +242,7 @@
     
 
     /** {@inheritDoc} */
+    @Override
     public void putAll( T#K##V#Map map ) {
         ensureCapacity( map.size() );
         T#K##V#Iterator iter = map.iterator();
@@ -248,6 +254,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #v# get( #k# key ) {
         int index = index( key );
         return index < 0 ? no_entry_value : _values[index];
@@ -255,6 +262,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public void clear() {
         super.clear();
         Arrays.fill( _set, 0, _set.length, no_entry_key );
@@ -264,12 +272,14 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean isEmpty() {
         return 0 == _size;
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public #v# remove( #k# key ) {
         #v# prev = no_entry_value;
         int index = index( key );
@@ -282,6 +292,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     protected void removeAt( int index ) {
         _values[index] = no_entry_value;
         super.removeAt( index );  // clear key, state; adjust size
@@ -289,12 +300,14 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public T#K#Set keySet() {
         return new TKeyView();
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public #k#[] keys() {
         #k#[] keys = new #k#[size()];
         #k#[] k = _set;
@@ -310,6 +323,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #k#[] keys( #k#[] array ) {
         int size = size();
         if ( array.length < size ) {
@@ -329,12 +343,14 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public T#V#Collection valueCollection() {
         return new TValueView();
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public #v#[] values() {
         #v#[] vals = new #v#[size()];
         #v#[] v = _values;
@@ -350,6 +366,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #v#[] values( #v#[] array ) {
         int size = size();
         if ( array.length < size ) {
@@ -369,6 +386,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean containsValue( #v# val ) {
         byte[] states = _states;
         #v#[] vals = _values;
@@ -383,24 +401,28 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean containsKey( #k# key ) {
         return contains( key );
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public T#K##V#Iterator iterator() {
         return new T#K##V#HashIterator( this );
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean forEachKey( T#K#Procedure procedure ) {
         return forEach( procedure );
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean forEachValue( T#V#Procedure procedure ) {
         byte[] states = _states;
         #v#[] values = _values;
@@ -414,6 +436,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean forEachEntry( T#K##V#Procedure procedure ) {
         byte[] states = _states;
         #k#[] keys = _set;
@@ -428,6 +451,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public void transformValues( T#V#Function function ) {
         byte[] states = _states;
         #v#[] values = _values;
@@ -440,6 +464,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean retainEntries( T#K##V#Procedure procedure ) {
         boolean modified = false;
         byte[] states = _states;
@@ -466,12 +491,14 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean increment( #k# key ) {
         return adjustValue( key, ( #v# ) 1 );
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean adjustValue( #k# key, #v# amount ) {
         int index = index( key );
         if (index < 0) {
@@ -484,6 +511,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #v# adjustOrPutValue( #k# key, #v# adjust_amount, #v# put_amount ) {
         int index = insertKey( key );
         final boolean isNewMapping;
@@ -497,8 +525,6 @@
             isNewMapping = true;
         }
 
-        byte previousState = _states[index];
-
         if ( isNewMapping ) {
             postInsertHook(consumeFreeSlot);
         }
@@ -511,42 +537,49 @@
     protected class TKeyView implements T#K#Set {
 
         /** {@inheritDoc} */
+        @Override
         public T#K#Iterator iterator() {
             return new T#K##V#KeyHashIterator( T#K##V#HashMap.this );
         }
 
 
         /** {@inheritDoc} */
+        @Override
         public #k# getNoEntryValue() {
             return no_entry_key;
         }
 
 
         /** {@inheritDoc} */
+        @Override
         public int size() {
             return _size;
         }
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean isEmpty() {
             return 0 == _size;
         }
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean contains( #k# entry ) {
             return T#K##V#HashMap.this.contains( entry );
         }
 
 
         /** {@inheritDoc} */
+        @Override
         public #k#[] toArray() {
             return T#K##V#HashMap.this.keys();
         }
 
 
         /** {@inheritDoc} */
+        @Override
         public #k#[] toArray( #k#[] dest ) {
             return T#K##V#HashMap.this.keys( dest );
         }
@@ -557,18 +590,21 @@
          * <p/>
          * {@inheritDoc}
          */
+        @Override
         public boolean add( #k# entry ) {
             throw new UnsupportedOperationException();
         }
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean remove( #k# entry ) {
             return no_entry_value != T#K##V#HashMap.this.remove( entry );
         }
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean containsAll( Collection<?> collection ) {
             for ( Object element : collection ) {
                 if ( element instanceof #KT# ) {
@@ -585,6 +621,7 @@
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean containsAll( T#K#Collection collection ) {
             T#K#Iterator iter = collection.iterator();
             while ( iter.hasNext() ) {
@@ -597,6 +634,7 @@
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean containsAll( #k#[] array ) {
             for ( #k# element : array ) {
                 if ( ! T#K##V#HashMap.this.contains( element ) ) {
@@ -612,6 +650,7 @@
          * <p/>
          * {@inheritDoc}
          */
+        @Override
         public boolean addAll( Collection<? extends #KT#> collection ) {
             throw new UnsupportedOperationException();
         }
@@ -622,6 +661,7 @@
          * <p/>
          * {@inheritDoc}
          */
+        @Override
         public boolean addAll( T#K#Collection collection ) {
             throw new UnsupportedOperationException();
         }
@@ -632,13 +672,14 @@
          * <p/>
          * {@inheritDoc}
          */
+        @Override
         public boolean addAll( #k#[] array ) {
             throw new UnsupportedOperationException();
         }
 
 
         /** {@inheritDoc} */
-        @SuppressWarnings({"SuspiciousMethodCalls"})
+        @Override
         public boolean retainAll( Collection<?> collection ) {
             boolean modified = false;
             T#K#Iterator iter = iterator();
@@ -653,6 +694,7 @@
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean retainAll( T#K#Collection collection ) {
             if ( this == collection ) {
                 return false;
@@ -670,6 +712,7 @@
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean retainAll( #k#[] array ) {
             boolean changed = false;
             Arrays.sort( array );
@@ -687,6 +730,7 @@
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean removeAll( Collection<?> collection ) {
             boolean changed = false;
             for ( Object element : collection ) {
@@ -702,6 +746,7 @@
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean removeAll( T#K#Collection collection ) {
             if ( this == collection ) {
                 clear();
@@ -720,6 +765,7 @@
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean removeAll( #k#[] array ) {
             boolean changed = false;
             for ( int i = array.length; i-- > 0; ) {
@@ -732,12 +778,14 @@
 
 
         /** {@inheritDoc} */
+        @Override
         public void clear() {
             T#K##V#HashMap.this.clear();
         }
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean forEach( T#K#Procedure procedure ) {
             return T#K##V#HashMap.this.forEachKey( procedure );
         }
@@ -781,7 +829,7 @@
             forEachKey( new T#K#Procedure() {
                 private boolean first = true;
 
-
+                @Override
                 public boolean execute( #k# key ) {
                     if ( first ) {
                         first = false;
@@ -803,54 +851,62 @@
     protected class TValueView implements T#V#Collection {
 
         /** {@inheritDoc} */
+        @Override
         public T#V#Iterator iterator() {
             return new T#K##V#ValueHashIterator( T#K##V#HashMap.this );
         }
 
 
         /** {@inheritDoc} */
+        @Override
         public #v# getNoEntryValue() {
             return no_entry_value;
         }
 
 
         /** {@inheritDoc} */
+        @Override
         public int size() {
             return _size;
         }
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean isEmpty() {
             return 0 == _size;
         }
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean contains( #v# entry ) {
             return T#K##V#HashMap.this.containsValue( entry );
         }
 
 
         /** {@inheritDoc} */
+        @Override
         public #v#[] toArray() {
             return T#K##V#HashMap.this.values();
         }
 
 
         /** {@inheritDoc} */
+        @Override
         public #v#[] toArray( #v#[] dest ) {
             return T#K##V#HashMap.this.values( dest );
         }
 
 
-
+        @Override
         public boolean add( #v# entry ) {
             throw new UnsupportedOperationException();
         }
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean remove( #v# entry ) {
             #v#[] values = _values;
             #k#[] set = _set;
@@ -866,6 +922,7 @@
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean containsAll( Collection<?> collection ) {
             for ( Object element : collection ) {
                 if ( element instanceof #VT# ) {
@@ -882,6 +939,7 @@
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean containsAll( T#V#Collection collection ) {
             T#V#Iterator iter = collection.iterator();
             while ( iter.hasNext() ) {
@@ -894,6 +952,7 @@
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean containsAll( #v#[] array ) {
             for ( #v# element : array ) {
                 if ( ! T#K##V#HashMap.this.containsValue( element ) ) {
@@ -905,25 +964,28 @@
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean addAll( Collection<? extends #VT#> collection ) {
             throw new UnsupportedOperationException();
         }
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean addAll( T#V#Collection collection ) {
             throw new UnsupportedOperationException();
         }
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean addAll( #v#[] array ) {
             throw new UnsupportedOperationException();
         }
 
 
         /** {@inheritDoc} */
-        @SuppressWarnings({"SuspiciousMethodCalls"})
+        @Override
         public boolean retainAll( Collection<?> collection ) {
             boolean modified = false;
             T#V#Iterator iter = iterator();
@@ -938,6 +1000,7 @@
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean retainAll( T#V#Collection collection ) {
             if ( this == collection ) {
                 return false;
@@ -955,6 +1018,7 @@
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean retainAll( #v#[] array ) {
             boolean changed = false;
             Arrays.sort( array );
@@ -972,6 +1036,7 @@
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean removeAll( Collection<?> collection ) {
             boolean changed = false;
             for ( Object element : collection ) {
@@ -987,6 +1052,7 @@
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean removeAll( T#V#Collection collection ) {
             if ( this == collection ) {
                 clear();
@@ -1005,6 +1071,7 @@
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean removeAll( #v#[] array ) {
             boolean changed = false;
             for ( int i = array.length; i-- > 0; ) {
@@ -1017,12 +1084,14 @@
 
 
         /** {@inheritDoc} */
+        @Override
         public void clear() {
             T#K##V#HashMap.this.clear();
         }
 
 
         /** {@inheritDoc} */
+        @Override
         public boolean forEach( T#V#Procedure procedure ) {
             return T#K##V#HashMap.this.forEachValue( procedure );
         }
@@ -1035,6 +1104,7 @@
             forEachValue( new T#V#Procedure() {
                 private boolean first = true;
 
+                @Override
                 public boolean execute( #v# value ) {
                     if ( first ) {
                         first = false;
@@ -1064,12 +1134,14 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public #k# next() {
             moveToNextIndex();
             return _set[_index];
         }
 
         /** @{inheritDoc} */
+        @Override
         public void remove() {
             if ( _expectedSize != _hash.size() ) {
                 throw new ConcurrentModificationException();
@@ -1102,12 +1174,14 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public #v# next() {
             moveToNextIndex();
             return _values[_index];
         }
 
         /** @{inheritDoc} */
+        @Override
         public void remove() {
             if ( _expectedSize != _hash.size() ) {
                 throw new ConcurrentModificationException();
@@ -1139,21 +1213,25 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public void advance() {
             moveToNextIndex();
         }
 
         /** {@inheritDoc} */
+        @Override
         public #k# key() {
             return _set[_index];
         }
 
         /** {@inheritDoc} */
+        @Override
         public #v# value() {
             return _values[_index];
         }
 
         /** {@inheritDoc} */
+        @Override
         public #v# setValue( #v# val ) {
             #v# old = value();
             _values[_index] = val;
@@ -1161,6 +1239,7 @@
         }
 
         /** @{inheritDoc} */
+        @Override
         public void remove() {
             if ( _expectedSize != _hash.size() ) {
                 throw new ConcurrentModificationException();
@@ -1229,6 +1308,7 @@
         final StringBuilder buf = new StringBuilder( "{" );
         forEachEntry( new T#K##V#Procedure() {
             private boolean first = true;
+            @Override
             public boolean execute( #k# key, #v# value ) {
                 if ( first ) first = false;
                 else buf.append( ", " );
@@ -1245,6 +1325,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public void writeExternal(ObjectOutput out) throws IOException {
         // VERSION
     	out.writeByte( 0 );
@@ -1266,6 +1347,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
         // VERSION
     	in.readByte();
Only in trove-3.0.3/templates/gnu/trove/map/hash: _K__V_OffheapHashMap.template
diff -ur old-trove-3.0.3/templates/gnu/trove/map/hash/Object_E_HashMap.template trove-3.0.3/templates/gnu/trove/map/hash/Object_E_HashMap.template
--- old-trove-3.0.3/templates/gnu/trove/map/hash/Object_E_HashMap.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/map/hash/Object_E_HashMap.template	2014-03-03 15:19:33.000000000 -0800
@@ -59,6 +59,7 @@
     static final long serialVersionUID = 1L;
 
     private final TObject#E#Procedure<K> PUT_ALL_PROC = new TObject#E#Procedure<K>() {
+        @Override
         public boolean execute(K key, #e# value) {
             put(key, value);
             return true;
@@ -134,6 +135,7 @@
      *
      * @param map the <tt>TObject#E#Map</tt> to be copied.
      */
+    @SuppressWarnings("rawtypes")
     public TObject#E#HashMap( TObject#E#Map<? extends K> map ) {
         this( map.size(), 0.5f, map.getNoEntryValue() );
         if ( map instanceof TObject#E#HashMap ) {
@@ -157,6 +159,7 @@
      * @param initialCapacity an <code>int</code> value
      * @return the actual capacity chosen
      */
+    @Override
     public int setUp( int initialCapacity ) {
         int capacity;
 
@@ -171,6 +174,8 @@
      *
      * @param newCapacity an <code>int</code> value
      */
+    @Override
+    @SuppressWarnings("unchecked")
     protected void rehash( int newCapacity ) {
         int oldCapacity = _set.length;
 
@@ -200,18 +205,21 @@
     // Query Operations
 
     /** {@inheritDoc} */
+    @Override
     public #e# getNoEntryValue() {
         return no_entry_value;
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean containsKey( Object key ) {
         return contains( key );
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean containsValue( #e# val ) {
         Object[] keys = _set;
         #e#[] vals = _values;
@@ -226,6 +234,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #e# get( Object key ) {
         int index = index( key );
         return index < 0 ? no_entry_value : _values[index];
@@ -235,6 +244,7 @@
     // Modification Operations
 
     /** {@inheritDoc} */
+    @Override
     public #e# put( K key, #e# value ) {
         int index = insertKey( key );
         return doPut( value, index );
@@ -242,6 +252,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #e# putIfAbsent( K key, #e# value ) {
         int index = insertKey(key);
         if ( index < 0 )
@@ -269,6 +280,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #e# remove( Object key ) {
         #e# prev = no_entry_value;
         int index = index(key);
@@ -287,6 +299,7 @@
      *
      * @param index an <code>int</code> value
      */
+    @Override
     protected void removeAt( int index ) {
         _values[index] = no_entry_value;
         super.removeAt( index );  // clear key, state; adjust size
@@ -296,6 +309,7 @@
     // Bulk Operations
 
     /** {@inheritDoc} */
+    @Override
     public void putAll( Map<? extends K, ? extends #ET#> map ) {
         Set<? extends Map.Entry<? extends K,? extends #ET#>> set = map.entrySet();
         for ( Map.Entry<? extends K,? extends #ET#> entry : set ) {
@@ -305,12 +319,14 @@
     
 
     /** {@inheritDoc} */
+    @Override
     public void putAll( TObject#E#Map<? extends K> map ){
         map.forEachEntry( PUT_ALL_PROC );
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public void clear() {
         super.clear();
         Arrays.fill( _set, 0, _set.length, FREE );
@@ -321,12 +337,15 @@
     // Views
 
     /** {@inheritDoc} */
+    @Override
     public Set<K> keySet() {
         return new KeyView();
     }
 
 
     /** {@inheritDoc} */
+    @Override
+    @SuppressWarnings("unchecked")
     public Object[] keys() {
         //noinspection unchecked
         K[] keys = ( K[] ) new Object[size()];
@@ -343,6 +362,8 @@
 
 
     /** {@inheritDoc} */
+    @Override
+    @SuppressWarnings("unchecked")
     public K[] keys( K[] a ) {
         int size = size();
         if ( a.length < size ) {
@@ -364,12 +385,14 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public T#E#Collection valueCollection() {
         return new T#E#ValueCollection();
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public #e#[] values() {
         #e#[] vals = new #e#[size()];
         #e#[] v = _values;
@@ -385,6 +408,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #e#[] values( #e#[] array ) {
         int size = size();
         if ( array.length < size ) {
@@ -409,13 +433,14 @@
     /**
      * @return an iterator over the entries in this map
      */
+    @Override
     public TObject#E#Iterator<K> iterator() {
-        return new TObject#E#HashIterator<K>( this );
+        return new TObject#E#HashIterator( this );
     }
 
 
     /** {@inheritDoc} */
-    @SuppressWarnings({"RedundantCast"})
+    @Override
     public boolean increment( K key ) {
         //noinspection RedundantCast
         return adjustValue( key, (#e#)1 );
@@ -423,6 +448,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean adjustValue( K key, #e# amount ) {
         int index = index(key);
         if ( index < 0 ) {
@@ -435,6 +461,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #e# adjustOrPutValue( final K key, final #e# adjust_amount,
 		final #e# put_amount ) {
 
@@ -467,6 +494,7 @@
      * @return false if the loop over the keys terminated because
      * the procedure returned false for some key.
      */
+    @Override
     public boolean forEachKey( TObjectProcedure<? super K> procedure ) {
         return forEach( procedure );
     }
@@ -479,6 +507,7 @@
      * @return false if the loop over the values terminated because
      * the procedure returned false for some value.
      */
+    @Override
     public boolean forEachValue( T#E#Procedure procedure ) {
         Object[] keys = _set;
         #e#[] values = _values;
@@ -500,6 +529,7 @@
      * @return false if the loop over the entries terminated because
      * the procedure returned false for some entry.
      */
+    @Override
     @SuppressWarnings({"unchecked"})
     public boolean forEachEntry( TObject#E#Procedure<? super K> procedure ) {
         Object[] keys = _set;
@@ -522,6 +552,8 @@
      * @param procedure determines which entries to keep
      * @return true if the map was modified.
      */
+    @Override
+    @SuppressWarnings("unchecked")
     public boolean retainEntries( TObject#E#Procedure<? super K> procedure ) {
         boolean modified = false;
         //noinspection unchecked
@@ -553,6 +585,7 @@
      *
      * @param function a <code>T#E#Function</code> value
      */
+    @Override
     public void transformValues( T#E#Function function ) {
         Object[] keys = _set;
         #e#[] values = _values;
@@ -573,6 +606,8 @@
      * @param other an <code>Object</code> value
      * @return a <code>boolean</code> value
      */
+    @Override
+    @SuppressWarnings("rawtypes")
     public boolean equals( Object other ) {
         if ( ! ( other instanceof TObject#E#Map ) ) {
             return false;
@@ -607,6 +642,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public int hashCode() {
         int hashcode = 0;
         Object[] keys = _set;
@@ -624,15 +660,17 @@
     /** a view onto the keys of the map. */
     protected class KeyView extends MapBackedView<K> {
 
-        @SuppressWarnings({"unchecked"})
+        @Override
         public Iterator<K> iterator() {
-            return new TObjectHashIterator( TObject#E#HashMap.this );
+            return new TObjectHashIterator<K>( TObject#E#HashMap.this );
         }
 
+        @Override
         public boolean removeElement( K key ) {
             return no_entry_value != TObject#E#HashMap.this.remove( key );
         }
 
+        @Override
         public boolean containsElement( K key ) {
             return TObject#E#HashMap.this.contains( key );
         }
@@ -646,28 +684,34 @@
 
         public abstract boolean containsElement( E key );
 
+        @Override
         @SuppressWarnings({"unchecked"})
         public boolean contains( Object key ) {
             return containsElement( (E) key );
         }
 
+        @Override
         @SuppressWarnings({"unchecked"})
         public boolean remove( Object o ) {
             return removeElement( (E) o );
         }
 
+        @Override
         public void clear() {
             TObject#E#HashMap.this.clear();
         }
 
+        @Override
         public boolean add( E obj ) {
             throw new UnsupportedOperationException();
         }
 
+        @Override
         public int size() {
             return TObject#E#HashMap.this.size();
         }
 
+        @Override
         public Object[] toArray() {
             Object[] result = new Object[size()];
             Iterator<E> e = iterator();
@@ -677,6 +721,8 @@
             return result;
         }
 
+        @Override
+        @SuppressWarnings("unchecked")
         public <T> T[] toArray( T[] a ) {
             int size = size();
             if ( a.length < size ) {
@@ -698,15 +744,17 @@
             return a;
         }
 
+        @Override
         public boolean isEmpty() {
             return TObject#E#HashMap.this.isEmpty();
         }
 
+        @Override
         public boolean addAll( Collection<? extends E> collection ) {
             throw new UnsupportedOperationException();
         }
 
-        @SuppressWarnings({"SuspiciousMethodCalls"})
+        @Override
         public boolean retainAll( Collection<?> collection ) {
             boolean changed = false;
             Iterator<E> i = iterator();
@@ -724,45 +772,54 @@
     class T#E#ValueCollection implements T#E#Collection {
 
         /** {@inheritDoc} */
+        @Override
         public T#E#Iterator iterator() {
             return new TObject#E#ValueHashIterator();
         }
 
         /** {@inheritDoc} */
+        @Override
         public #e# getNoEntryValue() {
             return no_entry_value;
         }
 
         /** {@inheritDoc} */
+        @Override
         public int size() {
             return _size;
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean isEmpty() {
             return 0 == _size;
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean contains( #e# entry ) {
             return TObject#E#HashMap.this.containsValue( entry );
         }
 
         /** {@inheritDoc} */
+        @Override
         public #e#[] toArray() {
             return TObject#E#HashMap.this.values();
         }
 
         /** {@inheritDoc} */
+        @Override
         public #e#[] toArray( #e#[] dest ) {
             return TObject#E#HashMap.this.values( dest );
         }
 
+        @Override
         public boolean add( #e# entry ) {
             throw new UnsupportedOperationException();
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean remove( #e# entry ) {
             #e#[] values = _values;
             Object[] set = _set;
@@ -777,6 +834,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean containsAll( Collection<?> collection ) {
             for ( Object element : collection ) {
                 if ( element instanceof #ET# ) {
@@ -792,6 +850,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean containsAll( T#E#Collection collection ) {
             T#E#Iterator iter = collection.iterator();
             while ( iter.hasNext() ) {
@@ -803,6 +862,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean containsAll( #e#[] array ) {
             for ( #e# element : array ) {
                 if ( ! TObject#E#HashMap.this.containsValue( element ) ) {
@@ -813,22 +873,25 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean addAll( Collection<? extends #ET#> collection ) {
             throw new UnsupportedOperationException();
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean addAll( T#E#Collection collection ) {
             throw new UnsupportedOperationException();
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean addAll( #e#[] array ) {
             throw new UnsupportedOperationException();
         }
 
         /** {@inheritDoc} */
-        @SuppressWarnings({"SuspiciousMethodCalls"})
+        @Override
         public boolean retainAll( Collection<?> collection ) {
             boolean modified = false;
             T#E#Iterator iter = iterator();
@@ -842,6 +905,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean retainAll( T#E#Collection collection ) {
             if ( this == collection ) {
                 return false;
@@ -858,6 +922,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean retainAll( #e#[] array ) {
             boolean changed = false;
             Arrays.sort( array );
@@ -876,6 +941,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean removeAll( Collection<?> collection ) {
             boolean changed = false;
             for ( Object element : collection ) {
@@ -890,6 +956,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean removeAll( T#E#Collection collection ) {
             if ( this == collection ) {
                 clear();
@@ -907,6 +974,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean removeAll( #e#[] array ) {
             boolean changed = false;
             for ( int i = array.length; i-- > 0; ) {
@@ -918,11 +986,13 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public void clear() {
             TObject#E#HashMap.this.clear();
         }
 
         /** {@inheritDoc} */
+        @Override
         public boolean forEach( T#E#Procedure procedure ) {
             return TObject#E#HashMap.this.forEachValue( procedure );
         }
@@ -934,6 +1004,7 @@
             forEachValue( new T#E#Procedure() {
                 private boolean first = true;
 
+                @Override
                 public boolean execute( #e# value ) {
                     if ( first ) {
                         first = false;
@@ -970,17 +1041,20 @@
             }
 
             /** {@inheritDoc} */
+            @Override
             public boolean hasNext() {
                 return nextIndex() >= 0;
             }
 
             /** {@inheritDoc} */
+            @Override
             public #e# next() {
                 moveToNextIndex();
                 return _values[_index];
             }
 
             /** @{inheritDoc} */
+            @Override
             public void remove() {
                 if ( _expectedSize != _hash.size() ) {
                     throw new ConcurrentModificationException();
@@ -1039,7 +1113,7 @@
     }
 
 
-    class TObject#E#HashIterator<K> extends TObjectHashIterator<K>
+    class TObject#E#HashIterator extends TObjectHashIterator<K>
         implements TObject#E#Iterator<K> {
 
         /** the collection being iterated over */
@@ -1051,22 +1125,26 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public void advance() {
             moveToNextIndex();
         }
 
         /** {@inheritDoc} */
+        @Override
         @SuppressWarnings({"unchecked"})
         public K key() {
             return ( K ) _map._set[_index];
         }
 
         /** {@inheritDoc} */
+        @Override
         public #e# value() {
             return _map._values[_index];
         }
 
         /** {@inheritDoc} */
+        @Override
         public #e# setValue( #e# val ) {
             #e# old = value();
             _map._values[_index] = val;
@@ -1077,6 +1155,7 @@
 
     // Externalization
 
+    @Override
     public void writeExternal( ObjectOutput out ) throws IOException {
         // VERSION
         out.writeByte( 0 );
@@ -1100,6 +1179,8 @@
     }
 
 
+    @Override
+    @SuppressWarnings("unchecked")
     public void readExternal( ObjectInput in )
         throws IOException, ClassNotFoundException {
 
@@ -1127,10 +1208,12 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public String toString() {
         final StringBuilder buf = new StringBuilder("{");
         forEachEntry( new TObject#E#Procedure<K>() {
             private boolean first = true;
+            @Override
             public boolean execute( K key, #e# value ) {
                 if ( first ) first = false;
                 else buf.append( "," );
diff -ur old-trove-3.0.3/templates/gnu/trove/map/Object_E_Map.template trove-3.0.3/templates/gnu/trove/map/Object_E_Map.template
--- old-trove-3.0.3/templates/gnu/trove/map/Object_E_Map.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/map/Object_E_Map.template	2014-03-03 15:19:33.000000000 -0800
@@ -441,6 +441,7 @@
      * @param o object to be compared for equality with this map
      * @return <tt>true</tt> if the specified object is equal to this map
      */
+    @Override
     boolean equals( Object o );
 
     /**
@@ -456,5 +457,6 @@
      * @see Object#equals(Object)
      * @see #equals(Object)
      */
+    @Override
     int hashCode();
-}
\ No newline at end of file
+}
diff -ur old-trove-3.0.3/templates/gnu/trove/procedure/_E_Procedure.template trove-3.0.3/templates/gnu/trove/procedure/_E_Procedure.template
--- old-trove-3.0.3/templates/gnu/trove/procedure/_E_Procedure.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/procedure/_E_Procedure.template	2014-03-03 15:19:33.000000000 -0800
@@ -38,4 +38,4 @@
      * allowed.
      */
     public boolean execute( #e# value );
-}
\ No newline at end of file
+}
diff -ur old-trove-3.0.3/templates/gnu/trove/queue/_E_Queue.template trove-3.0.3/templates/gnu/trove/queue/_E_Queue.template
--- old-trove-3.0.3/templates/gnu/trove/queue/_E_Queue.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/queue/_E_Queue.template	2014-03-03 15:19:33.000000000 -0800
@@ -65,4 +65,4 @@
 	 * @return	the head of this queue, or {@link #getNoEntryValue} if this queue is empty
 	 */
 	public #e# poll();
-}
\ No newline at end of file
+}
diff -ur old-trove-3.0.3/templates/gnu/trove/set/_E_Set.template trove-3.0.3/templates/gnu/trove/set/_E_Set.template
--- old-trove-3.0.3/templates/gnu/trove/set/_E_Set.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/set/_E_Set.template	2014-03-03 15:19:33.000000000 -0800
@@ -53,6 +53,7 @@
      *
      * @return the value that represents null
      */
+    @Override
     #e# getNoEntryValue();
 
 
@@ -63,6 +64,7 @@
      *
      * @return the number of elements in this set (its cardinality)
      */
+    @Override
     int size();
 
     
@@ -71,6 +73,7 @@
      *
      * @return <tt>true</tt> if this set contains no elements
      */
+    @Override
     boolean isEmpty();
 
 
@@ -80,6 +83,7 @@
      * @param entry an <code>#e#</code> value
      * @return true if the set contains the specified element.
      */
+    @Override
     boolean contains( #e# entry );
 
 
@@ -89,6 +93,7 @@
      *
      * @return an <code>T#E#Iterator</code> value
      */
+    @Override
     T#E#Iterator iterator();
 
 
@@ -108,6 +113,7 @@
      *
      * @return an array containing all the elements in this set
      */
+    @Override
     #e#[] toArray();
 
 
@@ -134,6 +140,7 @@
      * @return an <tt>#e#[]</tt> containing all the elements in this set
      * @throws NullPointerException if the specified array is null
      */
+    @Override
     #e#[] toArray( #e#[] dest );
 
 
@@ -143,6 +150,7 @@
      * @param entry a <code>#e#</code> value
      * @return true if the set was modified by the add operation
      */
+    @Override
     boolean add( #e# entry );
 
 
@@ -152,6 +160,7 @@
      * @param entry an <code>#e#</code> value
      * @return true if the set was modified by the remove operation.
      */
+    @Override
     boolean remove( #e# entry );
 
 
@@ -162,6 +171,7 @@
      * @param collection a <code>Collection</code> value
      * @return true if all elements were present in the set.
      */
+    @Override
     boolean containsAll( Collection<?> collection );
 
 
@@ -172,6 +182,7 @@
      * @param collection a <code>T#E#Collection</code> value
      * @return true if all elements were present in the set.
      */
+    @Override
     boolean containsAll( T#E#Collection collection );
 
 
@@ -182,6 +193,7 @@
      * @param array as <code>array</code> of #e# primitives.
      * @return true if all elements were present in the set.
      */
+    @Override
     boolean containsAll( #e#[] array );
 
 
@@ -191,6 +203,7 @@
      * @param collection a <code>Collection</code> value
      * @return true if the set was modified by the add all operation.
      */
+    @Override
     boolean addAll( Collection<? extends #ET#> collection );
 
 
@@ -200,6 +213,7 @@
      * @param collection a <code>T#E#Collection</code> value
      * @return true if the set was modified by the add all operation.
      */
+    @Override
     boolean addAll( T#E#Collection collection );
 
 
@@ -209,6 +223,7 @@
      * @param array a <code>array</code> of #e# primitives.
      * @return true if the set was modified by the add all operation.
      */
+    @Override
     boolean addAll( #e#[] array );
 
 
@@ -219,6 +234,7 @@
      * @param collection a <code>Collection</code> value
      * @return true if the set was modified by the retain all operation
      */
+    @Override
     boolean retainAll( Collection<?> collection );
 
 
@@ -229,6 +245,7 @@
      * @param collection a <code>T#E#Collection</code> value
      * @return true if the set was modified by the retain all operation
      */
+    @Override
     boolean retainAll( T#E#Collection collection );
 
 
@@ -239,6 +256,7 @@
      * @param array an <code>array</code> of #e# primitives.
      * @return true if the set was modified by the retain all operation
      */
+    @Override
     boolean retainAll( #e#[] array );
 
 
@@ -248,6 +266,7 @@
      * @param collection a <code>Collection</code> value
      * @return true if the set was modified by the remove all operation.
      */
+    @Override
     boolean removeAll( Collection<?> collection );
 
 
@@ -257,6 +276,7 @@
      * @param collection a <code>T#E#Collection</code> value
      * @return true if the set was modified by the remove all operation.
      */
+    @Override
     boolean removeAll( T#E#Collection collection );
 
 
@@ -266,12 +286,14 @@
      * @param array an <code>array</code> of #e# primitives.
      * @return true if the set was modified by the remove all operation.
      */
+    @Override
     public boolean removeAll( #e#[] array );
 
 
     /**
      * Empties the set.
      */
+    @Override
     void clear();
 
 
@@ -282,6 +304,7 @@
      * @return false if the loop over the set terminated because
      * the procedure returned false for some value.
      */
+    @Override
     boolean forEach( T#E#Procedure procedure );
 
 
@@ -299,6 +322,7 @@
      * @param o object to be compared for equality with this set
      * @return <tt>true</tt> if the specified object is equal to this set
      */
+    @Override
     boolean equals( Object o );
 
 
@@ -314,6 +338,7 @@
      * @see Object#equals(Object)
      * @see Set#equals(Object)
      */
+    @Override
     int hashCode();
 
 
diff -ur old-trove-3.0.3/templates/gnu/trove/set/hash/_E_HashSet.template trove-3.0.3/templates/gnu/trove/set/hash/_E_HashSet.template
--- old-trove-3.0.3/templates/gnu/trove/set/hash/_E_HashSet.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/set/hash/_E_HashSet.template	2014-03-03 15:19:33.000000000 -0800
@@ -151,12 +151,14 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public T#E#Iterator iterator() {
         return new T#E#HashIterator( this );
     }
 
 
     /** {@inheritDoc} */
+    @Override
     public #e#[] toArray() {
         #e#[] result = new #e#[ size() ];
         #e#[] set = _set;
@@ -172,6 +174,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public #e#[] toArray( #e#[] dest ) {
         #e#[] set = _set;
         byte[] states = _states;
@@ -190,6 +193,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean add( #e# val ) {
         int index = insertKey(val);
 
@@ -204,6 +208,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean remove( #e# val ) {
         int index = index(val);
         if ( index >= 0 ) {
@@ -215,6 +220,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean containsAll( Collection<?> collection ) {
         for ( Object element : collection ) {
             if ( element instanceof #ET# ) {
@@ -232,6 +238,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean containsAll( T#E#Collection collection ) {
         T#E#Iterator iter = collection.iterator();
         while ( iter.hasNext() ) {
@@ -245,6 +252,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean containsAll( #e#[] array ) {
         for ( int i = array.length; i-- > 0; ) {
             if ( ! contains( array[i] ) ) {
@@ -256,6 +264,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean addAll( Collection<? extends #ET#> collection ) {
         boolean changed = false;
         for ( #ET# element : collection ) {
@@ -269,6 +278,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean addAll( T#E#Collection collection ) {
         boolean changed = false;
         T#E#Iterator iter = collection.iterator();
@@ -283,6 +293,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean addAll( #e#[] array ) {
         boolean changed = false;
         for ( int i = array.length; i-- > 0; ) {
@@ -295,7 +306,7 @@
 
 
     /** {@inheritDoc} */
-    @SuppressWarnings({"SuspiciousMethodCalls"})
+    @Override
     public boolean retainAll( Collection<?> collection ) {
         boolean modified = false;
 	    T#E#Iterator iter = iterator();
@@ -310,6 +321,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean retainAll( T#E#Collection collection ) {
         if ( this == collection ) {
             return false;
@@ -327,6 +339,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean retainAll( #e#[] array ) {
         boolean changed = false;
         Arrays.sort( array );
@@ -347,6 +360,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean removeAll( Collection<?> collection ) {
         boolean changed = false;
         for ( Object element : collection ) {
@@ -362,6 +376,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean removeAll( T#E#Collection collection ) {
         boolean changed = false;
         T#E#Iterator iter = collection.iterator();
@@ -376,6 +391,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean removeAll( #e#[] array ) {
         boolean changed = false;
         for ( int i = array.length; i-- > 0; ) {
@@ -388,6 +404,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public void clear() {
         super.clear();
         #e#[] set = _set;
@@ -401,6 +418,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     protected void rehash( int newCapacity ) {
         int oldCapacity = _set.length;
         
@@ -420,6 +438,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public boolean equals( Object other ) {
         if ( ! ( other instanceof T#E#Set ) ) {
             return false;
@@ -440,6 +459,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public int hashCode() {
         int hashcode = 0;
         for ( int i = _states.length; i-- > 0; ) {
@@ -452,6 +472,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public String toString() {
         StringBuilder buffy = new StringBuilder( _size * 2 + 2 );
         buffy.append("{");
@@ -480,6 +501,7 @@
         }
 
         /** {@inheritDoc} */
+        @Override
         public #e# next() {
             moveToNextIndex();
             return _hash._set[_index];
@@ -488,6 +510,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public void writeExternal( ObjectOutput out ) throws IOException {
 
     	// VERSION
@@ -515,6 +538,7 @@
 
 
     /** {@inheritDoc} */
+    @Override
     public void readExternal( ObjectInput in )
     	throws IOException, ClassNotFoundException {
 
Only in trove-3.0.3/templates/gnu/trove/set/hash: _E_OffheapHashSet.template
diff -ur old-trove-3.0.3/templates/gnu/trove/stack/array/_E_ArrayStack.template trove-3.0.3/templates/gnu/trove/stack/array/_E_ArrayStack.template
--- old-trove-3.0.3/templates/gnu/trove/stack/array/_E_ArrayStack.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/stack/array/_E_ArrayStack.template	2014-03-03 15:19:33.000000000 -0800
@@ -103,6 +103,7 @@
      *
      * @return the value that represents null
      */
+    @Override
     public #e# getNoEntryValue() {
         return _list.getNoEntryValue();
     }
@@ -113,6 +114,7 @@
      *
      * @param val an <code>#e#</code> value
      */
+    @Override
     public void push( #e# val ) {
         _list.add( val );
     }
@@ -123,6 +125,7 @@
      *
      * @return an <code>#e#</code> value
      */
+    @Override
     public #e# pop() {
         return _list.removeAt( _list.size() - 1 );
     }
@@ -133,6 +136,7 @@
      *
      * @return an <code>#e#</code> value
      */
+    @Override
     public #e# peek() {
         return _list.get( _list.size() - 1 );
     }
@@ -141,6 +145,7 @@
     /**
      * Returns the current depth of the stack.
      */
+    @Override
     public int size() {
         return _list.size();
     }
@@ -149,6 +154,7 @@
     /**
      * Clears the stack.
      */
+    @Override
     public void clear() {
         _list.clear();
     }
@@ -160,6 +166,7 @@
      *
      * @return an <code>#e#[]</code> value
      */
+    @Override
     public #e#[] toArray() {
         #e#[] retval = _list.toArray();
         reverse( retval, 0, size() );
@@ -178,6 +185,7 @@
      *
      * @param dest the array to copy into.
      */
+    @Override
     public void toArray( #e#[] dest ) {
         int size = size();
         int start = size - dest.length;
@@ -233,6 +241,7 @@
      *
      * @return a <code>String</code> value
      */
+    @Override
     public String toString() {
         final StringBuilder buf = new StringBuilder( "{" );
         for ( int i = _list.size() - 1; i > 0; i-- ) {
@@ -247,6 +256,7 @@
     }
 
     
+    @Override
     public boolean equals( Object o ) {
         if ( this == o ) {
             return true;
@@ -261,11 +271,13 @@
     }
 
 
+    @Override
     public int hashCode() {
         return _list.hashCode();
     }
 
 
+    @Override
     public void writeExternal( ObjectOutput out ) throws IOException {
     	// VERSION
     	out.writeByte( 0 );
@@ -275,6 +287,7 @@
     }
 
 
+    @Override
     public void readExternal( ObjectInput in )
     	throws IOException, ClassNotFoundException {
 
@@ -284,4 +297,4 @@
     	// LIST
     	_list = ( T#E#ArrayList ) in.readObject();
     }
-} // T#E#ArrayStack
\ No newline at end of file
+} // T#E#ArrayStack
diff -ur old-trove-3.0.3/templates/gnu/trove/stack/_E_Stack.template trove-3.0.3/templates/gnu/trove/stack/_E_Stack.template
--- old-trove-3.0.3/templates/gnu/trove/stack/_E_Stack.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/stack/_E_Stack.template	2014-03-03 15:19:33.000000000 -0800
@@ -95,4 +95,4 @@
      * @param dest the array to copy into.
      */
     public void toArray( #e#[] dest );
-}
\ No newline at end of file
+}
diff -ur old-trove-3.0.3/templates/gnu/trove/TCollections.template trove-3.0.3/templates/gnu/trove/TCollections.template
--- old-trove-3.0.3/templates/gnu/trove/TCollections.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/TCollections.template	2014-03-03 15:19:33.000000000 -0800
@@ -417,4 +417,4 @@
     public static <K> TObject#E#Map<K> synchronizedMap( TObject#E#Map<K> m ) {
 	    return new TSynchronizedObject#E#Map<K>( m );
     }
-=====END_REPLICATED_CONTENT #12=====
\ No newline at end of file
+=====END_REPLICATED_CONTENT #12=====
diff -ur old-trove-3.0.3/templates/gnu/trove/TDecorators.template trove-3.0.3/templates/gnu/trove/TDecorators.template
--- old-trove-3.0.3/templates/gnu/trove/TDecorators.template	2012-06-03 21:38:20.000000000 -0700
+++ trove-3.0.3/templates/gnu/trove/TDecorators.template	2014-03-03 15:19:33.000000000 -0800
@@ -116,4 +116,4 @@
     public static List<#ET#> wrap( T#E#List list ) {
         return new T#E#ListDecorator( list );
     }
-=====END_REPLICATED_CONTENT #5=====
\ No newline at end of file
+=====END_REPLICATED_CONTENT #5=====
Only in old-trove-3.0.3/: test
Only in trove-3.0.3/: test-src
Only in old-trove-3.0.3/: trove-3.0.3-src.jar
